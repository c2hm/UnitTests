
stm32UnitTests.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7d4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  0800d95c  0800d95c  0001d95c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d9a8  0800d9a8  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800d9a8  0800d9a8  0001d9a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d9b0  0800d9b0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d9b0  0800d9b0  0001d9b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d9b4  0800d9b4  0001d9b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800d9b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c8c  20000090  0800da48  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d1c  0800da48  00020d1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c3ea  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005669  00000000  00000000  0004c4aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023c0  00000000  00000000  00051b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000021a0  00000000  00000000  00053ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031403  00000000  00000000  00056078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002de3d  00000000  00000000  0008747b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011c4a1  00000000  00000000  000b52b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001d1759  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009bfc  00000000  00000000  001d17ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800d944 	.word	0x0800d944

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	0800d944 	.word	0x0800d944

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004d2:	2300      	movs	r3, #0
 80004d4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004d6:	2003      	movs	r0, #3
 80004d8:	f001 fb9e 	bl	8001c18 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004dc:	2000      	movs	r0, #0
 80004de:	f000 f80d 	bl	80004fc <HAL_InitTick>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d002      	beq.n	80004ee <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80004e8:	2301      	movs	r3, #1
 80004ea:	71fb      	strb	r3, [r7, #7]
 80004ec:	e001      	b.n	80004f2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004ee:	f00c f82b 	bl	800c548 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80004f2:	79fb      	ldrb	r3, [r7, #7]
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	3708      	adds	r7, #8
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}

080004fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000504:	2300      	movs	r3, #0
 8000506:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000508:	4b17      	ldr	r3, [pc, #92]	; (8000568 <HAL_InitTick+0x6c>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d023      	beq.n	8000558 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000510:	4b16      	ldr	r3, [pc, #88]	; (800056c <HAL_InitTick+0x70>)
 8000512:	681a      	ldr	r2, [r3, #0]
 8000514:	4b14      	ldr	r3, [pc, #80]	; (8000568 <HAL_InitTick+0x6c>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	4619      	mov	r1, r3
 800051a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800051e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000522:	fbb2 f3f3 	udiv	r3, r2, r3
 8000526:	4618      	mov	r0, r3
 8000528:	f001 fbab 	bl	8001c82 <HAL_SYSTICK_Config>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d10f      	bne.n	8000552 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2b0f      	cmp	r3, #15
 8000536:	d809      	bhi.n	800054c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000538:	2200      	movs	r2, #0
 800053a:	6879      	ldr	r1, [r7, #4]
 800053c:	f04f 30ff 	mov.w	r0, #4294967295
 8000540:	f001 fb75 	bl	8001c2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000544:	4a0a      	ldr	r2, [pc, #40]	; (8000570 <HAL_InitTick+0x74>)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	6013      	str	r3, [r2, #0]
 800054a:	e007      	b.n	800055c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800054c:	2301      	movs	r3, #1
 800054e:	73fb      	strb	r3, [r7, #15]
 8000550:	e004      	b.n	800055c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000552:	2301      	movs	r3, #1
 8000554:	73fb      	strb	r3, [r7, #15]
 8000556:	e001      	b.n	800055c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000558:	2301      	movs	r3, #1
 800055a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800055c:	7bfb      	ldrb	r3, [r7, #15]
}
 800055e:	4618      	mov	r0, r3
 8000560:	3710      	adds	r7, #16
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	20000004 	.word	0x20000004
 800056c:	20000028 	.word	0x20000028
 8000570:	20000000 	.word	0x20000000

08000574 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <HAL_IncTick+0x20>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	461a      	mov	r2, r3
 800057e:	4b06      	ldr	r3, [pc, #24]	; (8000598 <HAL_IncTick+0x24>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4413      	add	r3, r2
 8000584:	4a04      	ldr	r2, [pc, #16]	; (8000598 <HAL_IncTick+0x24>)
 8000586:	6013      	str	r3, [r2, #0]
}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	20000004 	.word	0x20000004
 8000598:	200000ac 	.word	0x200000ac

0800059c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  return uwTick;
 80005a0:	4b03      	ldr	r3, [pc, #12]	; (80005b0 <HAL_GetTick+0x14>)
 80005a2:	681b      	ldr	r3, [r3, #0]
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	200000ac 	.word	0x200000ac

080005b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005bc:	f7ff ffee 	bl	800059c <HAL_GetTick>
 80005c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005cc:	d005      	beq.n	80005da <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80005ce:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <HAL_Delay+0x44>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	461a      	mov	r2, r3
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	4413      	add	r3, r2
 80005d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005da:	bf00      	nop
 80005dc:	f7ff ffde 	bl	800059c <HAL_GetTick>
 80005e0:	4602      	mov	r2, r0
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	1ad3      	subs	r3, r2, r3
 80005e6:	68fa      	ldr	r2, [r7, #12]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d8f7      	bhi.n	80005dc <HAL_Delay+0x28>
  {
  }
}
 80005ec:	bf00      	nop
 80005ee:	bf00      	nop
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000004 	.word	0x20000004

080005fc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	689b      	ldr	r3, [r3, #8]
 800060a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	431a      	orrs	r2, r3
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	609a      	str	r2, [r3, #8]
}
 8000616:	bf00      	nop
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr

08000622 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000622:	b480      	push	{r7}
 8000624:	b083      	sub	sp, #12
 8000626:	af00      	add	r7, sp, #0
 8000628:	6078      	str	r0, [r7, #4]
 800062a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	689b      	ldr	r3, [r3, #8]
 8000630:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	431a      	orrs	r2, r3
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	609a      	str	r2, [r3, #8]
}
 800063c:	bf00      	nop
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr

08000648 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	689b      	ldr	r3, [r3, #8]
 8000654:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000658:	4618      	mov	r0, r3
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr

08000664 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000664:	b480      	push	{r7}
 8000666:	b087      	sub	sp, #28
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	607a      	str	r2, [r7, #4]
 8000670:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	3360      	adds	r3, #96	; 0x60
 8000676:	461a      	mov	r2, r3
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	4413      	add	r3, r2
 800067e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000680:	697b      	ldr	r3, [r7, #20]
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <LL_ADC_SetOffset+0x44>)
 8000686:	4013      	ands	r3, r2
 8000688:	687a      	ldr	r2, [r7, #4]
 800068a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800068e:	683a      	ldr	r2, [r7, #0]
 8000690:	430a      	orrs	r2, r1
 8000692:	4313      	orrs	r3, r2
 8000694:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000698:	697b      	ldr	r3, [r7, #20]
 800069a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800069c:	bf00      	nop
 800069e:	371c      	adds	r7, #28
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	03fff000 	.word	0x03fff000

080006ac <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	3360      	adds	r3, #96	; 0x60
 80006ba:	461a      	mov	r2, r3
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	4413      	add	r3, r2
 80006c2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3714      	adds	r7, #20
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr

080006d8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80006d8:	b480      	push	{r7}
 80006da:	b087      	sub	sp, #28
 80006dc:	af00      	add	r7, sp, #0
 80006de:	60f8      	str	r0, [r7, #12]
 80006e0:	60b9      	str	r1, [r7, #8]
 80006e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	3360      	adds	r3, #96	; 0x60
 80006e8:	461a      	mov	r2, r3
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	009b      	lsls	r3, r3, #2
 80006ee:	4413      	add	r3, r2
 80006f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	431a      	orrs	r2, r3
 80006fe:	697b      	ldr	r3, [r7, #20]
 8000700:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000702:	bf00      	nop
 8000704:	371c      	adds	r7, #28
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr

0800070e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800070e:	b480      	push	{r7}
 8000710:	b087      	sub	sp, #28
 8000712:	af00      	add	r7, sp, #0
 8000714:	60f8      	str	r0, [r7, #12]
 8000716:	60b9      	str	r1, [r7, #8]
 8000718:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	3330      	adds	r3, #48	; 0x30
 800071e:	461a      	mov	r2, r3
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	0a1b      	lsrs	r3, r3, #8
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	f003 030c 	and.w	r3, r3, #12
 800072a:	4413      	add	r3, r2
 800072c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800072e:	697b      	ldr	r3, [r7, #20]
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	f003 031f 	and.w	r3, r3, #31
 8000738:	211f      	movs	r1, #31
 800073a:	fa01 f303 	lsl.w	r3, r1, r3
 800073e:	43db      	mvns	r3, r3
 8000740:	401a      	ands	r2, r3
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	0e9b      	lsrs	r3, r3, #26
 8000746:	f003 011f 	and.w	r1, r3, #31
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	f003 031f 	and.w	r3, r3, #31
 8000750:	fa01 f303 	lsl.w	r3, r1, r3
 8000754:	431a      	orrs	r2, r3
 8000756:	697b      	ldr	r3, [r7, #20]
 8000758:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800075a:	bf00      	nop
 800075c:	371c      	adds	r7, #28
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr

08000766 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000766:	b480      	push	{r7}
 8000768:	b087      	sub	sp, #28
 800076a:	af00      	add	r7, sp, #0
 800076c:	60f8      	str	r0, [r7, #12]
 800076e:	60b9      	str	r1, [r7, #8]
 8000770:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	3314      	adds	r3, #20
 8000776:	461a      	mov	r2, r3
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	0e5b      	lsrs	r3, r3, #25
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	f003 0304 	and.w	r3, r3, #4
 8000782:	4413      	add	r3, r2
 8000784:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000786:	697b      	ldr	r3, [r7, #20]
 8000788:	681a      	ldr	r2, [r3, #0]
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	0d1b      	lsrs	r3, r3, #20
 800078e:	f003 031f 	and.w	r3, r3, #31
 8000792:	2107      	movs	r1, #7
 8000794:	fa01 f303 	lsl.w	r3, r1, r3
 8000798:	43db      	mvns	r3, r3
 800079a:	401a      	ands	r2, r3
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	0d1b      	lsrs	r3, r3, #20
 80007a0:	f003 031f 	and.w	r3, r3, #31
 80007a4:	6879      	ldr	r1, [r7, #4]
 80007a6:	fa01 f303 	lsl.w	r3, r1, r3
 80007aa:	431a      	orrs	r2, r3
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80007b0:	bf00      	nop
 80007b2:	371c      	adds	r7, #28
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr

080007bc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80007bc:	b480      	push	{r7}
 80007be:	b085      	sub	sp, #20
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80007d4:	43db      	mvns	r3, r3
 80007d6:	401a      	ands	r2, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	f003 0318 	and.w	r3, r3, #24
 80007de:	4908      	ldr	r1, [pc, #32]	; (8000800 <LL_ADC_SetChannelSingleDiff+0x44>)
 80007e0:	40d9      	lsrs	r1, r3
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	400b      	ands	r3, r1
 80007e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80007ea:	431a      	orrs	r2, r3
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80007f2:	bf00      	nop
 80007f4:	3714      	adds	r7, #20
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	0007ffff 	.word	0x0007ffff

08000804 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	689b      	ldr	r3, [r3, #8]
 8000810:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000814:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	6093      	str	r3, [r2, #8]
}
 800081c:	bf00      	nop
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	689b      	ldr	r3, [r3, #8]
 8000834:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000838:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800083c:	d101      	bne.n	8000842 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800083e:	2301      	movs	r3, #1
 8000840:	e000      	b.n	8000844 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000842:	2300      	movs	r3, #0
}
 8000844:	4618      	mov	r0, r3
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	689b      	ldr	r3, [r3, #8]
 800085c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000860:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000864:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800086c:	bf00      	nop
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr

08000878 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	689b      	ldr	r3, [r3, #8]
 8000884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000888:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800088c:	d101      	bne.n	8000892 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800088e:	2301      	movs	r3, #1
 8000890:	e000      	b.n	8000894 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000892:	2300      	movs	r3, #0
}
 8000894:	4618      	mov	r0, r3
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	689b      	ldr	r3, [r3, #8]
 80008ac:	f003 0301 	and.w	r3, r3, #1
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d101      	bne.n	80008b8 <LL_ADC_IsEnabled+0x18>
 80008b4:	2301      	movs	r3, #1
 80008b6:	e000      	b.n	80008ba <LL_ADC_IsEnabled+0x1a>
 80008b8:	2300      	movs	r3, #0
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr

080008c6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80008c6:	b480      	push	{r7}
 80008c8:	b083      	sub	sp, #12
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	689b      	ldr	r3, [r3, #8]
 80008d2:	f003 0304 	and.w	r3, r3, #4
 80008d6:	2b04      	cmp	r3, #4
 80008d8:	d101      	bne.n	80008de <LL_ADC_REG_IsConversionOngoing+0x18>
 80008da:	2301      	movs	r3, #1
 80008dc:	e000      	b.n	80008e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80008de:	2300      	movs	r3, #0
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	689b      	ldr	r3, [r3, #8]
 80008f8:	f003 0308 	and.w	r3, r3, #8
 80008fc:	2b08      	cmp	r3, #8
 80008fe:	d101      	bne.n	8000904 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000900:	2301      	movs	r3, #1
 8000902:	e000      	b.n	8000906 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000904:	2300      	movs	r3, #0
}
 8000906:	4618      	mov	r0, r3
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
	...

08000914 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000914:	b590      	push	{r4, r7, lr}
 8000916:	b089      	sub	sp, #36	; 0x24
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800091c:	2300      	movs	r3, #0
 800091e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000920:	2300      	movs	r3, #0
 8000922:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d101      	bne.n	800092e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800092a:	2301      	movs	r3, #1
 800092c:	e136      	b.n	8000b9c <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	691b      	ldr	r3, [r3, #16]
 8000932:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000938:	2b00      	cmp	r3, #0
 800093a:	d109      	bne.n	8000950 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f00b fe27 	bl	800c590 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2200      	movs	r2, #0
 8000946:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2200      	movs	r2, #0
 800094c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff ff67 	bl	8000828 <LL_ADC_IsDeepPowerDownEnabled>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d004      	beq.n	800096a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff ff4d 	bl	8000804 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff ff82 	bl	8000878 <LL_ADC_IsInternalRegulatorEnabled>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d115      	bne.n	80009a6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff ff66 	bl	8000850 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000984:	4b87      	ldr	r3, [pc, #540]	; (8000ba4 <HAL_ADC_Init+0x290>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	099b      	lsrs	r3, r3, #6
 800098a:	4a87      	ldr	r2, [pc, #540]	; (8000ba8 <HAL_ADC_Init+0x294>)
 800098c:	fba2 2303 	umull	r2, r3, r2, r3
 8000990:	099b      	lsrs	r3, r3, #6
 8000992:	3301      	adds	r3, #1
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000998:	e002      	b.n	80009a0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	3b01      	subs	r3, #1
 800099e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d1f9      	bne.n	800099a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff ff64 	bl	8000878 <LL_ADC_IsInternalRegulatorEnabled>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d10d      	bne.n	80009d2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80009ba:	f043 0210 	orr.w	r2, r3, #16
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c6:	f043 0201 	orr.w	r2, r3, #1
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
 80009d0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff ff75 	bl	80008c6 <LL_ADC_REG_IsConversionOngoing>
 80009dc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80009e2:	f003 0310 	and.w	r3, r3, #16
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	f040 80cf 	bne.w	8000b8a <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	f040 80cb 	bne.w	8000b8a <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80009f8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80009fc:	f043 0202 	orr.w	r2, r3, #2
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff ff49 	bl	80008a0 <LL_ADC_IsEnabled>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d115      	bne.n	8000a40 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000a14:	4865      	ldr	r0, [pc, #404]	; (8000bac <HAL_ADC_Init+0x298>)
 8000a16:	f7ff ff43 	bl	80008a0 <LL_ADC_IsEnabled>
 8000a1a:	4604      	mov	r4, r0
 8000a1c:	4864      	ldr	r0, [pc, #400]	; (8000bb0 <HAL_ADC_Init+0x29c>)
 8000a1e:	f7ff ff3f 	bl	80008a0 <LL_ADC_IsEnabled>
 8000a22:	4603      	mov	r3, r0
 8000a24:	431c      	orrs	r4, r3
 8000a26:	4863      	ldr	r0, [pc, #396]	; (8000bb4 <HAL_ADC_Init+0x2a0>)
 8000a28:	f7ff ff3a 	bl	80008a0 <LL_ADC_IsEnabled>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	4323      	orrs	r3, r4
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d105      	bne.n	8000a40 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	4619      	mov	r1, r3
 8000a3a:	485f      	ldr	r0, [pc, #380]	; (8000bb8 <HAL_ADC_Init+0x2a4>)
 8000a3c:	f7ff fdde 	bl	80005fc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	7e5b      	ldrb	r3, [r3, #25]
 8000a44:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000a4a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000a50:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000a56:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a5e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000a60:	4313      	orrs	r3, r2
 8000a62:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d106      	bne.n	8000a7c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a72:	3b01      	subs	r3, #1
 8000a74:	045b      	lsls	r3, r3, #17
 8000a76:	69ba      	ldr	r2, [r7, #24]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d009      	beq.n	8000a98 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a88:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a90:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000a92:	69ba      	ldr	r2, [r7, #24]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	68da      	ldr	r2, [r3, #12]
 8000a9e:	4b47      	ldr	r3, [pc, #284]	; (8000bbc <HAL_ADC_Init+0x2a8>)
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	6812      	ldr	r2, [r2, #0]
 8000aa6:	69b9      	ldr	r1, [r7, #24]
 8000aa8:	430b      	orrs	r3, r1
 8000aaa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff ff08 	bl	80008c6 <LL_ADC_REG_IsConversionOngoing>
 8000ab6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff ff15 	bl	80008ec <LL_ADC_INJ_IsConversionOngoing>
 8000ac2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d13d      	bne.n	8000b46 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d13a      	bne.n	8000b46 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000ad4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000adc:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000aec:	f023 0302 	bic.w	r3, r3, #2
 8000af0:	687a      	ldr	r2, [r7, #4]
 8000af2:	6812      	ldr	r2, [r2, #0]
 8000af4:	69b9      	ldr	r1, [r7, #24]
 8000af6:	430b      	orrs	r3, r1
 8000af8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d118      	bne.n	8000b36 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	691b      	ldr	r3, [r3, #16]
 8000b0a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000b0e:	f023 0304 	bic.w	r3, r3, #4
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000b1a:	4311      	orrs	r1, r2
 8000b1c:	687a      	ldr	r2, [r7, #4]
 8000b1e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000b20:	4311      	orrs	r1, r2
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000b26:	430a      	orrs	r2, r1
 8000b28:	431a      	orrs	r2, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f042 0201 	orr.w	r2, r2, #1
 8000b32:	611a      	str	r2, [r3, #16]
 8000b34:	e007      	b.n	8000b46 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	691a      	ldr	r2, [r3, #16]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f022 0201 	bic.w	r2, r2, #1
 8000b44:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	691b      	ldr	r3, [r3, #16]
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d10c      	bne.n	8000b68 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b54:	f023 010f 	bic.w	r1, r3, #15
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	69db      	ldr	r3, [r3, #28]
 8000b5c:	1e5a      	subs	r2, r3, #1
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	430a      	orrs	r2, r1
 8000b64:	631a      	str	r2, [r3, #48]	; 0x30
 8000b66:	e007      	b.n	8000b78 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f022 020f 	bic.w	r2, r2, #15
 8000b76:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b7c:	f023 0303 	bic.w	r3, r3, #3
 8000b80:	f043 0201 	orr.w	r2, r3, #1
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	655a      	str	r2, [r3, #84]	; 0x54
 8000b88:	e007      	b.n	8000b9a <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b8e:	f043 0210 	orr.w	r2, r3, #16
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000b9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3724      	adds	r7, #36	; 0x24
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd90      	pop	{r4, r7, pc}
 8000ba4:	20000028 	.word	0x20000028
 8000ba8:	053e2d63 	.word	0x053e2d63
 8000bac:	50040000 	.word	0x50040000
 8000bb0:	50040100 	.word	0x50040100
 8000bb4:	50040200 	.word	0x50040200
 8000bb8:	50040300 	.word	0x50040300
 8000bbc:	fff0c007 	.word	0xfff0c007

08000bc0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b0b6      	sub	sp, #216	; 0xd8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d101      	bne.n	8000be2 <HAL_ADC_ConfigChannel+0x22>
 8000bde:	2302      	movs	r3, #2
 8000be0:	e3c7      	b.n	8001372 <HAL_ADC_ConfigChannel+0x7b2>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2201      	movs	r2, #1
 8000be6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fe69 	bl	80008c6 <LL_ADC_REG_IsConversionOngoing>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	f040 83a8 	bne.w	800134c <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	2b05      	cmp	r3, #5
 8000c02:	d824      	bhi.n	8000c4e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	3b02      	subs	r3, #2
 8000c0a:	2b03      	cmp	r3, #3
 8000c0c:	d81b      	bhi.n	8000c46 <HAL_ADC_ConfigChannel+0x86>
 8000c0e:	a201      	add	r2, pc, #4	; (adr r2, 8000c14 <HAL_ADC_ConfigChannel+0x54>)
 8000c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c14:	08000c25 	.word	0x08000c25
 8000c18:	08000c2d 	.word	0x08000c2d
 8000c1c:	08000c35 	.word	0x08000c35
 8000c20:	08000c3d 	.word	0x08000c3d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	220c      	movs	r2, #12
 8000c28:	605a      	str	r2, [r3, #4]
          break;
 8000c2a:	e011      	b.n	8000c50 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	2212      	movs	r2, #18
 8000c30:	605a      	str	r2, [r3, #4]
          break;
 8000c32:	e00d      	b.n	8000c50 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	2218      	movs	r2, #24
 8000c38:	605a      	str	r2, [r3, #4]
          break;
 8000c3a:	e009      	b.n	8000c50 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c42:	605a      	str	r2, [r3, #4]
          break;
 8000c44:	e004      	b.n	8000c50 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	2206      	movs	r2, #6
 8000c4a:	605a      	str	r2, [r3, #4]
          break;
 8000c4c:	e000      	b.n	8000c50 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8000c4e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6818      	ldr	r0, [r3, #0]
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	6859      	ldr	r1, [r3, #4]
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	f7ff fd56 	bl	800070e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff fe2d 	bl	80008c6 <LL_ADC_REG_IsConversionOngoing>
 8000c6c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff fe39 	bl	80008ec <LL_ADC_INJ_IsConversionOngoing>
 8000c7a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000c7e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 81a6 	bne.w	8000fd4 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000c88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	f040 81a1 	bne.w	8000fd4 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6818      	ldr	r0, [r3, #0]
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	6819      	ldr	r1, [r3, #0]
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	f7ff fd61 	bl	8000766 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	695a      	ldr	r2, [r3, #20]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	68db      	ldr	r3, [r3, #12]
 8000cae:	08db      	lsrs	r3, r3, #3
 8000cb0:	f003 0303 	and.w	r3, r3, #3
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	691b      	ldr	r3, [r3, #16]
 8000cc2:	2b04      	cmp	r3, #4
 8000cc4:	d00a      	beq.n	8000cdc <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6818      	ldr	r0, [r3, #0]
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	6919      	ldr	r1, [r3, #16]
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000cd6:	f7ff fcc5 	bl	8000664 <LL_ADC_SetOffset>
 8000cda:	e17b      	b.n	8000fd4 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff fce2 	bl	80006ac <LL_ADC_GetOffsetChannel>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d10a      	bne.n	8000d08 <HAL_ADC_ConfigChannel+0x148>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fcd7 	bl	80006ac <LL_ADC_GetOffsetChannel>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	0e9b      	lsrs	r3, r3, #26
 8000d02:	f003 021f 	and.w	r2, r3, #31
 8000d06:	e01e      	b.n	8000d46 <HAL_ADC_ConfigChannel+0x186>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fccc 	bl	80006ac <LL_ADC_GetOffsetChannel>
 8000d14:	4603      	mov	r3, r0
 8000d16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000d1e:	fa93 f3a3 	rbit	r3, r3
 8000d22:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000d2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000d2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d101      	bne.n	8000d3a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8000d36:	2320      	movs	r3, #32
 8000d38:	e004      	b.n	8000d44 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8000d3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000d3e:	fab3 f383 	clz	r3, r3
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d105      	bne.n	8000d5e <HAL_ADC_ConfigChannel+0x19e>
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	0e9b      	lsrs	r3, r3, #26
 8000d58:	f003 031f 	and.w	r3, r3, #31
 8000d5c:	e018      	b.n	8000d90 <HAL_ADC_ConfigChannel+0x1d0>
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d66:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000d6a:	fa93 f3a3 	rbit	r3, r3
 8000d6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8000d72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000d76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8000d7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d101      	bne.n	8000d86 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8000d82:	2320      	movs	r3, #32
 8000d84:	e004      	b.n	8000d90 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8000d86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000d8a:	fab3 f383 	clz	r3, r3
 8000d8e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d106      	bne.n	8000da2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff fc9b 	bl	80006d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2101      	movs	r1, #1
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff fc7f 	bl	80006ac <LL_ADC_GetOffsetChannel>
 8000dae:	4603      	mov	r3, r0
 8000db0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d10a      	bne.n	8000dce <HAL_ADC_ConfigChannel+0x20e>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff fc74 	bl	80006ac <LL_ADC_GetOffsetChannel>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	0e9b      	lsrs	r3, r3, #26
 8000dc8:	f003 021f 	and.w	r2, r3, #31
 8000dcc:	e01e      	b.n	8000e0c <HAL_ADC_ConfigChannel+0x24c>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fc69 	bl	80006ac <LL_ADC_GetOffsetChannel>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000de0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000de4:	fa93 f3a3 	rbit	r3, r3
 8000de8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8000dec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000df0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8000df4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d101      	bne.n	8000e00 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8000dfc:	2320      	movs	r3, #32
 8000dfe:	e004      	b.n	8000e0a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8000e00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000e04:	fab3 f383 	clz	r3, r3
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d105      	bne.n	8000e24 <HAL_ADC_ConfigChannel+0x264>
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	0e9b      	lsrs	r3, r3, #26
 8000e1e:	f003 031f 	and.w	r3, r3, #31
 8000e22:	e018      	b.n	8000e56 <HAL_ADC_ConfigChannel+0x296>
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000e30:	fa93 f3a3 	rbit	r3, r3
 8000e34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8000e38:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000e3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8000e40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d101      	bne.n	8000e4c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8000e48:	2320      	movs	r3, #32
 8000e4a:	e004      	b.n	8000e56 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8000e4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000e50:	fab3 f383 	clz	r3, r3
 8000e54:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d106      	bne.n	8000e68 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2101      	movs	r1, #1
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fc38 	bl	80006d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2102      	movs	r1, #2
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff fc1c 	bl	80006ac <LL_ADC_GetOffsetChannel>
 8000e74:	4603      	mov	r3, r0
 8000e76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d10a      	bne.n	8000e94 <HAL_ADC_ConfigChannel+0x2d4>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	2102      	movs	r1, #2
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff fc11 	bl	80006ac <LL_ADC_GetOffsetChannel>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	0e9b      	lsrs	r3, r3, #26
 8000e8e:	f003 021f 	and.w	r2, r3, #31
 8000e92:	e01e      	b.n	8000ed2 <HAL_ADC_ConfigChannel+0x312>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2102      	movs	r1, #2
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff fc06 	bl	80006ac <LL_ADC_GetOffsetChannel>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000eaa:	fa93 f3a3 	rbit	r3, r3
 8000eae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8000eb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000eb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8000eba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d101      	bne.n	8000ec6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8000ec2:	2320      	movs	r3, #32
 8000ec4:	e004      	b.n	8000ed0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8000ec6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000eca:	fab3 f383 	clz	r3, r3
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d105      	bne.n	8000eea <HAL_ADC_ConfigChannel+0x32a>
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	0e9b      	lsrs	r3, r3, #26
 8000ee4:	f003 031f 	and.w	r3, r3, #31
 8000ee8:	e016      	b.n	8000f18 <HAL_ADC_ConfigChannel+0x358>
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ef2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000ef6:	fa93 f3a3 	rbit	r3, r3
 8000efa:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8000efc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000efe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8000f02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d101      	bne.n	8000f0e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8000f0a:	2320      	movs	r3, #32
 8000f0c:	e004      	b.n	8000f18 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8000f0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f12:	fab3 f383 	clz	r3, r3
 8000f16:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d106      	bne.n	8000f2a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2200      	movs	r2, #0
 8000f22:	2102      	movs	r1, #2
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff fbd7 	bl	80006d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2103      	movs	r1, #3
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fbbb 	bl	80006ac <LL_ADC_GetOffsetChannel>
 8000f36:	4603      	mov	r3, r0
 8000f38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d10a      	bne.n	8000f56 <HAL_ADC_ConfigChannel+0x396>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2103      	movs	r1, #3
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff fbb0 	bl	80006ac <LL_ADC_GetOffsetChannel>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	0e9b      	lsrs	r3, r3, #26
 8000f50:	f003 021f 	and.w	r2, r3, #31
 8000f54:	e017      	b.n	8000f86 <HAL_ADC_ConfigChannel+0x3c6>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2103      	movs	r1, #3
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fba5 	bl	80006ac <LL_ADC_GetOffsetChannel>
 8000f62:	4603      	mov	r3, r0
 8000f64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f68:	fa93 f3a3 	rbit	r3, r3
 8000f6c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8000f6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f70:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8000f72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d101      	bne.n	8000f7c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8000f78:	2320      	movs	r3, #32
 8000f7a:	e003      	b.n	8000f84 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8000f7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f7e:	fab3 f383 	clz	r3, r3
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d105      	bne.n	8000f9e <HAL_ADC_ConfigChannel+0x3de>
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	0e9b      	lsrs	r3, r3, #26
 8000f98:	f003 031f 	and.w	r3, r3, #31
 8000f9c:	e011      	b.n	8000fc2 <HAL_ADC_ConfigChannel+0x402>
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fa4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000fa6:	fa93 f3a3 	rbit	r3, r3
 8000faa:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8000fac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000fae:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8000fb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d101      	bne.n	8000fba <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8000fb6:	2320      	movs	r3, #32
 8000fb8:	e003      	b.n	8000fc2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8000fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000fbc:	fab3 f383 	clz	r3, r3
 8000fc0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d106      	bne.n	8000fd4 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2103      	movs	r1, #3
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff fb82 	bl	80006d8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff fc61 	bl	80008a0 <LL_ADC_IsEnabled>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	f040 813f 	bne.w	8001264 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6818      	ldr	r0, [r3, #0]
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	6819      	ldr	r1, [r3, #0]
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	68db      	ldr	r3, [r3, #12]
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	f7ff fbe2 	bl	80007bc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	4a8e      	ldr	r2, [pc, #568]	; (8001238 <HAL_ADC_ConfigChannel+0x678>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	f040 8130 	bne.w	8001264 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001010:	2b00      	cmp	r3, #0
 8001012:	d10b      	bne.n	800102c <HAL_ADC_ConfigChannel+0x46c>
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	0e9b      	lsrs	r3, r3, #26
 800101a:	3301      	adds	r3, #1
 800101c:	f003 031f 	and.w	r3, r3, #31
 8001020:	2b09      	cmp	r3, #9
 8001022:	bf94      	ite	ls
 8001024:	2301      	movls	r3, #1
 8001026:	2300      	movhi	r3, #0
 8001028:	b2db      	uxtb	r3, r3
 800102a:	e019      	b.n	8001060 <HAL_ADC_ConfigChannel+0x4a0>
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001032:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001034:	fa93 f3a3 	rbit	r3, r3
 8001038:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800103a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800103c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800103e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001040:	2b00      	cmp	r3, #0
 8001042:	d101      	bne.n	8001048 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001044:	2320      	movs	r3, #32
 8001046:	e003      	b.n	8001050 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001048:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800104a:	fab3 f383 	clz	r3, r3
 800104e:	b2db      	uxtb	r3, r3
 8001050:	3301      	adds	r3, #1
 8001052:	f003 031f 	and.w	r3, r3, #31
 8001056:	2b09      	cmp	r3, #9
 8001058:	bf94      	ite	ls
 800105a:	2301      	movls	r3, #1
 800105c:	2300      	movhi	r3, #0
 800105e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001060:	2b00      	cmp	r3, #0
 8001062:	d079      	beq.n	8001158 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800106c:	2b00      	cmp	r3, #0
 800106e:	d107      	bne.n	8001080 <HAL_ADC_ConfigChannel+0x4c0>
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	0e9b      	lsrs	r3, r3, #26
 8001076:	3301      	adds	r3, #1
 8001078:	069b      	lsls	r3, r3, #26
 800107a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800107e:	e015      	b.n	80010ac <HAL_ADC_ConfigChannel+0x4ec>
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001086:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001088:	fa93 f3a3 	rbit	r3, r3
 800108c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800108e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001090:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001094:	2b00      	cmp	r3, #0
 8001096:	d101      	bne.n	800109c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001098:	2320      	movs	r3, #32
 800109a:	e003      	b.n	80010a4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 800109c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800109e:	fab3 f383 	clz	r3, r3
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	3301      	adds	r3, #1
 80010a6:	069b      	lsls	r3, r3, #26
 80010a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d109      	bne.n	80010cc <HAL_ADC_ConfigChannel+0x50c>
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	0e9b      	lsrs	r3, r3, #26
 80010be:	3301      	adds	r3, #1
 80010c0:	f003 031f 	and.w	r3, r3, #31
 80010c4:	2101      	movs	r1, #1
 80010c6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ca:	e017      	b.n	80010fc <HAL_ADC_ConfigChannel+0x53c>
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010d4:	fa93 f3a3 	rbit	r3, r3
 80010d8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80010da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010dc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80010de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d101      	bne.n	80010e8 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80010e4:	2320      	movs	r3, #32
 80010e6:	e003      	b.n	80010f0 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80010e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010ea:	fab3 f383 	clz	r3, r3
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	3301      	adds	r3, #1
 80010f2:	f003 031f 	and.w	r3, r3, #31
 80010f6:	2101      	movs	r1, #1
 80010f8:	fa01 f303 	lsl.w	r3, r1, r3
 80010fc:	ea42 0103 	orr.w	r1, r2, r3
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001108:	2b00      	cmp	r3, #0
 800110a:	d10a      	bne.n	8001122 <HAL_ADC_ConfigChannel+0x562>
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	0e9b      	lsrs	r3, r3, #26
 8001112:	3301      	adds	r3, #1
 8001114:	f003 021f 	and.w	r2, r3, #31
 8001118:	4613      	mov	r3, r2
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	4413      	add	r3, r2
 800111e:	051b      	lsls	r3, r3, #20
 8001120:	e018      	b.n	8001154 <HAL_ADC_ConfigChannel+0x594>
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800112a:	fa93 f3a3 	rbit	r3, r3
 800112e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001132:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001136:	2b00      	cmp	r3, #0
 8001138:	d101      	bne.n	800113e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800113a:	2320      	movs	r3, #32
 800113c:	e003      	b.n	8001146 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800113e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001140:	fab3 f383 	clz	r3, r3
 8001144:	b2db      	uxtb	r3, r3
 8001146:	3301      	adds	r3, #1
 8001148:	f003 021f 	and.w	r2, r3, #31
 800114c:	4613      	mov	r3, r2
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	4413      	add	r3, r2
 8001152:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001154:	430b      	orrs	r3, r1
 8001156:	e080      	b.n	800125a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001160:	2b00      	cmp	r3, #0
 8001162:	d107      	bne.n	8001174 <HAL_ADC_ConfigChannel+0x5b4>
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	0e9b      	lsrs	r3, r3, #26
 800116a:	3301      	adds	r3, #1
 800116c:	069b      	lsls	r3, r3, #26
 800116e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001172:	e015      	b.n	80011a0 <HAL_ADC_ConfigChannel+0x5e0>
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800117a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800117c:	fa93 f3a3 	rbit	r3, r3
 8001180:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001184:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001188:	2b00      	cmp	r3, #0
 800118a:	d101      	bne.n	8001190 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 800118c:	2320      	movs	r3, #32
 800118e:	e003      	b.n	8001198 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001192:	fab3 f383 	clz	r3, r3
 8001196:	b2db      	uxtb	r3, r3
 8001198:	3301      	adds	r3, #1
 800119a:	069b      	lsls	r3, r3, #26
 800119c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d109      	bne.n	80011c0 <HAL_ADC_ConfigChannel+0x600>
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	0e9b      	lsrs	r3, r3, #26
 80011b2:	3301      	adds	r3, #1
 80011b4:	f003 031f 	and.w	r3, r3, #31
 80011b8:	2101      	movs	r1, #1
 80011ba:	fa01 f303 	lsl.w	r3, r1, r3
 80011be:	e017      	b.n	80011f0 <HAL_ADC_ConfigChannel+0x630>
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c6:	6a3b      	ldr	r3, [r7, #32]
 80011c8:	fa93 f3a3 	rbit	r3, r3
 80011cc:	61fb      	str	r3, [r7, #28]
  return result;
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80011d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d101      	bne.n	80011dc <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80011d8:	2320      	movs	r3, #32
 80011da:	e003      	b.n	80011e4 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80011dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011de:	fab3 f383 	clz	r3, r3
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	3301      	adds	r3, #1
 80011e6:	f003 031f 	and.w	r3, r3, #31
 80011ea:	2101      	movs	r1, #1
 80011ec:	fa01 f303 	lsl.w	r3, r1, r3
 80011f0:	ea42 0103 	orr.w	r1, r2, r3
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d10d      	bne.n	800121c <HAL_ADC_ConfigChannel+0x65c>
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	0e9b      	lsrs	r3, r3, #26
 8001206:	3301      	adds	r3, #1
 8001208:	f003 021f 	and.w	r2, r3, #31
 800120c:	4613      	mov	r3, r2
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	4413      	add	r3, r2
 8001212:	3b1e      	subs	r3, #30
 8001214:	051b      	lsls	r3, r3, #20
 8001216:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800121a:	e01d      	b.n	8001258 <HAL_ADC_ConfigChannel+0x698>
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	fa93 f3a3 	rbit	r3, r3
 8001228:	613b      	str	r3, [r7, #16]
  return result;
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d103      	bne.n	800123c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001234:	2320      	movs	r3, #32
 8001236:	e005      	b.n	8001244 <HAL_ADC_ConfigChannel+0x684>
 8001238:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	fab3 f383 	clz	r3, r3
 8001242:	b2db      	uxtb	r3, r3
 8001244:	3301      	adds	r3, #1
 8001246:	f003 021f 	and.w	r2, r3, #31
 800124a:	4613      	mov	r3, r2
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	4413      	add	r3, r2
 8001250:	3b1e      	subs	r3, #30
 8001252:	051b      	lsls	r3, r3, #20
 8001254:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001258:	430b      	orrs	r3, r1
 800125a:	683a      	ldr	r2, [r7, #0]
 800125c:	6892      	ldr	r2, [r2, #8]
 800125e:	4619      	mov	r1, r3
 8001260:	f7ff fa81 	bl	8000766 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4b44      	ldr	r3, [pc, #272]	; (800137c <HAL_ADC_ConfigChannel+0x7bc>)
 800126a:	4013      	ands	r3, r2
 800126c:	2b00      	cmp	r3, #0
 800126e:	d07a      	beq.n	8001366 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001270:	4843      	ldr	r0, [pc, #268]	; (8001380 <HAL_ADC_ConfigChannel+0x7c0>)
 8001272:	f7ff f9e9 	bl	8000648 <LL_ADC_GetCommonPathInternalCh>
 8001276:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a41      	ldr	r2, [pc, #260]	; (8001384 <HAL_ADC_ConfigChannel+0x7c4>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d12c      	bne.n	80012de <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001284:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001288:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d126      	bne.n	80012de <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a3c      	ldr	r2, [pc, #240]	; (8001388 <HAL_ADC_ConfigChannel+0x7c8>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d004      	beq.n	80012a4 <HAL_ADC_ConfigChannel+0x6e4>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a3b      	ldr	r2, [pc, #236]	; (800138c <HAL_ADC_ConfigChannel+0x7cc>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d15d      	bne.n	8001360 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80012a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80012a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80012ac:	4619      	mov	r1, r3
 80012ae:	4834      	ldr	r0, [pc, #208]	; (8001380 <HAL_ADC_ConfigChannel+0x7c0>)
 80012b0:	f7ff f9b7 	bl	8000622 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80012b4:	4b36      	ldr	r3, [pc, #216]	; (8001390 <HAL_ADC_ConfigChannel+0x7d0>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	099b      	lsrs	r3, r3, #6
 80012ba:	4a36      	ldr	r2, [pc, #216]	; (8001394 <HAL_ADC_ConfigChannel+0x7d4>)
 80012bc:	fba2 2303 	umull	r2, r3, r2, r3
 80012c0:	099b      	lsrs	r3, r3, #6
 80012c2:	1c5a      	adds	r2, r3, #1
 80012c4:	4613      	mov	r3, r2
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	4413      	add	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80012ce:	e002      	b.n	80012d6 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1f9      	bne.n	80012d0 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80012dc:	e040      	b.n	8001360 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a2d      	ldr	r2, [pc, #180]	; (8001398 <HAL_ADC_ConfigChannel+0x7d8>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d118      	bne.n	800131a <HAL_ADC_ConfigChannel+0x75a>
 80012e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80012ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d112      	bne.n	800131a <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a23      	ldr	r2, [pc, #140]	; (8001388 <HAL_ADC_ConfigChannel+0x7c8>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d004      	beq.n	8001308 <HAL_ADC_ConfigChannel+0x748>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a22      	ldr	r2, [pc, #136]	; (800138c <HAL_ADC_ConfigChannel+0x7cc>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d12d      	bne.n	8001364 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001308:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800130c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001310:	4619      	mov	r1, r3
 8001312:	481b      	ldr	r0, [pc, #108]	; (8001380 <HAL_ADC_ConfigChannel+0x7c0>)
 8001314:	f7ff f985 	bl	8000622 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001318:	e024      	b.n	8001364 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a1f      	ldr	r2, [pc, #124]	; (800139c <HAL_ADC_ConfigChannel+0x7dc>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d120      	bne.n	8001366 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001324:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001328:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d11a      	bne.n	8001366 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a14      	ldr	r2, [pc, #80]	; (8001388 <HAL_ADC_ConfigChannel+0x7c8>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d115      	bne.n	8001366 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800133a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800133e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001342:	4619      	mov	r1, r3
 8001344:	480e      	ldr	r0, [pc, #56]	; (8001380 <HAL_ADC_ConfigChannel+0x7c0>)
 8001346:	f7ff f96c 	bl	8000622 <LL_ADC_SetCommonPathInternalCh>
 800134a:	e00c      	b.n	8001366 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001350:	f043 0220 	orr.w	r2, r3, #32
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800135e:	e002      	b.n	8001366 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001360:	bf00      	nop
 8001362:	e000      	b.n	8001366 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001364:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800136e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001372:	4618      	mov	r0, r3
 8001374:	37d8      	adds	r7, #216	; 0xd8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	80080000 	.word	0x80080000
 8001380:	50040300 	.word	0x50040300
 8001384:	c7520000 	.word	0xc7520000
 8001388:	50040000 	.word	0x50040000
 800138c:	50040200 	.word	0x50040200
 8001390:	20000028 	.word	0x20000028
 8001394:	053e2d63 	.word	0x053e2d63
 8001398:	cb840000 	.word	0xcb840000
 800139c:	80000001 	.word	0x80000001

080013a0 <LL_ADC_IsEnabled>:
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d101      	bne.n	80013b8 <LL_ADC_IsEnabled+0x18>
 80013b4:	2301      	movs	r3, #1
 80013b6:	e000      	b.n	80013ba <LL_ADC_IsEnabled+0x1a>
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <LL_ADC_REG_IsConversionOngoing>:
{
 80013c6:	b480      	push	{r7}
 80013c8:	b083      	sub	sp, #12
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 0304 	and.w	r3, r3, #4
 80013d6:	2b04      	cmp	r3, #4
 80013d8:	d101      	bne.n	80013de <LL_ADC_REG_IsConversionOngoing+0x18>
 80013da:	2301      	movs	r3, #1
 80013dc:	e000      	b.n	80013e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80013de:	2300      	movs	r3, #0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80013ec:	b590      	push	{r4, r7, lr}
 80013ee:	b09f      	sub	sp, #124	; 0x7c
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013f6:	2300      	movs	r3, #0
 80013f8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001402:	2b01      	cmp	r3, #1
 8001404:	d101      	bne.n	800140a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001406:	2302      	movs	r3, #2
 8001408:	e093      	b.n	8001532 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2201      	movs	r2, #1
 800140e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001412:	2300      	movs	r3, #0
 8001414:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001416:	2300      	movs	r3, #0
 8001418:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a47      	ldr	r2, [pc, #284]	; (800153c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d102      	bne.n	800142a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001424:	4b46      	ldr	r3, [pc, #280]	; (8001540 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	e001      	b.n	800142e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800142a:	2300      	movs	r3, #0
 800142c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d10b      	bne.n	800144c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001438:	f043 0220 	orr.w	r2, r3, #32
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e072      	b.n	8001532 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff ffb9 	bl	80013c6 <LL_ADC_REG_IsConversionOngoing>
 8001454:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff ffb3 	bl	80013c6 <LL_ADC_REG_IsConversionOngoing>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d154      	bne.n	8001510 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001466:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001468:	2b00      	cmp	r3, #0
 800146a:	d151      	bne.n	8001510 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800146c:	4b35      	ldr	r3, [pc, #212]	; (8001544 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800146e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d02c      	beq.n	80014d2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	6859      	ldr	r1, [r3, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800148a:	035b      	lsls	r3, r3, #13
 800148c:	430b      	orrs	r3, r1
 800148e:	431a      	orrs	r2, r3
 8001490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001492:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001494:	4829      	ldr	r0, [pc, #164]	; (800153c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001496:	f7ff ff83 	bl	80013a0 <LL_ADC_IsEnabled>
 800149a:	4604      	mov	r4, r0
 800149c:	4828      	ldr	r0, [pc, #160]	; (8001540 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800149e:	f7ff ff7f 	bl	80013a0 <LL_ADC_IsEnabled>
 80014a2:	4603      	mov	r3, r0
 80014a4:	431c      	orrs	r4, r3
 80014a6:	4828      	ldr	r0, [pc, #160]	; (8001548 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80014a8:	f7ff ff7a 	bl	80013a0 <LL_ADC_IsEnabled>
 80014ac:	4603      	mov	r3, r0
 80014ae:	4323      	orrs	r3, r4
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d137      	bne.n	8001524 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80014b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80014bc:	f023 030f 	bic.w	r3, r3, #15
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	6811      	ldr	r1, [r2, #0]
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	6892      	ldr	r2, [r2, #8]
 80014c8:	430a      	orrs	r2, r1
 80014ca:	431a      	orrs	r2, r3
 80014cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014ce:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80014d0:	e028      	b.n	8001524 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80014d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014dc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80014de:	4817      	ldr	r0, [pc, #92]	; (800153c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80014e0:	f7ff ff5e 	bl	80013a0 <LL_ADC_IsEnabled>
 80014e4:	4604      	mov	r4, r0
 80014e6:	4816      	ldr	r0, [pc, #88]	; (8001540 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80014e8:	f7ff ff5a 	bl	80013a0 <LL_ADC_IsEnabled>
 80014ec:	4603      	mov	r3, r0
 80014ee:	431c      	orrs	r4, r3
 80014f0:	4815      	ldr	r0, [pc, #84]	; (8001548 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80014f2:	f7ff ff55 	bl	80013a0 <LL_ADC_IsEnabled>
 80014f6:	4603      	mov	r3, r0
 80014f8:	4323      	orrs	r3, r4
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d112      	bne.n	8001524 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80014fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001506:	f023 030f 	bic.w	r3, r3, #15
 800150a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800150c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800150e:	e009      	b.n	8001524 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001514:	f043 0220 	orr.w	r2, r3, #32
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001522:	e000      	b.n	8001526 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001524:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800152e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001532:	4618      	mov	r0, r3
 8001534:	377c      	adds	r7, #124	; 0x7c
 8001536:	46bd      	mov	sp, r7
 8001538:	bd90      	pop	{r4, r7, pc}
 800153a:	bf00      	nop
 800153c:	50040000 	.word	0x50040000
 8001540:	50040100 	.word	0x50040100
 8001544:	50040300 	.word	0x50040300
 8001548:	50040200 	.word	0x50040200

0800154c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d101      	bne.n	800155e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e0ed      	b.n	800173a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b00      	cmp	r3, #0
 8001568:	d102      	bne.n	8001570 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f00b f868 	bl	800c640 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f042 0201 	orr.w	r2, r2, #1
 800157e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001580:	f7ff f80c 	bl	800059c <HAL_GetTick>
 8001584:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001586:	e012      	b.n	80015ae <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001588:	f7ff f808 	bl	800059c <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b0a      	cmp	r3, #10
 8001594:	d90b      	bls.n	80015ae <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2205      	movs	r2, #5
 80015a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e0c5      	b.n	800173a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0e5      	beq.n	8001588 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f022 0202 	bic.w	r2, r2, #2
 80015ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015cc:	f7fe ffe6 	bl	800059c <HAL_GetTick>
 80015d0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015d2:	e012      	b.n	80015fa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015d4:	f7fe ffe2 	bl	800059c <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b0a      	cmp	r3, #10
 80015e0:	d90b      	bls.n	80015fa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2205      	movs	r2, #5
 80015f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e09f      	b.n	800173a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1e5      	bne.n	80015d4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	7e1b      	ldrb	r3, [r3, #24]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d108      	bne.n	8001622 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	e007      	b.n	8001632 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001630:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	7e5b      	ldrb	r3, [r3, #25]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d108      	bne.n	800164c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	e007      	b.n	800165c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800165a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	7e9b      	ldrb	r3, [r3, #26]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d108      	bne.n	8001676 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f042 0220 	orr.w	r2, r2, #32
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	e007      	b.n	8001686 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f022 0220 	bic.w	r2, r2, #32
 8001684:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	7edb      	ldrb	r3, [r3, #27]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d108      	bne.n	80016a0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f022 0210 	bic.w	r2, r2, #16
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	e007      	b.n	80016b0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f042 0210 	orr.w	r2, r2, #16
 80016ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	7f1b      	ldrb	r3, [r3, #28]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d108      	bne.n	80016ca <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f042 0208 	orr.w	r2, r2, #8
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	e007      	b.n	80016da <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 0208 	bic.w	r2, r2, #8
 80016d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	7f5b      	ldrb	r3, [r3, #29]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d108      	bne.n	80016f4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f042 0204 	orr.w	r2, r2, #4
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	e007      	b.n	8001704 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f022 0204 	bic.w	r2, r2, #4
 8001702:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	431a      	orrs	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	431a      	orrs	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	695b      	ldr	r3, [r3, #20]
 8001718:	ea42 0103 	orr.w	r1, r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	1e5a      	subs	r2, r3, #1
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	430a      	orrs	r2, r1
 8001728:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2201      	movs	r2, #1
 8001734:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
	...

08001744 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800174c:	4b05      	ldr	r3, [pc, #20]	; (8001764 <LL_EXTI_EnableIT_0_31+0x20>)
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	4904      	ldr	r1, [pc, #16]	; (8001764 <LL_EXTI_EnableIT_0_31+0x20>)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4313      	orrs	r3, r2
 8001756:	600b      	str	r3, [r1, #0]
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	40010400 	.word	0x40010400

08001768 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <LL_EXTI_DisableIT_0_31+0x24>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	43db      	mvns	r3, r3
 8001778:	4904      	ldr	r1, [pc, #16]	; (800178c <LL_EXTI_DisableIT_0_31+0x24>)
 800177a:	4013      	ands	r3, r2
 800177c:	600b      	str	r3, [r1, #0]
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	40010400 	.word	0x40010400

08001790 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8001798:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <LL_EXTI_EnableEvent_0_31+0x20>)
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	4904      	ldr	r1, [pc, #16]	; (80017b0 <LL_EXTI_EnableEvent_0_31+0x20>)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	604b      	str	r3, [r1, #4]

}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	40010400 	.word	0x40010400

080017b4 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <LL_EXTI_DisableEvent_0_31+0x24>)
 80017be:	685a      	ldr	r2, [r3, #4]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	43db      	mvns	r3, r3
 80017c4:	4904      	ldr	r1, [pc, #16]	; (80017d8 <LL_EXTI_DisableEvent_0_31+0x24>)
 80017c6:	4013      	ands	r3, r2
 80017c8:	604b      	str	r3, [r1, #4]
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	40010400 	.word	0x40010400

080017dc <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80017e4:	4b05      	ldr	r3, [pc, #20]	; (80017fc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	4904      	ldr	r1, [pc, #16]	; (80017fc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	608b      	str	r3, [r1, #8]

}
 80017f0:	bf00      	nop
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	40010400 	.word	0x40010400

08001800 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8001808:	4b06      	ldr	r3, [pc, #24]	; (8001824 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	43db      	mvns	r3, r3
 8001810:	4904      	ldr	r1, [pc, #16]	; (8001824 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001812:	4013      	ands	r3, r2
 8001814:	608b      	str	r3, [r1, #8]

}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	40010400 	.word	0x40010400

08001828 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8001830:	4b05      	ldr	r3, [pc, #20]	; (8001848 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001832:	68da      	ldr	r2, [r3, #12]
 8001834:	4904      	ldr	r1, [pc, #16]	; (8001848 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4313      	orrs	r3, r2
 800183a:	60cb      	str	r3, [r1, #12]
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	40010400 	.word	0x40010400

0800184c <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8001854:	4b06      	ldr	r3, [pc, #24]	; (8001870 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001856:	68da      	ldr	r2, [r3, #12]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	43db      	mvns	r3, r3
 800185c:	4904      	ldr	r1, [pc, #16]	; (8001870 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800185e:	4013      	ands	r3, r2
 8001860:	60cb      	str	r3, [r1, #12]
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	40010400 	.word	0x40010400

08001874 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 800187c:	4a04      	ldr	r2, [pc, #16]	; (8001890 <LL_EXTI_ClearFlag_0_31+0x1c>)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6153      	str	r3, [r2, #20]
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	40010400 	.word	0x40010400

08001894 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b088      	sub	sp, #32
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800189c:	2300      	movs	r3, #0
 800189e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80018a0:	2300      	movs	r3, #0
 80018a2:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d102      	bne.n	80018b0 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	77fb      	strb	r3, [r7, #31]
 80018ae:	e0d1      	b.n	8001a54 <HAL_COMP_Init+0x1c0>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80018ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80018be:	d102      	bne.n	80018c6 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	77fb      	strb	r3, [r7, #31]
 80018c4:	e0c6      	b.n	8001a54 <HAL_COMP_Init+0x1c0>
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d115      	bne.n	80018fe <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	629a      	str	r2, [r3, #40]	; 0x28
      /*       COMP clock enable must be implemented by user                  */
      /*       in "HAL_COMP_MspInit()".                                       */
      /*       Therefore, for compatibility anticipation, it is recommended   */
      /*       to implement __HAL_RCC_SYSCFG_CLK_ENABLE()                     */
      /*       in "HAL_COMP_MspInit()".                                       */
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e0:	4b5f      	ldr	r3, [pc, #380]	; (8001a60 <HAL_COMP_Init+0x1cc>)
 80018e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018e4:	4a5e      	ldr	r2, [pc, #376]	; (8001a60 <HAL_COMP_Init+0x1cc>)
 80018e6:	f043 0301 	orr.w	r3, r3, #1
 80018ea:	6613      	str	r3, [r2, #96]	; 0x60
 80018ec:	4b5c      	ldr	r3, [pc, #368]	; (8001a60 <HAL_COMP_Init+0x1cc>)
 80018ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	60bb      	str	r3, [r7, #8]
 80018f6:	68bb      	ldr	r3, [r7, #8]

      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
      /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f00a fee5 	bl	800c6c8 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001908:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.NonInvertingInput
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	68da      	ldr	r2, [r3, #12]
               | hcomp->Init.InvertingInput
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	69db      	ldr	r3, [r3, #28]
 8001918:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	695b      	ldr	r3, [r3, #20]
 800191e:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (  hcomp->Init.NonInvertingInput
 800192a:	4313      	orrs	r3, r2
 800192c:	617b      	str	r3, [r7, #20]
               COMP_CSR_BLANKING | COMP_CSR_BRGEN    | COMP_CSR_SCALEN  | COMP_CSR_INMESEL,
               tmp_csr
              );
#endif /* COMP_CSR_WINMODE */
#else
    MODIFY_REG(hcomp->Instance->CSR,
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	4b4b      	ldr	r3, [pc, #300]	; (8001a64 <HAL_COMP_Init+0x1d0>)
 8001936:	4013      	ands	r3, r2
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	6812      	ldr	r2, [r2, #0]
 800193c:	6979      	ldr	r1, [r7, #20]
 800193e:	430b      	orrs	r3, r1
 8001940:	6013      	str	r3, [r2, #0]
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800194a:	d106      	bne.n	800195a <HAL_COMP_Init+0xc6>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 800194c:	4b46      	ldr	r3, [pc, #280]	; (8001a68 <HAL_COMP_Init+0x1d4>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a45      	ldr	r2, [pc, #276]	; (8001a68 <HAL_COMP_Init+0x1d4>)
 8001952:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001956:	6013      	str	r3, [r2, #0]
 8001958:	e005      	b.n	8001966 <HAL_COMP_Init+0xd2>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 800195a:	4b43      	ldr	r3, [pc, #268]	; (8001a68 <HAL_COMP_Init+0x1d4>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a42      	ldr	r2, [pc, #264]	; (8001a68 <HAL_COMP_Init+0x1d4>)
 8001960:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001964:	6013      	str	r3, [r2, #0]
    }
#endif /* COMP2 */

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d016      	beq.n	80019a2 <HAL_COMP_Init+0x10e>
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d113      	bne.n	80019a2 <HAL_COMP_Init+0x10e>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800197a:	4b3c      	ldr	r3, [pc, #240]	; (8001a6c <HAL_COMP_Init+0x1d8>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	099b      	lsrs	r3, r3, #6
 8001980:	4a3b      	ldr	r2, [pc, #236]	; (8001a70 <HAL_COMP_Init+0x1dc>)
 8001982:	fba2 2303 	umull	r2, r3, r2, r3
 8001986:	099b      	lsrs	r3, r3, #6
 8001988:	1c5a      	adds	r2, r3, #1
 800198a:	4613      	mov	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4413      	add	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8001994:	e002      	b.n	800199c <HAL_COMP_Init+0x108>
      {
        wait_loop_index--;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	3b01      	subs	r3, #1
 800199a:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1f9      	bne.n	8001996 <HAL_COMP_Init+0x102>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a33      	ldr	r2, [pc, #204]	; (8001a74 <HAL_COMP_Init+0x1e0>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d102      	bne.n	80019b2 <HAL_COMP_Init+0x11e>
 80019ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80019b0:	e001      	b.n	80019b6 <HAL_COMP_Init+0x122>
 80019b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019b6:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a1b      	ldr	r3, [r3, #32]
 80019bc:	f003 0303 	and.w	r3, r3, #3
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d037      	beq.n	8001a34 <HAL_COMP_Init+0x1a0>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a1b      	ldr	r3, [r3, #32]
 80019c8:	f003 0310 	and.w	r3, r3, #16
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80019d0:	6938      	ldr	r0, [r7, #16]
 80019d2:	f7ff ff03 	bl	80017dc <LL_EXTI_EnableRisingTrig_0_31>
 80019d6:	e002      	b.n	80019de <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80019d8:	6938      	ldr	r0, [r7, #16]
 80019da:	f7ff ff11 	bl	8001800 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a1b      	ldr	r3, [r3, #32]
 80019e2:	f003 0320 	and.w	r3, r3, #32
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <HAL_COMP_Init+0x15e>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80019ea:	6938      	ldr	r0, [r7, #16]
 80019ec:	f7ff ff1c 	bl	8001828 <LL_EXTI_EnableFallingTrig_0_31>
 80019f0:	e002      	b.n	80019f8 <HAL_COMP_Init+0x164>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80019f2:	6938      	ldr	r0, [r7, #16]
 80019f4:	f7ff ff2a 	bl	800184c <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 80019f8:	6938      	ldr	r0, [r7, #16]
 80019fa:	f7ff ff3b 	bl	8001874 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8001a0a:	6938      	ldr	r0, [r7, #16]
 8001a0c:	f7ff fec0 	bl	8001790 <LL_EXTI_EnableEvent_0_31>
 8001a10:	e002      	b.n	8001a18 <HAL_COMP_Init+0x184>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8001a12:	6938      	ldr	r0, [r7, #16]
 8001a14:	f7ff fece 	bl	80017b4 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d003      	beq.n	8001a2c <HAL_COMP_Init+0x198>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8001a24:	6938      	ldr	r0, [r7, #16]
 8001a26:	f7ff fe8d 	bl	8001744 <LL_EXTI_EnableIT_0_31>
 8001a2a:	e009      	b.n	8001a40 <HAL_COMP_Init+0x1ac>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8001a2c:	6938      	ldr	r0, [r7, #16]
 8001a2e:	f7ff fe9b 	bl	8001768 <LL_EXTI_DisableIT_0_31>
 8001a32:	e005      	b.n	8001a40 <HAL_COMP_Init+0x1ac>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8001a34:	6938      	ldr	r0, [r7, #16]
 8001a36:	f7ff febd 	bl	80017b4 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8001a3a:	6938      	ldr	r0, [r7, #16]
 8001a3c:	f7ff fe94 	bl	8001768 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d103      	bne.n	8001a54 <HAL_COMP_Init+0x1c0>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8001a54:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3720      	adds	r7, #32
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40021000 	.word	0x40021000
 8001a64:	ff207d03 	.word	0xff207d03
 8001a68:	40010204 	.word	0x40010204
 8001a6c:	20000028 	.word	0x20000028
 8001a70:	053e2d63 	.word	0x053e2d63
 8001a74:	40010200 	.word	0x40010200

08001a78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f003 0307 	and.w	r3, r3, #7
 8001a86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a88:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <__NVIC_SetPriorityGrouping+0x44>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a8e:	68ba      	ldr	r2, [r7, #8]
 8001a90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a94:	4013      	ands	r3, r2
 8001a96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aaa:	4a04      	ldr	r2, [pc, #16]	; (8001abc <__NVIC_SetPriorityGrouping+0x44>)
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	60d3      	str	r3, [r2, #12]
}
 8001ab0:	bf00      	nop
 8001ab2:	3714      	adds	r7, #20
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ac4:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	0a1b      	lsrs	r3, r3, #8
 8001aca:	f003 0307 	and.w	r3, r3, #7
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	e000ed00 	.word	0xe000ed00

08001adc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	db0b      	blt.n	8001b06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	f003 021f 	and.w	r2, r3, #31
 8001af4:	4907      	ldr	r1, [pc, #28]	; (8001b14 <__NVIC_EnableIRQ+0x38>)
 8001af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afa:	095b      	lsrs	r3, r3, #5
 8001afc:	2001      	movs	r0, #1
 8001afe:	fa00 f202 	lsl.w	r2, r0, r2
 8001b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	e000e100 	.word	0xe000e100

08001b18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	6039      	str	r1, [r7, #0]
 8001b22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	db0a      	blt.n	8001b42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	b2da      	uxtb	r2, r3
 8001b30:	490c      	ldr	r1, [pc, #48]	; (8001b64 <__NVIC_SetPriority+0x4c>)
 8001b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b36:	0112      	lsls	r2, r2, #4
 8001b38:	b2d2      	uxtb	r2, r2
 8001b3a:	440b      	add	r3, r1
 8001b3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b40:	e00a      	b.n	8001b58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	4908      	ldr	r1, [pc, #32]	; (8001b68 <__NVIC_SetPriority+0x50>)
 8001b48:	79fb      	ldrb	r3, [r7, #7]
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	3b04      	subs	r3, #4
 8001b50:	0112      	lsls	r2, r2, #4
 8001b52:	b2d2      	uxtb	r2, r2
 8001b54:	440b      	add	r3, r1
 8001b56:	761a      	strb	r2, [r3, #24]
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	e000e100 	.word	0xe000e100
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b089      	sub	sp, #36	; 0x24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	f1c3 0307 	rsb	r3, r3, #7
 8001b86:	2b04      	cmp	r3, #4
 8001b88:	bf28      	it	cs
 8001b8a:	2304      	movcs	r3, #4
 8001b8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	3304      	adds	r3, #4
 8001b92:	2b06      	cmp	r3, #6
 8001b94:	d902      	bls.n	8001b9c <NVIC_EncodePriority+0x30>
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	3b03      	subs	r3, #3
 8001b9a:	e000      	b.n	8001b9e <NVIC_EncodePriority+0x32>
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43da      	mvns	r2, r3
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	401a      	ands	r2, r3
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbe:	43d9      	mvns	r1, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc4:	4313      	orrs	r3, r2
         );
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3724      	adds	r7, #36	; 0x24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
	...

08001bd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3b01      	subs	r3, #1
 8001be0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001be4:	d301      	bcc.n	8001bea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001be6:	2301      	movs	r3, #1
 8001be8:	e00f      	b.n	8001c0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bea:	4a0a      	ldr	r2, [pc, #40]	; (8001c14 <SysTick_Config+0x40>)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bf2:	210f      	movs	r1, #15
 8001bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf8:	f7ff ff8e 	bl	8001b18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bfc:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <SysTick_Config+0x40>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c02:	4b04      	ldr	r3, [pc, #16]	; (8001c14 <SysTick_Config+0x40>)
 8001c04:	2207      	movs	r2, #7
 8001c06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	e000e010 	.word	0xe000e010

08001c18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f7ff ff29 	bl	8001a78 <__NVIC_SetPriorityGrouping>
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b086      	sub	sp, #24
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	4603      	mov	r3, r0
 8001c36:	60b9      	str	r1, [r7, #8]
 8001c38:	607a      	str	r2, [r7, #4]
 8001c3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c40:	f7ff ff3e 	bl	8001ac0 <__NVIC_GetPriorityGrouping>
 8001c44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	68b9      	ldr	r1, [r7, #8]
 8001c4a:	6978      	ldr	r0, [r7, #20]
 8001c4c:	f7ff ff8e 	bl	8001b6c <NVIC_EncodePriority>
 8001c50:	4602      	mov	r2, r0
 8001c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c56:	4611      	mov	r1, r2
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff ff5d 	bl	8001b18 <__NVIC_SetPriority>
}
 8001c5e:	bf00      	nop
 8001c60:	3718      	adds	r7, #24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff ff31 	bl	8001adc <__NVIC_EnableIRQ>
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f7ff ffa2 	bl	8001bd4 <SysTick_Config>
 8001c90:	4603      	mov	r3, r0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b082      	sub	sp, #8
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d101      	bne.n	8001cac <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e014      	b.n	8001cd6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	791b      	ldrb	r3, [r3, #4]
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d105      	bne.n	8001cc2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f00a fd47 	bl	800c750 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b088      	sub	sp, #32
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	60f8      	str	r0, [r7, #12]
 8001ce6:	60b9      	str	r1, [r7, #8]
 8001ce8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	795b      	ldrb	r3, [r3, #5]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d101      	bne.n	8001cfa <HAL_DAC_ConfigChannel+0x1c>
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	e107      	b.n	8001f0a <HAL_DAC_ConfigChannel+0x22c>
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2202      	movs	r2, #2
 8001d04:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	d174      	bne.n	8001df8 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001d0e:	f7fe fc45 	bl	800059c <HAL_GetTick>
 8001d12:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d134      	bne.n	8001d84 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001d1a:	e011      	b.n	8001d40 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001d1c:	f7fe fc3e 	bl	800059c <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d90a      	bls.n	8001d40 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	f043 0208 	orr.w	r2, r3, #8
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2203      	movs	r2, #3
 8001d3a:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e0e4      	b.n	8001f0a <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1e6      	bne.n	8001d1c <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8001d4e:	2001      	movs	r0, #1
 8001d50:	f7fe fc30 	bl	80005b4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68ba      	ldr	r2, [r7, #8]
 8001d5a:	6992      	ldr	r2, [r2, #24]
 8001d5c:	641a      	str	r2, [r3, #64]	; 0x40
 8001d5e:	e01e      	b.n	8001d9e <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001d60:	f7fe fc1c 	bl	800059c <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d90a      	bls.n	8001d84 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	f043 0208 	orr.w	r2, r3, #8
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2203      	movs	r2, #3
 8001d7e:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e0c2      	b.n	8001f0a <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	dbe8      	blt.n	8001d60 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8001d8e:	2001      	movs	r0, #1
 8001d90:	f7fe fc10 	bl	80005b4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68ba      	ldr	r2, [r7, #8]
 8001d9a:	6992      	ldr	r2, [r2, #24]
 8001d9c:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f003 0310 	and.w	r3, r3, #16
 8001daa:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001dae:	fa01 f303 	lsl.w	r3, r1, r3
 8001db2:	43db      	mvns	r3, r3
 8001db4:	ea02 0103 	and.w	r1, r2, r3
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	69da      	ldr	r2, [r3, #28]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f003 0310 	and.w	r3, r3, #16
 8001dc2:	409a      	lsls	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f003 0310 	and.w	r3, r3, #16
 8001dd8:	21ff      	movs	r1, #255	; 0xff
 8001dda:	fa01 f303 	lsl.w	r3, r1, r3
 8001dde:	43db      	mvns	r3, r3
 8001de0:	ea02 0103 	and.w	r1, r2, r3
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	6a1a      	ldr	r2, [r3, #32]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f003 0310 	and.w	r3, r3, #16
 8001dee:	409a      	lsls	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	430a      	orrs	r2, r1
 8001df6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d11d      	bne.n	8001e3c <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e06:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f003 0310 	and.w	r3, r3, #16
 8001e0e:	221f      	movs	r2, #31
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f003 0310 	and.w	r3, r3, #16
 8001e28:	697a      	ldr	r2, [r7, #20]
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e42:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f003 0310 	and.w	r3, r3, #16
 8001e4a:	2207      	movs	r2, #7
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	43db      	mvns	r3, r3
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4013      	ands	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	431a      	orrs	r2, r3
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f003 0310 	and.w	r3, r3, #16
 8001e70:	697a      	ldr	r2, [r7, #20]
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6819      	ldr	r1, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f003 0310 	and.w	r3, r3, #16
 8001e90:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	43da      	mvns	r2, r3
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	400a      	ands	r2, r1
 8001ea0:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f003 0310 	and.w	r3, r3, #16
 8001eb0:	f640 72fc 	movw	r2, #4092	; 0xffc
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f003 0310 	and.w	r3, r3, #16
 8001ecc:	697a      	ldr	r2, [r7, #20]
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6819      	ldr	r1, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f003 0310 	and.w	r3, r3, #16
 8001eec:	22c0      	movs	r2, #192	; 0xc0
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	43da      	mvns	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	400a      	ands	r2, r1
 8001efa:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2201      	movs	r2, #1
 8001f00:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2200      	movs	r2, #0
 8001f06:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3720      	adds	r7, #32
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
	...

08001f14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b087      	sub	sp, #28
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f22:	e17f      	b.n	8002224 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	2101      	movs	r1, #1
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f30:	4013      	ands	r3, r2
 8001f32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f000 8171 	beq.w	800221e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f003 0303 	and.w	r3, r3, #3
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d005      	beq.n	8001f54 <HAL_GPIO_Init+0x40>
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f003 0303 	and.w	r3, r3, #3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d130      	bne.n	8001fb6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	2203      	movs	r2, #3
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	68da      	ldr	r2, [r3, #12]
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43db      	mvns	r3, r3
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	4013      	ands	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	091b      	lsrs	r3, r3, #4
 8001fa0:	f003 0201 	and.w	r2, r3, #1
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f003 0303 	and.w	r3, r3, #3
 8001fbe:	2b03      	cmp	r3, #3
 8001fc0:	d118      	bne.n	8001ff4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001fc8:	2201      	movs	r2, #1
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	08db      	lsrs	r3, r3, #3
 8001fde:	f003 0201 	and.w	r2, r3, #1
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f003 0303 	and.w	r3, r3, #3
 8001ffc:	2b03      	cmp	r3, #3
 8001ffe:	d017      	beq.n	8002030 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	2203      	movs	r2, #3
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	43db      	mvns	r3, r3
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	4013      	ands	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	4313      	orrs	r3, r2
 8002028:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 0303 	and.w	r3, r3, #3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d123      	bne.n	8002084 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	08da      	lsrs	r2, r3, #3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3208      	adds	r2, #8
 8002044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002048:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	220f      	movs	r2, #15
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	43db      	mvns	r3, r3
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	4013      	ands	r3, r2
 800205e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	691a      	ldr	r2, [r3, #16]
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	4313      	orrs	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	08da      	lsrs	r2, r3, #3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3208      	adds	r2, #8
 800207e:	6939      	ldr	r1, [r7, #16]
 8002080:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	2203      	movs	r2, #3
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	43db      	mvns	r3, r3
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	4013      	ands	r3, r2
 800209a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f003 0203 	and.w	r2, r3, #3
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f000 80ac 	beq.w	800221e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c6:	4b5f      	ldr	r3, [pc, #380]	; (8002244 <HAL_GPIO_Init+0x330>)
 80020c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ca:	4a5e      	ldr	r2, [pc, #376]	; (8002244 <HAL_GPIO_Init+0x330>)
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	6613      	str	r3, [r2, #96]	; 0x60
 80020d2:	4b5c      	ldr	r3, [pc, #368]	; (8002244 <HAL_GPIO_Init+0x330>)
 80020d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	60bb      	str	r3, [r7, #8]
 80020dc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80020de:	4a5a      	ldr	r2, [pc, #360]	; (8002248 <HAL_GPIO_Init+0x334>)
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	089b      	lsrs	r3, r3, #2
 80020e4:	3302      	adds	r3, #2
 80020e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	220f      	movs	r2, #15
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	43db      	mvns	r3, r3
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	4013      	ands	r3, r2
 8002100:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002108:	d025      	beq.n	8002156 <HAL_GPIO_Init+0x242>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a4f      	ldr	r2, [pc, #316]	; (800224c <HAL_GPIO_Init+0x338>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d01f      	beq.n	8002152 <HAL_GPIO_Init+0x23e>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a4e      	ldr	r2, [pc, #312]	; (8002250 <HAL_GPIO_Init+0x33c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d019      	beq.n	800214e <HAL_GPIO_Init+0x23a>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a4d      	ldr	r2, [pc, #308]	; (8002254 <HAL_GPIO_Init+0x340>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d013      	beq.n	800214a <HAL_GPIO_Init+0x236>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a4c      	ldr	r2, [pc, #304]	; (8002258 <HAL_GPIO_Init+0x344>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d00d      	beq.n	8002146 <HAL_GPIO_Init+0x232>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a4b      	ldr	r2, [pc, #300]	; (800225c <HAL_GPIO_Init+0x348>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d007      	beq.n	8002142 <HAL_GPIO_Init+0x22e>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a4a      	ldr	r2, [pc, #296]	; (8002260 <HAL_GPIO_Init+0x34c>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d101      	bne.n	800213e <HAL_GPIO_Init+0x22a>
 800213a:	2306      	movs	r3, #6
 800213c:	e00c      	b.n	8002158 <HAL_GPIO_Init+0x244>
 800213e:	2307      	movs	r3, #7
 8002140:	e00a      	b.n	8002158 <HAL_GPIO_Init+0x244>
 8002142:	2305      	movs	r3, #5
 8002144:	e008      	b.n	8002158 <HAL_GPIO_Init+0x244>
 8002146:	2304      	movs	r3, #4
 8002148:	e006      	b.n	8002158 <HAL_GPIO_Init+0x244>
 800214a:	2303      	movs	r3, #3
 800214c:	e004      	b.n	8002158 <HAL_GPIO_Init+0x244>
 800214e:	2302      	movs	r3, #2
 8002150:	e002      	b.n	8002158 <HAL_GPIO_Init+0x244>
 8002152:	2301      	movs	r3, #1
 8002154:	e000      	b.n	8002158 <HAL_GPIO_Init+0x244>
 8002156:	2300      	movs	r3, #0
 8002158:	697a      	ldr	r2, [r7, #20]
 800215a:	f002 0203 	and.w	r2, r2, #3
 800215e:	0092      	lsls	r2, r2, #2
 8002160:	4093      	lsls	r3, r2
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	4313      	orrs	r3, r2
 8002166:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002168:	4937      	ldr	r1, [pc, #220]	; (8002248 <HAL_GPIO_Init+0x334>)
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	089b      	lsrs	r3, r3, #2
 800216e:	3302      	adds	r3, #2
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002176:	4b3b      	ldr	r3, [pc, #236]	; (8002264 <HAL_GPIO_Init+0x350>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	43db      	mvns	r3, r3
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	4013      	ands	r3, r2
 8002184:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4313      	orrs	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800219a:	4a32      	ldr	r2, [pc, #200]	; (8002264 <HAL_GPIO_Init+0x350>)
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021a0:	4b30      	ldr	r3, [pc, #192]	; (8002264 <HAL_GPIO_Init+0x350>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	43db      	mvns	r3, r3
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	4013      	ands	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d003      	beq.n	80021c4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021c4:	4a27      	ldr	r2, [pc, #156]	; (8002264 <HAL_GPIO_Init+0x350>)
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80021ca:	4b26      	ldr	r3, [pc, #152]	; (8002264 <HAL_GPIO_Init+0x350>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	43db      	mvns	r3, r3
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	4013      	ands	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021ee:	4a1d      	ldr	r2, [pc, #116]	; (8002264 <HAL_GPIO_Init+0x350>)
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80021f4:	4b1b      	ldr	r3, [pc, #108]	; (8002264 <HAL_GPIO_Init+0x350>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	43db      	mvns	r3, r3
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	4013      	ands	r3, r2
 8002202:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d003      	beq.n	8002218 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	4313      	orrs	r3, r2
 8002216:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002218:	4a12      	ldr	r2, [pc, #72]	; (8002264 <HAL_GPIO_Init+0x350>)
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	3301      	adds	r3, #1
 8002222:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	fa22 f303 	lsr.w	r3, r2, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	f47f ae78 	bne.w	8001f24 <HAL_GPIO_Init+0x10>
  }
}
 8002234:	bf00      	nop
 8002236:	bf00      	nop
 8002238:	371c      	adds	r7, #28
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	40021000 	.word	0x40021000
 8002248:	40010000 	.word	0x40010000
 800224c:	48000400 	.word	0x48000400
 8002250:	48000800 	.word	0x48000800
 8002254:	48000c00 	.word	0x48000c00
 8002258:	48001000 	.word	0x48001000
 800225c:	48001400 	.word	0x48001400
 8002260:	48001800 	.word	0x48001800
 8002264:	40010400 	.word	0x40010400

08002268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	460b      	mov	r3, r1
 8002272:	807b      	strh	r3, [r7, #2]
 8002274:	4613      	mov	r3, r2
 8002276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002278:	787b      	ldrb	r3, [r7, #1]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800227e:	887a      	ldrh	r2, [r7, #2]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002284:	e002      	b.n	800228c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002286:	887a      	ldrh	r2, [r7, #2]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800229a:	b08f      	sub	sp, #60	; 0x3c
 800229c:	af0a      	add	r7, sp, #40	; 0x28
 800229e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e054      	b.n	8002354 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d106      	bne.n	80022ca <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f00a fef7 	bl	800d0b8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2203      	movs	r2, #3
 80022ce:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d102      	bne.n	80022e4 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f006 fe22 	bl	8008f32 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	603b      	str	r3, [r7, #0]
 80022f4:	687e      	ldr	r6, [r7, #4]
 80022f6:	466d      	mov	r5, sp
 80022f8:	f106 0410 	add.w	r4, r6, #16
 80022fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002300:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002302:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002304:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002308:	e885 0003 	stmia.w	r5, {r0, r1}
 800230c:	1d33      	adds	r3, r6, #4
 800230e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002310:	6838      	ldr	r0, [r7, #0]
 8002312:	f006 fdd1 	bl	8008eb8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2101      	movs	r1, #1
 800231c:	4618      	mov	r0, r3
 800231e:	f006 fe19 	bl	8008f54 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	603b      	str	r3, [r7, #0]
 8002328:	687e      	ldr	r6, [r7, #4]
 800232a:	466d      	mov	r5, sp
 800232c:	f106 0410 	add.w	r4, r6, #16
 8002330:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002332:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002334:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002336:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002338:	e894 0003 	ldmia.w	r4, {r0, r1}
 800233c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002340:	1d33      	adds	r3, r6, #4
 8002342:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002344:	6838      	ldr	r0, [r7, #0]
 8002346:	f006 ff9d 	bl	8009284 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800235c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800235c:	b590      	push	{r4, r7, lr}
 800235e:	b089      	sub	sp, #36	; 0x24
 8002360:	af04      	add	r7, sp, #16
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	4608      	mov	r0, r1
 8002366:	4611      	mov	r1, r2
 8002368:	461a      	mov	r2, r3
 800236a:	4603      	mov	r3, r0
 800236c:	70fb      	strb	r3, [r7, #3]
 800236e:	460b      	mov	r3, r1
 8002370:	70bb      	strb	r3, [r7, #2]
 8002372:	4613      	mov	r3, r2
 8002374:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800237c:	2b01      	cmp	r3, #1
 800237e:	d101      	bne.n	8002384 <HAL_HCD_HC_Init+0x28>
 8002380:	2302      	movs	r3, #2
 8002382:	e076      	b.n	8002472 <HAL_HCD_HC_Init+0x116>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800238c:	78fb      	ldrb	r3, [r7, #3]
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	212c      	movs	r1, #44	; 0x2c
 8002392:	fb01 f303 	mul.w	r3, r1, r3
 8002396:	4413      	add	r3, r2
 8002398:	333d      	adds	r3, #61	; 0x3d
 800239a:	2200      	movs	r2, #0
 800239c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800239e:	78fb      	ldrb	r3, [r7, #3]
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	212c      	movs	r1, #44	; 0x2c
 80023a4:	fb01 f303 	mul.w	r3, r1, r3
 80023a8:	4413      	add	r3, r2
 80023aa:	3338      	adds	r3, #56	; 0x38
 80023ac:	787a      	ldrb	r2, [r7, #1]
 80023ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80023b0:	78fb      	ldrb	r3, [r7, #3]
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	212c      	movs	r1, #44	; 0x2c
 80023b6:	fb01 f303 	mul.w	r3, r1, r3
 80023ba:	4413      	add	r3, r2
 80023bc:	3340      	adds	r3, #64	; 0x40
 80023be:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80023c0:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80023c2:	78fb      	ldrb	r3, [r7, #3]
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	212c      	movs	r1, #44	; 0x2c
 80023c8:	fb01 f303 	mul.w	r3, r1, r3
 80023cc:	4413      	add	r3, r2
 80023ce:	3339      	adds	r3, #57	; 0x39
 80023d0:	78fa      	ldrb	r2, [r7, #3]
 80023d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80023d4:	78fb      	ldrb	r3, [r7, #3]
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	212c      	movs	r1, #44	; 0x2c
 80023da:	fb01 f303 	mul.w	r3, r1, r3
 80023de:	4413      	add	r3, r2
 80023e0:	333f      	adds	r3, #63	; 0x3f
 80023e2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80023e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80023e8:	78fb      	ldrb	r3, [r7, #3]
 80023ea:	78ba      	ldrb	r2, [r7, #2]
 80023ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80023f0:	b2d0      	uxtb	r0, r2
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	212c      	movs	r1, #44	; 0x2c
 80023f6:	fb01 f303 	mul.w	r3, r1, r3
 80023fa:	4413      	add	r3, r2
 80023fc:	333a      	adds	r3, #58	; 0x3a
 80023fe:	4602      	mov	r2, r0
 8002400:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002402:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002406:	2b00      	cmp	r3, #0
 8002408:	da09      	bge.n	800241e <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800240a:	78fb      	ldrb	r3, [r7, #3]
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	212c      	movs	r1, #44	; 0x2c
 8002410:	fb01 f303 	mul.w	r3, r1, r3
 8002414:	4413      	add	r3, r2
 8002416:	333b      	adds	r3, #59	; 0x3b
 8002418:	2201      	movs	r2, #1
 800241a:	701a      	strb	r2, [r3, #0]
 800241c:	e008      	b.n	8002430 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800241e:	78fb      	ldrb	r3, [r7, #3]
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	212c      	movs	r1, #44	; 0x2c
 8002424:	fb01 f303 	mul.w	r3, r1, r3
 8002428:	4413      	add	r3, r2
 800242a:	333b      	adds	r3, #59	; 0x3b
 800242c:	2200      	movs	r2, #0
 800242e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002430:	78fb      	ldrb	r3, [r7, #3]
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	212c      	movs	r1, #44	; 0x2c
 8002436:	fb01 f303 	mul.w	r3, r1, r3
 800243a:	4413      	add	r3, r2
 800243c:	333c      	adds	r3, #60	; 0x3c
 800243e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002442:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6818      	ldr	r0, [r3, #0]
 8002448:	787c      	ldrb	r4, [r7, #1]
 800244a:	78ba      	ldrb	r2, [r7, #2]
 800244c:	78f9      	ldrb	r1, [r7, #3]
 800244e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002450:	9302      	str	r3, [sp, #8]
 8002452:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002456:	9301      	str	r3, [sp, #4]
 8002458:	f897 3020 	ldrb.w	r3, [r7, #32]
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	4623      	mov	r3, r4
 8002460:	f007 f858 	bl	8009514 <USB_HC_Init>
 8002464:	4603      	mov	r3, r0
 8002466:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002470:	7bfb      	ldrb	r3, [r7, #15]
}
 8002472:	4618      	mov	r0, r3
 8002474:	3714      	adds	r7, #20
 8002476:	46bd      	mov	sp, r7
 8002478:	bd90      	pop	{r4, r7, pc}

0800247a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b084      	sub	sp, #16
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
 8002482:	460b      	mov	r3, r1
 8002484:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002486:	2300      	movs	r3, #0
 8002488:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002490:	2b01      	cmp	r3, #1
 8002492:	d101      	bne.n	8002498 <HAL_HCD_HC_Halt+0x1e>
 8002494:	2302      	movs	r3, #2
 8002496:	e00f      	b.n	80024b8 <HAL_HCD_HC_Halt+0x3e>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	78fa      	ldrb	r2, [r7, #3]
 80024a6:	4611      	mov	r1, r2
 80024a8:	4618      	mov	r0, r3
 80024aa:	f007 fa48 	bl	800993e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80024b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	4608      	mov	r0, r1
 80024ca:	4611      	mov	r1, r2
 80024cc:	461a      	mov	r2, r3
 80024ce:	4603      	mov	r3, r0
 80024d0:	70fb      	strb	r3, [r7, #3]
 80024d2:	460b      	mov	r3, r1
 80024d4:	70bb      	strb	r3, [r7, #2]
 80024d6:	4613      	mov	r3, r2
 80024d8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80024da:	78fb      	ldrb	r3, [r7, #3]
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	212c      	movs	r1, #44	; 0x2c
 80024e0:	fb01 f303 	mul.w	r3, r1, r3
 80024e4:	4413      	add	r3, r2
 80024e6:	333b      	adds	r3, #59	; 0x3b
 80024e8:	78ba      	ldrb	r2, [r7, #2]
 80024ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80024ec:	78fb      	ldrb	r3, [r7, #3]
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	212c      	movs	r1, #44	; 0x2c
 80024f2:	fb01 f303 	mul.w	r3, r1, r3
 80024f6:	4413      	add	r3, r2
 80024f8:	333f      	adds	r3, #63	; 0x3f
 80024fa:	787a      	ldrb	r2, [r7, #1]
 80024fc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80024fe:	7c3b      	ldrb	r3, [r7, #16]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d112      	bne.n	800252a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002504:	78fb      	ldrb	r3, [r7, #3]
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	212c      	movs	r1, #44	; 0x2c
 800250a:	fb01 f303 	mul.w	r3, r1, r3
 800250e:	4413      	add	r3, r2
 8002510:	3342      	adds	r3, #66	; 0x42
 8002512:	2203      	movs	r2, #3
 8002514:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002516:	78fb      	ldrb	r3, [r7, #3]
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	212c      	movs	r1, #44	; 0x2c
 800251c:	fb01 f303 	mul.w	r3, r1, r3
 8002520:	4413      	add	r3, r2
 8002522:	333d      	adds	r3, #61	; 0x3d
 8002524:	7f3a      	ldrb	r2, [r7, #28]
 8002526:	701a      	strb	r2, [r3, #0]
 8002528:	e008      	b.n	800253c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800252a:	78fb      	ldrb	r3, [r7, #3]
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	212c      	movs	r1, #44	; 0x2c
 8002530:	fb01 f303 	mul.w	r3, r1, r3
 8002534:	4413      	add	r3, r2
 8002536:	3342      	adds	r3, #66	; 0x42
 8002538:	2202      	movs	r2, #2
 800253a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800253c:	787b      	ldrb	r3, [r7, #1]
 800253e:	2b03      	cmp	r3, #3
 8002540:	f200 80c6 	bhi.w	80026d0 <HAL_HCD_HC_SubmitRequest+0x210>
 8002544:	a201      	add	r2, pc, #4	; (adr r2, 800254c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800254a:	bf00      	nop
 800254c:	0800255d 	.word	0x0800255d
 8002550:	080026bd 	.word	0x080026bd
 8002554:	080025c1 	.word	0x080025c1
 8002558:	0800263f 	.word	0x0800263f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800255c:	7c3b      	ldrb	r3, [r7, #16]
 800255e:	2b01      	cmp	r3, #1
 8002560:	f040 80b8 	bne.w	80026d4 <HAL_HCD_HC_SubmitRequest+0x214>
 8002564:	78bb      	ldrb	r3, [r7, #2]
 8002566:	2b00      	cmp	r3, #0
 8002568:	f040 80b4 	bne.w	80026d4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800256c:	8b3b      	ldrh	r3, [r7, #24]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d108      	bne.n	8002584 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002572:	78fb      	ldrb	r3, [r7, #3]
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	212c      	movs	r1, #44	; 0x2c
 8002578:	fb01 f303 	mul.w	r3, r1, r3
 800257c:	4413      	add	r3, r2
 800257e:	3355      	adds	r3, #85	; 0x55
 8002580:	2201      	movs	r2, #1
 8002582:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002584:	78fb      	ldrb	r3, [r7, #3]
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	212c      	movs	r1, #44	; 0x2c
 800258a:	fb01 f303 	mul.w	r3, r1, r3
 800258e:	4413      	add	r3, r2
 8002590:	3355      	adds	r3, #85	; 0x55
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d109      	bne.n	80025ac <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002598:	78fb      	ldrb	r3, [r7, #3]
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	212c      	movs	r1, #44	; 0x2c
 800259e:	fb01 f303 	mul.w	r3, r1, r3
 80025a2:	4413      	add	r3, r2
 80025a4:	3342      	adds	r3, #66	; 0x42
 80025a6:	2200      	movs	r2, #0
 80025a8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80025aa:	e093      	b.n	80026d4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025ac:	78fb      	ldrb	r3, [r7, #3]
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	212c      	movs	r1, #44	; 0x2c
 80025b2:	fb01 f303 	mul.w	r3, r1, r3
 80025b6:	4413      	add	r3, r2
 80025b8:	3342      	adds	r3, #66	; 0x42
 80025ba:	2202      	movs	r2, #2
 80025bc:	701a      	strb	r2, [r3, #0]
      break;
 80025be:	e089      	b.n	80026d4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80025c0:	78bb      	ldrb	r3, [r7, #2]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d11d      	bne.n	8002602 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80025c6:	78fb      	ldrb	r3, [r7, #3]
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	212c      	movs	r1, #44	; 0x2c
 80025cc:	fb01 f303 	mul.w	r3, r1, r3
 80025d0:	4413      	add	r3, r2
 80025d2:	3355      	adds	r3, #85	; 0x55
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d109      	bne.n	80025ee <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025da:	78fb      	ldrb	r3, [r7, #3]
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	212c      	movs	r1, #44	; 0x2c
 80025e0:	fb01 f303 	mul.w	r3, r1, r3
 80025e4:	4413      	add	r3, r2
 80025e6:	3342      	adds	r3, #66	; 0x42
 80025e8:	2200      	movs	r2, #0
 80025ea:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80025ec:	e073      	b.n	80026d6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025ee:	78fb      	ldrb	r3, [r7, #3]
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	212c      	movs	r1, #44	; 0x2c
 80025f4:	fb01 f303 	mul.w	r3, r1, r3
 80025f8:	4413      	add	r3, r2
 80025fa:	3342      	adds	r3, #66	; 0x42
 80025fc:	2202      	movs	r2, #2
 80025fe:	701a      	strb	r2, [r3, #0]
      break;
 8002600:	e069      	b.n	80026d6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002602:	78fb      	ldrb	r3, [r7, #3]
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	212c      	movs	r1, #44	; 0x2c
 8002608:	fb01 f303 	mul.w	r3, r1, r3
 800260c:	4413      	add	r3, r2
 800260e:	3354      	adds	r3, #84	; 0x54
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d109      	bne.n	800262a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002616:	78fb      	ldrb	r3, [r7, #3]
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	212c      	movs	r1, #44	; 0x2c
 800261c:	fb01 f303 	mul.w	r3, r1, r3
 8002620:	4413      	add	r3, r2
 8002622:	3342      	adds	r3, #66	; 0x42
 8002624:	2200      	movs	r2, #0
 8002626:	701a      	strb	r2, [r3, #0]
      break;
 8002628:	e055      	b.n	80026d6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800262a:	78fb      	ldrb	r3, [r7, #3]
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	212c      	movs	r1, #44	; 0x2c
 8002630:	fb01 f303 	mul.w	r3, r1, r3
 8002634:	4413      	add	r3, r2
 8002636:	3342      	adds	r3, #66	; 0x42
 8002638:	2202      	movs	r2, #2
 800263a:	701a      	strb	r2, [r3, #0]
      break;
 800263c:	e04b      	b.n	80026d6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800263e:	78bb      	ldrb	r3, [r7, #2]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d11d      	bne.n	8002680 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002644:	78fb      	ldrb	r3, [r7, #3]
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	212c      	movs	r1, #44	; 0x2c
 800264a:	fb01 f303 	mul.w	r3, r1, r3
 800264e:	4413      	add	r3, r2
 8002650:	3355      	adds	r3, #85	; 0x55
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d109      	bne.n	800266c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002658:	78fb      	ldrb	r3, [r7, #3]
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	212c      	movs	r1, #44	; 0x2c
 800265e:	fb01 f303 	mul.w	r3, r1, r3
 8002662:	4413      	add	r3, r2
 8002664:	3342      	adds	r3, #66	; 0x42
 8002666:	2200      	movs	r2, #0
 8002668:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800266a:	e034      	b.n	80026d6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800266c:	78fb      	ldrb	r3, [r7, #3]
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	212c      	movs	r1, #44	; 0x2c
 8002672:	fb01 f303 	mul.w	r3, r1, r3
 8002676:	4413      	add	r3, r2
 8002678:	3342      	adds	r3, #66	; 0x42
 800267a:	2202      	movs	r2, #2
 800267c:	701a      	strb	r2, [r3, #0]
      break;
 800267e:	e02a      	b.n	80026d6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002680:	78fb      	ldrb	r3, [r7, #3]
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	212c      	movs	r1, #44	; 0x2c
 8002686:	fb01 f303 	mul.w	r3, r1, r3
 800268a:	4413      	add	r3, r2
 800268c:	3354      	adds	r3, #84	; 0x54
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d109      	bne.n	80026a8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002694:	78fb      	ldrb	r3, [r7, #3]
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	212c      	movs	r1, #44	; 0x2c
 800269a:	fb01 f303 	mul.w	r3, r1, r3
 800269e:	4413      	add	r3, r2
 80026a0:	3342      	adds	r3, #66	; 0x42
 80026a2:	2200      	movs	r2, #0
 80026a4:	701a      	strb	r2, [r3, #0]
      break;
 80026a6:	e016      	b.n	80026d6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026a8:	78fb      	ldrb	r3, [r7, #3]
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	212c      	movs	r1, #44	; 0x2c
 80026ae:	fb01 f303 	mul.w	r3, r1, r3
 80026b2:	4413      	add	r3, r2
 80026b4:	3342      	adds	r3, #66	; 0x42
 80026b6:	2202      	movs	r2, #2
 80026b8:	701a      	strb	r2, [r3, #0]
      break;
 80026ba:	e00c      	b.n	80026d6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026bc:	78fb      	ldrb	r3, [r7, #3]
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	212c      	movs	r1, #44	; 0x2c
 80026c2:	fb01 f303 	mul.w	r3, r1, r3
 80026c6:	4413      	add	r3, r2
 80026c8:	3342      	adds	r3, #66	; 0x42
 80026ca:	2200      	movs	r2, #0
 80026cc:	701a      	strb	r2, [r3, #0]
      break;
 80026ce:	e002      	b.n	80026d6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80026d0:	bf00      	nop
 80026d2:	e000      	b.n	80026d6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80026d4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80026d6:	78fb      	ldrb	r3, [r7, #3]
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	212c      	movs	r1, #44	; 0x2c
 80026dc:	fb01 f303 	mul.w	r3, r1, r3
 80026e0:	4413      	add	r3, r2
 80026e2:	3344      	adds	r3, #68	; 0x44
 80026e4:	697a      	ldr	r2, [r7, #20]
 80026e6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80026e8:	78fb      	ldrb	r3, [r7, #3]
 80026ea:	8b3a      	ldrh	r2, [r7, #24]
 80026ec:	6879      	ldr	r1, [r7, #4]
 80026ee:	202c      	movs	r0, #44	; 0x2c
 80026f0:	fb00 f303 	mul.w	r3, r0, r3
 80026f4:	440b      	add	r3, r1
 80026f6:	334c      	adds	r3, #76	; 0x4c
 80026f8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80026fa:	78fb      	ldrb	r3, [r7, #3]
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	212c      	movs	r1, #44	; 0x2c
 8002700:	fb01 f303 	mul.w	r3, r1, r3
 8002704:	4413      	add	r3, r2
 8002706:	3360      	adds	r3, #96	; 0x60
 8002708:	2200      	movs	r2, #0
 800270a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800270c:	78fb      	ldrb	r3, [r7, #3]
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	212c      	movs	r1, #44	; 0x2c
 8002712:	fb01 f303 	mul.w	r3, r1, r3
 8002716:	4413      	add	r3, r2
 8002718:	3350      	adds	r3, #80	; 0x50
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800271e:	78fb      	ldrb	r3, [r7, #3]
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	212c      	movs	r1, #44	; 0x2c
 8002724:	fb01 f303 	mul.w	r3, r1, r3
 8002728:	4413      	add	r3, r2
 800272a:	3339      	adds	r3, #57	; 0x39
 800272c:	78fa      	ldrb	r2, [r7, #3]
 800272e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002730:	78fb      	ldrb	r3, [r7, #3]
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	212c      	movs	r1, #44	; 0x2c
 8002736:	fb01 f303 	mul.w	r3, r1, r3
 800273a:	4413      	add	r3, r2
 800273c:	3361      	adds	r3, #97	; 0x61
 800273e:	2200      	movs	r2, #0
 8002740:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6818      	ldr	r0, [r3, #0]
 8002746:	78fb      	ldrb	r3, [r7, #3]
 8002748:	222c      	movs	r2, #44	; 0x2c
 800274a:	fb02 f303 	mul.w	r3, r2, r3
 800274e:	3338      	adds	r3, #56	; 0x38
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	4413      	add	r3, r2
 8002754:	4619      	mov	r1, r3
 8002756:	f006 ffe9 	bl	800972c <USB_HC_StartXfer>
 800275a:	4603      	mov	r3, r0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3708      	adds	r7, #8
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f006 fd3f 	bl	80091fe <USB_GetMode>
 8002780:	4603      	mov	r3, r0
 8002782:	2b01      	cmp	r3, #1
 8002784:	f040 80f6 	bne.w	8002974 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4618      	mov	r0, r3
 800278e:	f006 fd23 	bl	80091d8 <USB_ReadInterrupts>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	f000 80ec 	beq.w	8002972 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f006 fd1a 	bl	80091d8 <USB_ReadInterrupts>
 80027a4:	4603      	mov	r3, r0
 80027a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027ae:	d104      	bne.n	80027ba <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80027b8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f006 fd0a 	bl	80091d8 <USB_ReadInterrupts>
 80027c4:	4603      	mov	r3, r0
 80027c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027ce:	d104      	bne.n	80027da <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80027d8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f006 fcfa 	bl	80091d8 <USB_ReadInterrupts>
 80027e4:	4603      	mov	r3, r0
 80027e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027ee:	d104      	bne.n	80027fa <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80027f8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f006 fcea 	bl	80091d8 <USB_ReadInterrupts>
 8002804:	4603      	mov	r3, r0
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b02      	cmp	r3, #2
 800280c:	d103      	bne.n	8002816 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2202      	movs	r2, #2
 8002814:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f006 fcdc 	bl	80091d8 <USB_ReadInterrupts>
 8002820:	4603      	mov	r3, r0
 8002822:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002826:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800282a:	d11c      	bne.n	8002866 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002834:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10f      	bne.n	8002866 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002846:	2110      	movs	r1, #16
 8002848:	6938      	ldr	r0, [r7, #16]
 800284a:	f006 fbcf 	bl	8008fec <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800284e:	6938      	ldr	r0, [r7, #16]
 8002850:	f006 fc00 	bl	8009054 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2101      	movs	r1, #1
 800285a:	4618      	mov	r0, r3
 800285c:	f006 fd94 	bl	8009388 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f00a fcd9 	bl	800d218 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f006 fcb4 	bl	80091d8 <USB_ReadInterrupts>
 8002870:	4603      	mov	r3, r0
 8002872:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002876:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800287a:	d102      	bne.n	8002882 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f001 f815 	bl	80038ac <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4618      	mov	r0, r3
 8002888:	f006 fca6 	bl	80091d8 <USB_ReadInterrupts>
 800288c:	4603      	mov	r3, r0
 800288e:	f003 0308 	and.w	r3, r3, #8
 8002892:	2b08      	cmp	r3, #8
 8002894:	d106      	bne.n	80028a4 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f00a fca2 	bl	800d1e0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2208      	movs	r2, #8
 80028a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f006 fc95 	bl	80091d8 <USB_ReadInterrupts>
 80028ae:	4603      	mov	r3, r0
 80028b0:	f003 0310 	and.w	r3, r3, #16
 80028b4:	2b10      	cmp	r3, #16
 80028b6:	d101      	bne.n	80028bc <HAL_HCD_IRQHandler+0x158>
 80028b8:	2301      	movs	r3, #1
 80028ba:	e000      	b.n	80028be <HAL_HCD_IRQHandler+0x15a>
 80028bc:	2300      	movs	r3, #0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d012      	beq.n	80028e8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	699a      	ldr	r2, [r3, #24]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f022 0210 	bic.w	r2, r2, #16
 80028d0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 ff18 	bl	8003708 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	699a      	ldr	r2, [r3, #24]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f042 0210 	orr.w	r2, r2, #16
 80028e6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f006 fc73 	bl	80091d8 <USB_ReadInterrupts>
 80028f2:	4603      	mov	r3, r0
 80028f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028fc:	d13a      	bne.n	8002974 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f007 f80a 	bl	800991c <USB_HC_ReadInterrupt>
 8002908:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800290a:	2300      	movs	r3, #0
 800290c:	617b      	str	r3, [r7, #20]
 800290e:	e025      	b.n	800295c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	f003 030f 	and.w	r3, r3, #15
 8002916:	68ba      	ldr	r2, [r7, #8]
 8002918:	fa22 f303 	lsr.w	r3, r2, r3
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	2b00      	cmp	r3, #0
 8002922:	d018      	beq.n	8002956 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	015a      	lsls	r2, r3, #5
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	4413      	add	r3, r2
 800292c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002936:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800293a:	d106      	bne.n	800294a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	b2db      	uxtb	r3, r3
 8002940:	4619      	mov	r1, r3
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 f8ab 	bl	8002a9e <HCD_HC_IN_IRQHandler>
 8002948:	e005      	b.n	8002956 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	b2db      	uxtb	r3, r3
 800294e:	4619      	mov	r1, r3
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 fbd7 	bl	8003104 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	3301      	adds	r3, #1
 800295a:	617b      	str	r3, [r7, #20]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	429a      	cmp	r2, r3
 8002964:	d3d4      	bcc.n	8002910 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800296e:	615a      	str	r2, [r3, #20]
 8002970:	e000      	b.n	8002974 <HAL_HCD_IRQHandler+0x210>
      return;
 8002972:	bf00      	nop
    }
  }
}
 8002974:	3718      	adds	r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b082      	sub	sp, #8
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002988:	2b01      	cmp	r3, #1
 800298a:	d101      	bne.n	8002990 <HAL_HCD_Start+0x16>
 800298c:	2302      	movs	r3, #2
 800298e:	e013      	b.n	80029b8 <HAL_HCD_Start+0x3e>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2101      	movs	r1, #1
 800299e:	4618      	mov	r0, r3
 80029a0:	f006 fd56 	bl	8009450 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f006 fab1 	bl	8008f10 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d101      	bne.n	80029d6 <HAL_HCD_Stop+0x16>
 80029d2:	2302      	movs	r3, #2
 80029d4:	e00d      	b.n	80029f2 <HAL_HCD_Stop+0x32>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f007 f8a7 	bl	8009b36 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f006 fcf8 	bl	80093fc <USB_ResetPort>
 8002a0c:	4603      	mov	r3, r0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b083      	sub	sp, #12
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
 8002a1e:	460b      	mov	r3, r1
 8002a20:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002a22:	78fb      	ldrb	r3, [r7, #3]
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	212c      	movs	r1, #44	; 0x2c
 8002a28:	fb01 f303 	mul.w	r3, r1, r3
 8002a2c:	4413      	add	r3, r2
 8002a2e:	3360      	adds	r3, #96	; 0x60
 8002a30:	781b      	ldrb	r3, [r3, #0]
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b083      	sub	sp, #12
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
 8002a46:	460b      	mov	r3, r1
 8002a48:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002a4a:	78fb      	ldrb	r3, [r7, #3]
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	212c      	movs	r1, #44	; 0x2c
 8002a50:	fb01 f303 	mul.w	r3, r1, r3
 8002a54:	4413      	add	r3, r2
 8002a56:	3350      	adds	r3, #80	; 0x50
 8002a58:	681b      	ldr	r3, [r3, #0]
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b082      	sub	sp, #8
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f006 fd3c 	bl	80094f0 <USB_GetCurrentFrame>
 8002a78:	4603      	mov	r3, r0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b082      	sub	sp, #8
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f006 fd17 	bl	80094c2 <USB_GetHostSpeed>
 8002a94:	4603      	mov	r3, r0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b086      	sub	sp, #24
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002ab4:	78fb      	ldrb	r3, [r7, #3]
 8002ab6:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	015a      	lsls	r2, r3, #5
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	4413      	add	r3, r2
 8002ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 0304 	and.w	r3, r3, #4
 8002aca:	2b04      	cmp	r3, #4
 8002acc:	d11a      	bne.n	8002b04 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	015a      	lsls	r2, r3, #5
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ada:	461a      	mov	r2, r3
 8002adc:	2304      	movs	r3, #4
 8002ade:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	212c      	movs	r1, #44	; 0x2c
 8002ae6:	fb01 f303 	mul.w	r3, r1, r3
 8002aea:	4413      	add	r3, r2
 8002aec:	3361      	adds	r3, #97	; 0x61
 8002aee:	2206      	movs	r2, #6
 8002af0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	b2d2      	uxtb	r2, r2
 8002afa:	4611      	mov	r1, r2
 8002afc:	4618      	mov	r0, r3
 8002afe:	f006 ff1e 	bl	800993e <USB_HC_Halt>
 8002b02:	e0af      	b.n	8002c64 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	015a      	lsls	r2, r3, #5
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b1a:	d11b      	bne.n	8002b54 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	015a      	lsls	r2, r3, #5
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	4413      	add	r3, r2
 8002b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b28:	461a      	mov	r2, r3
 8002b2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b2e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	212c      	movs	r1, #44	; 0x2c
 8002b36:	fb01 f303 	mul.w	r3, r1, r3
 8002b3a:	4413      	add	r3, r2
 8002b3c:	3361      	adds	r3, #97	; 0x61
 8002b3e:	2207      	movs	r2, #7
 8002b40:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	b2d2      	uxtb	r2, r2
 8002b4a:	4611      	mov	r1, r2
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f006 fef6 	bl	800993e <USB_HC_Halt>
 8002b52:	e087      	b.n	8002c64 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	015a      	lsls	r2, r3, #5
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 0320 	and.w	r3, r3, #32
 8002b66:	2b20      	cmp	r3, #32
 8002b68:	d109      	bne.n	8002b7e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	015a      	lsls	r2, r3, #5
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	4413      	add	r3, r2
 8002b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b76:	461a      	mov	r2, r3
 8002b78:	2320      	movs	r3, #32
 8002b7a:	6093      	str	r3, [r2, #8]
 8002b7c:	e072      	b.n	8002c64 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	015a      	lsls	r2, r3, #5
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	4413      	add	r3, r2
 8002b86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 0308 	and.w	r3, r3, #8
 8002b90:	2b08      	cmp	r3, #8
 8002b92:	d11a      	bne.n	8002bca <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	015a      	lsls	r2, r3, #5
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	2308      	movs	r3, #8
 8002ba4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	212c      	movs	r1, #44	; 0x2c
 8002bac:	fb01 f303 	mul.w	r3, r1, r3
 8002bb0:	4413      	add	r3, r2
 8002bb2:	3361      	adds	r3, #97	; 0x61
 8002bb4:	2205      	movs	r2, #5
 8002bb6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	4611      	mov	r1, r2
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f006 febb 	bl	800993e <USB_HC_Halt>
 8002bc8:	e04c      	b.n	8002c64 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	015a      	lsls	r2, r3, #5
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002be0:	d11b      	bne.n	8002c1a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	015a      	lsls	r2, r3, #5
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	4413      	add	r3, r2
 8002bea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bee:	461a      	mov	r2, r3
 8002bf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bf4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	212c      	movs	r1, #44	; 0x2c
 8002bfc:	fb01 f303 	mul.w	r3, r1, r3
 8002c00:	4413      	add	r3, r2
 8002c02:	3361      	adds	r3, #97	; 0x61
 8002c04:	2208      	movs	r2, #8
 8002c06:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	4611      	mov	r1, r2
 8002c12:	4618      	mov	r0, r3
 8002c14:	f006 fe93 	bl	800993e <USB_HC_Halt>
 8002c18:	e024      	b.n	8002c64 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	015a      	lsls	r2, r3, #5
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	4413      	add	r3, r2
 8002c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c2c:	2b80      	cmp	r3, #128	; 0x80
 8002c2e:	d119      	bne.n	8002c64 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	015a      	lsls	r2, r3, #5
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	4413      	add	r3, r2
 8002c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	2380      	movs	r3, #128	; 0x80
 8002c40:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	212c      	movs	r1, #44	; 0x2c
 8002c48:	fb01 f303 	mul.w	r3, r1, r3
 8002c4c:	4413      	add	r3, r2
 8002c4e:	3361      	adds	r3, #97	; 0x61
 8002c50:	2206      	movs	r2, #6
 8002c52:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	b2d2      	uxtb	r2, r2
 8002c5c:	4611      	mov	r1, r2
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f006 fe6d 	bl	800993e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	015a      	lsls	r2, r3, #5
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c7a:	d112      	bne.n	8002ca2 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	4611      	mov	r1, r2
 8002c86:	4618      	mov	r0, r3
 8002c88:	f006 fe59 	bl	800993e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	015a      	lsls	r2, r3, #5
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	4413      	add	r3, r2
 8002c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c98:	461a      	mov	r2, r3
 8002c9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c9e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002ca0:	e22c      	b.n	80030fc <HCD_HC_IN_IRQHandler+0x65e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	015a      	lsls	r2, r3, #5
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	4413      	add	r3, r2
 8002caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	f040 80c1 	bne.w	8002e3c <HCD_HC_IN_IRQHandler+0x39e>
    hhcd->hc[ch_num].state = HC_XFRC;
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	212c      	movs	r1, #44	; 0x2c
 8002cc0:	fb01 f303 	mul.w	r3, r1, r3
 8002cc4:	4413      	add	r3, r2
 8002cc6:	3361      	adds	r3, #97	; 0x61
 8002cc8:	2201      	movs	r2, #1
 8002cca:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	212c      	movs	r1, #44	; 0x2c
 8002cd2:	fb01 f303 	mul.w	r3, r1, r3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	335c      	adds	r3, #92	; 0x5c
 8002cda:	2200      	movs	r2, #0
 8002cdc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	015a      	lsls	r2, r3, #5
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cea:	461a      	mov	r2, r3
 8002cec:	2301      	movs	r3, #1
 8002cee:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	212c      	movs	r1, #44	; 0x2c
 8002cf6:	fb01 f303 	mul.w	r3, r1, r3
 8002cfa:	4413      	add	r3, r2
 8002cfc:	333f      	adds	r3, #63	; 0x3f
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d009      	beq.n	8002d18 <HCD_HC_IN_IRQHandler+0x27a>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	212c      	movs	r1, #44	; 0x2c
 8002d0a:	fb01 f303 	mul.w	r3, r1, r3
 8002d0e:	4413      	add	r3, r2
 8002d10:	333f      	adds	r3, #63	; 0x3f
 8002d12:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d111      	bne.n	8002d3c <HCD_HC_IN_IRQHandler+0x29e>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	b2d2      	uxtb	r2, r2
 8002d20:	4611      	mov	r1, r2
 8002d22:	4618      	mov	r0, r3
 8002d24:	f006 fe0b 	bl	800993e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	015a      	lsls	r2, r3, #5
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	4413      	add	r3, r2
 8002d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d34:	461a      	mov	r2, r3
 8002d36:	2310      	movs	r3, #16
 8002d38:	6093      	str	r3, [r2, #8]
 8002d3a:	e03a      	b.n	8002db2 <HCD_HC_IN_IRQHandler+0x314>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	212c      	movs	r1, #44	; 0x2c
 8002d42:	fb01 f303 	mul.w	r3, r1, r3
 8002d46:	4413      	add	r3, r2
 8002d48:	333f      	adds	r3, #63	; 0x3f
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	2b03      	cmp	r3, #3
 8002d4e:	d009      	beq.n	8002d64 <HCD_HC_IN_IRQHandler+0x2c6>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	212c      	movs	r1, #44	; 0x2c
 8002d56:	fb01 f303 	mul.w	r3, r1, r3
 8002d5a:	4413      	add	r3, r2
 8002d5c:	333f      	adds	r3, #63	; 0x3f
 8002d5e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d126      	bne.n	8002db2 <HCD_HC_IN_IRQHandler+0x314>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	015a      	lsls	r2, r3, #5
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	0151      	lsls	r1, r2, #5
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	440a      	add	r2, r1
 8002d7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d82:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	212c      	movs	r1, #44	; 0x2c
 8002d8a:	fb01 f303 	mul.w	r3, r1, r3
 8002d8e:	4413      	add	r3, r2
 8002d90:	3360      	adds	r3, #96	; 0x60
 8002d92:	2201      	movs	r2, #1
 8002d94:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	b2d9      	uxtb	r1, r3
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	202c      	movs	r0, #44	; 0x2c
 8002da0:	fb00 f303 	mul.w	r3, r0, r3
 8002da4:	4413      	add	r3, r2
 8002da6:	3360      	adds	r3, #96	; 0x60
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	461a      	mov	r2, r3
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f00a fa41 	bl	800d234 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d12b      	bne.n	8002e12 <HCD_HC_IN_IRQHandler+0x374>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	212c      	movs	r1, #44	; 0x2c
 8002dc0:	fb01 f303 	mul.w	r3, r1, r3
 8002dc4:	4413      	add	r3, r2
 8002dc6:	3348      	adds	r3, #72	; 0x48
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	202c      	movs	r0, #44	; 0x2c
 8002dd0:	fb00 f202 	mul.w	r2, r0, r2
 8002dd4:	440a      	add	r2, r1
 8002dd6:	3240      	adds	r2, #64	; 0x40
 8002dd8:	8812      	ldrh	r2, [r2, #0]
 8002dda:	fbb3 f3f2 	udiv	r3, r3, r2
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f000 818a 	beq.w	80030fc <HCD_HC_IN_IRQHandler+0x65e>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	212c      	movs	r1, #44	; 0x2c
 8002dee:	fb01 f303 	mul.w	r3, r1, r3
 8002df2:	4413      	add	r3, r2
 8002df4:	3354      	adds	r3, #84	; 0x54
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	f083 0301 	eor.w	r3, r3, #1
 8002dfc:	b2d8      	uxtb	r0, r3
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	212c      	movs	r1, #44	; 0x2c
 8002e04:	fb01 f303 	mul.w	r3, r1, r3
 8002e08:	4413      	add	r3, r2
 8002e0a:	3354      	adds	r3, #84	; 0x54
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	701a      	strb	r2, [r3, #0]
}
 8002e10:	e174      	b.n	80030fc <HCD_HC_IN_IRQHandler+0x65e>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	212c      	movs	r1, #44	; 0x2c
 8002e18:	fb01 f303 	mul.w	r3, r1, r3
 8002e1c:	4413      	add	r3, r2
 8002e1e:	3354      	adds	r3, #84	; 0x54
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	f083 0301 	eor.w	r3, r3, #1
 8002e26:	b2d8      	uxtb	r0, r3
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	212c      	movs	r1, #44	; 0x2c
 8002e2e:	fb01 f303 	mul.w	r3, r1, r3
 8002e32:	4413      	add	r3, r2
 8002e34:	3354      	adds	r3, #84	; 0x54
 8002e36:	4602      	mov	r2, r0
 8002e38:	701a      	strb	r2, [r3, #0]
}
 8002e3a:	e15f      	b.n	80030fc <HCD_HC_IN_IRQHandler+0x65e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	015a      	lsls	r2, r3, #5
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	4413      	add	r3, r2
 8002e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	f040 80f6 	bne.w	8003040 <HCD_HC_IN_IRQHandler+0x5a2>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	212c      	movs	r1, #44	; 0x2c
 8002e5a:	fb01 f303 	mul.w	r3, r1, r3
 8002e5e:	4413      	add	r3, r2
 8002e60:	3361      	adds	r3, #97	; 0x61
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d109      	bne.n	8002e7c <HCD_HC_IN_IRQHandler+0x3de>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	212c      	movs	r1, #44	; 0x2c
 8002e6e:	fb01 f303 	mul.w	r3, r1, r3
 8002e72:	4413      	add	r3, r2
 8002e74:	3360      	adds	r3, #96	; 0x60
 8002e76:	2201      	movs	r2, #1
 8002e78:	701a      	strb	r2, [r3, #0]
 8002e7a:	e0c9      	b.n	8003010 <HCD_HC_IN_IRQHandler+0x572>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	212c      	movs	r1, #44	; 0x2c
 8002e82:	fb01 f303 	mul.w	r3, r1, r3
 8002e86:	4413      	add	r3, r2
 8002e88:	3361      	adds	r3, #97	; 0x61
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	2b05      	cmp	r3, #5
 8002e8e:	d109      	bne.n	8002ea4 <HCD_HC_IN_IRQHandler+0x406>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	212c      	movs	r1, #44	; 0x2c
 8002e96:	fb01 f303 	mul.w	r3, r1, r3
 8002e9a:	4413      	add	r3, r2
 8002e9c:	3360      	adds	r3, #96	; 0x60
 8002e9e:	2205      	movs	r2, #5
 8002ea0:	701a      	strb	r2, [r3, #0]
 8002ea2:	e0b5      	b.n	8003010 <HCD_HC_IN_IRQHandler+0x572>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	212c      	movs	r1, #44	; 0x2c
 8002eaa:	fb01 f303 	mul.w	r3, r1, r3
 8002eae:	4413      	add	r3, r2
 8002eb0:	3361      	adds	r3, #97	; 0x61
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2b06      	cmp	r3, #6
 8002eb6:	d009      	beq.n	8002ecc <HCD_HC_IN_IRQHandler+0x42e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	212c      	movs	r1, #44	; 0x2c
 8002ebe:	fb01 f303 	mul.w	r3, r1, r3
 8002ec2:	4413      	add	r3, r2
 8002ec4:	3361      	adds	r3, #97	; 0x61
 8002ec6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ec8:	2b08      	cmp	r3, #8
 8002eca:	d150      	bne.n	8002f6e <HCD_HC_IN_IRQHandler+0x4d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	212c      	movs	r1, #44	; 0x2c
 8002ed2:	fb01 f303 	mul.w	r3, r1, r3
 8002ed6:	4413      	add	r3, r2
 8002ed8:	335c      	adds	r3, #92	; 0x5c
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	1c5a      	adds	r2, r3, #1
 8002ede:	6879      	ldr	r1, [r7, #4]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	202c      	movs	r0, #44	; 0x2c
 8002ee4:	fb00 f303 	mul.w	r3, r0, r3
 8002ee8:	440b      	add	r3, r1
 8002eea:	335c      	adds	r3, #92	; 0x5c
 8002eec:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	212c      	movs	r1, #44	; 0x2c
 8002ef4:	fb01 f303 	mul.w	r3, r1, r3
 8002ef8:	4413      	add	r3, r2
 8002efa:	335c      	adds	r3, #92	; 0x5c
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d912      	bls.n	8002f28 <HCD_HC_IN_IRQHandler+0x48a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	212c      	movs	r1, #44	; 0x2c
 8002f08:	fb01 f303 	mul.w	r3, r1, r3
 8002f0c:	4413      	add	r3, r2
 8002f0e:	335c      	adds	r3, #92	; 0x5c
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	212c      	movs	r1, #44	; 0x2c
 8002f1a:	fb01 f303 	mul.w	r3, r1, r3
 8002f1e:	4413      	add	r3, r2
 8002f20:	3360      	adds	r3, #96	; 0x60
 8002f22:	2204      	movs	r2, #4
 8002f24:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f26:	e073      	b.n	8003010 <HCD_HC_IN_IRQHandler+0x572>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	212c      	movs	r1, #44	; 0x2c
 8002f2e:	fb01 f303 	mul.w	r3, r1, r3
 8002f32:	4413      	add	r3, r2
 8002f34:	3360      	adds	r3, #96	; 0x60
 8002f36:	2202      	movs	r2, #2
 8002f38:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	015a      	lsls	r2, r3, #5
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	4413      	add	r3, r2
 8002f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f50:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f58:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	015a      	lsls	r2, r3, #5
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	4413      	add	r3, r2
 8002f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f66:	461a      	mov	r2, r3
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f6c:	e050      	b.n	8003010 <HCD_HC_IN_IRQHandler+0x572>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	212c      	movs	r1, #44	; 0x2c
 8002f74:	fb01 f303 	mul.w	r3, r1, r3
 8002f78:	4413      	add	r3, r2
 8002f7a:	3361      	adds	r3, #97	; 0x61
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	2b03      	cmp	r3, #3
 8002f80:	d122      	bne.n	8002fc8 <HCD_HC_IN_IRQHandler+0x52a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	212c      	movs	r1, #44	; 0x2c
 8002f88:	fb01 f303 	mul.w	r3, r1, r3
 8002f8c:	4413      	add	r3, r2
 8002f8e:	3360      	adds	r3, #96	; 0x60
 8002f90:	2202      	movs	r2, #2
 8002f92:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	015a      	lsls	r2, r3, #5
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002faa:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002fb2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	015a      	lsls	r2, r3, #5
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	4413      	add	r3, r2
 8002fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	6013      	str	r3, [r2, #0]
 8002fc6:	e023      	b.n	8003010 <HCD_HC_IN_IRQHandler+0x572>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	212c      	movs	r1, #44	; 0x2c
 8002fce:	fb01 f303 	mul.w	r3, r1, r3
 8002fd2:	4413      	add	r3, r2
 8002fd4:	3361      	adds	r3, #97	; 0x61
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	2b07      	cmp	r3, #7
 8002fda:	d119      	bne.n	8003010 <HCD_HC_IN_IRQHandler+0x572>
      hhcd->hc[ch_num].ErrCnt++;
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	212c      	movs	r1, #44	; 0x2c
 8002fe2:	fb01 f303 	mul.w	r3, r1, r3
 8002fe6:	4413      	add	r3, r2
 8002fe8:	335c      	adds	r3, #92	; 0x5c
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	1c5a      	adds	r2, r3, #1
 8002fee:	6879      	ldr	r1, [r7, #4]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	202c      	movs	r0, #44	; 0x2c
 8002ff4:	fb00 f303 	mul.w	r3, r0, r3
 8002ff8:	440b      	add	r3, r1
 8002ffa:	335c      	adds	r3, #92	; 0x5c
 8002ffc:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	212c      	movs	r1, #44	; 0x2c
 8003004:	fb01 f303 	mul.w	r3, r1, r3
 8003008:	4413      	add	r3, r2
 800300a:	3360      	adds	r3, #96	; 0x60
 800300c:	2204      	movs	r2, #4
 800300e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	015a      	lsls	r2, r3, #5
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	4413      	add	r3, r2
 8003018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800301c:	461a      	mov	r2, r3
 800301e:	2302      	movs	r3, #2
 8003020:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	b2d9      	uxtb	r1, r3
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	202c      	movs	r0, #44	; 0x2c
 800302c:	fb00 f303 	mul.w	r3, r0, r3
 8003030:	4413      	add	r3, r2
 8003032:	3360      	adds	r3, #96	; 0x60
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	461a      	mov	r2, r3
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f00a f8fb 	bl	800d234 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800303e:	e05d      	b.n	80030fc <HCD_HC_IN_IRQHandler+0x65e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	015a      	lsls	r2, r3, #5
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	4413      	add	r3, r2
 8003048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 0310 	and.w	r3, r3, #16
 8003052:	2b10      	cmp	r3, #16
 8003054:	d152      	bne.n	80030fc <HCD_HC_IN_IRQHandler+0x65e>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	212c      	movs	r1, #44	; 0x2c
 800305c:	fb01 f303 	mul.w	r3, r1, r3
 8003060:	4413      	add	r3, r2
 8003062:	333f      	adds	r3, #63	; 0x3f
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	2b03      	cmp	r3, #3
 8003068:	d111      	bne.n	800308e <HCD_HC_IN_IRQHandler+0x5f0>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	212c      	movs	r1, #44	; 0x2c
 8003070:	fb01 f303 	mul.w	r3, r1, r3
 8003074:	4413      	add	r3, r2
 8003076:	335c      	adds	r3, #92	; 0x5c
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	4611      	mov	r1, r2
 8003086:	4618      	mov	r0, r3
 8003088:	f006 fc59 	bl	800993e <USB_HC_Halt>
 800308c:	e02d      	b.n	80030ea <HCD_HC_IN_IRQHandler+0x64c>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	212c      	movs	r1, #44	; 0x2c
 8003094:	fb01 f303 	mul.w	r3, r1, r3
 8003098:	4413      	add	r3, r2
 800309a:	333f      	adds	r3, #63	; 0x3f
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d009      	beq.n	80030b6 <HCD_HC_IN_IRQHandler+0x618>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	212c      	movs	r1, #44	; 0x2c
 80030a8:	fb01 f303 	mul.w	r3, r1, r3
 80030ac:	4413      	add	r3, r2
 80030ae:	333f      	adds	r3, #63	; 0x3f
 80030b0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d119      	bne.n	80030ea <HCD_HC_IN_IRQHandler+0x64c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	212c      	movs	r1, #44	; 0x2c
 80030bc:	fb01 f303 	mul.w	r3, r1, r3
 80030c0:	4413      	add	r3, r2
 80030c2:	335c      	adds	r3, #92	; 0x5c
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	212c      	movs	r1, #44	; 0x2c
 80030ce:	fb01 f303 	mul.w	r3, r1, r3
 80030d2:	4413      	add	r3, r2
 80030d4:	3361      	adds	r3, #97	; 0x61
 80030d6:	2203      	movs	r2, #3
 80030d8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	b2d2      	uxtb	r2, r2
 80030e2:	4611      	mov	r1, r2
 80030e4:	4618      	mov	r0, r3
 80030e6:	f006 fc2a 	bl	800993e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	015a      	lsls	r2, r3, #5
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	4413      	add	r3, r2
 80030f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f6:	461a      	mov	r2, r3
 80030f8:	2310      	movs	r3, #16
 80030fa:	6093      	str	r3, [r2, #8]
}
 80030fc:	bf00      	nop
 80030fe:	3718      	adds	r7, #24
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b088      	sub	sp, #32
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	460b      	mov	r3, r1
 800310e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800311a:	78fb      	ldrb	r3, [r7, #3]
 800311c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	015a      	lsls	r2, r3, #5
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	4413      	add	r3, r2
 8003126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b04      	cmp	r3, #4
 8003132:	d11a      	bne.n	800316a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	015a      	lsls	r2, r3, #5
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	4413      	add	r3, r2
 800313c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003140:	461a      	mov	r2, r3
 8003142:	2304      	movs	r3, #4
 8003144:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	212c      	movs	r1, #44	; 0x2c
 800314c:	fb01 f303 	mul.w	r3, r1, r3
 8003150:	4413      	add	r3, r2
 8003152:	3361      	adds	r3, #97	; 0x61
 8003154:	2206      	movs	r2, #6
 8003156:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	b2d2      	uxtb	r2, r2
 8003160:	4611      	mov	r1, r2
 8003162:	4618      	mov	r0, r3
 8003164:	f006 fbeb 	bl	800993e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003168:	e2ca      	b.n	8003700 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	015a      	lsls	r2, r3, #5
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	4413      	add	r3, r2
 8003172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f003 0320 	and.w	r3, r3, #32
 800317c:	2b20      	cmp	r3, #32
 800317e:	d12e      	bne.n	80031de <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	015a      	lsls	r2, r3, #5
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	4413      	add	r3, r2
 8003188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800318c:	461a      	mov	r2, r3
 800318e:	2320      	movs	r3, #32
 8003190:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	212c      	movs	r1, #44	; 0x2c
 8003198:	fb01 f303 	mul.w	r3, r1, r3
 800319c:	4413      	add	r3, r2
 800319e:	333d      	adds	r3, #61	; 0x3d
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	f040 82ac 	bne.w	8003700 <HCD_HC_OUT_IRQHandler+0x5fc>
      hhcd->hc[ch_num].do_ping = 0U;
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	212c      	movs	r1, #44	; 0x2c
 80031ae:	fb01 f303 	mul.w	r3, r1, r3
 80031b2:	4413      	add	r3, r2
 80031b4:	333d      	adds	r3, #61	; 0x3d
 80031b6:	2200      	movs	r2, #0
 80031b8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	212c      	movs	r1, #44	; 0x2c
 80031c0:	fb01 f303 	mul.w	r3, r1, r3
 80031c4:	4413      	add	r3, r2
 80031c6:	3360      	adds	r3, #96	; 0x60
 80031c8:	2202      	movs	r2, #2
 80031ca:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	4611      	mov	r1, r2
 80031d6:	4618      	mov	r0, r3
 80031d8:	f006 fbb1 	bl	800993e <USB_HC_Halt>
}
 80031dc:	e290      	b.n	8003700 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	015a      	lsls	r2, r3, #5
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	4413      	add	r3, r2
 80031e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031f4:	d112      	bne.n	800321c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	015a      	lsls	r2, r3, #5
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	4413      	add	r3, r2
 80031fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003202:	461a      	mov	r2, r3
 8003204:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003208:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	b2d2      	uxtb	r2, r2
 8003212:	4611      	mov	r1, r2
 8003214:	4618      	mov	r0, r3
 8003216:	f006 fb92 	bl	800993e <USB_HC_Halt>
}
 800321a:	e271      	b.n	8003700 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	015a      	lsls	r2, r3, #5
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	4413      	add	r3, r2
 8003224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b01      	cmp	r3, #1
 8003230:	d140      	bne.n	80032b4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	212c      	movs	r1, #44	; 0x2c
 8003238:	fb01 f303 	mul.w	r3, r1, r3
 800323c:	4413      	add	r3, r2
 800323e:	335c      	adds	r3, #92	; 0x5c
 8003240:	2200      	movs	r2, #0
 8003242:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	015a      	lsls	r2, r3, #5
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	4413      	add	r3, r2
 800324c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003256:	2b40      	cmp	r3, #64	; 0x40
 8003258:	d111      	bne.n	800327e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	212c      	movs	r1, #44	; 0x2c
 8003260:	fb01 f303 	mul.w	r3, r1, r3
 8003264:	4413      	add	r3, r2
 8003266:	333d      	adds	r3, #61	; 0x3d
 8003268:	2201      	movs	r2, #1
 800326a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	015a      	lsls	r2, r3, #5
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	4413      	add	r3, r2
 8003274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003278:	461a      	mov	r2, r3
 800327a:	2340      	movs	r3, #64	; 0x40
 800327c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	015a      	lsls	r2, r3, #5
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	4413      	add	r3, r2
 8003286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800328a:	461a      	mov	r2, r3
 800328c:	2301      	movs	r3, #1
 800328e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	212c      	movs	r1, #44	; 0x2c
 8003296:	fb01 f303 	mul.w	r3, r1, r3
 800329a:	4413      	add	r3, r2
 800329c:	3361      	adds	r3, #97	; 0x61
 800329e:	2201      	movs	r2, #1
 80032a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	4611      	mov	r1, r2
 80032ac:	4618      	mov	r0, r3
 80032ae:	f006 fb46 	bl	800993e <USB_HC_Halt>
}
 80032b2:	e225      	b.n	8003700 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	015a      	lsls	r2, r3, #5
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	4413      	add	r3, r2
 80032bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c6:	2b40      	cmp	r3, #64	; 0x40
 80032c8:	d12c      	bne.n	8003324 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	212c      	movs	r1, #44	; 0x2c
 80032d0:	fb01 f303 	mul.w	r3, r1, r3
 80032d4:	4413      	add	r3, r2
 80032d6:	3361      	adds	r3, #97	; 0x61
 80032d8:	2204      	movs	r2, #4
 80032da:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	212c      	movs	r1, #44	; 0x2c
 80032e2:	fb01 f303 	mul.w	r3, r1, r3
 80032e6:	4413      	add	r3, r2
 80032e8:	333d      	adds	r3, #61	; 0x3d
 80032ea:	2201      	movs	r2, #1
 80032ec:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	212c      	movs	r1, #44	; 0x2c
 80032f4:	fb01 f303 	mul.w	r3, r1, r3
 80032f8:	4413      	add	r3, r2
 80032fa:	335c      	adds	r3, #92	; 0x5c
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	b2d2      	uxtb	r2, r2
 8003308:	4611      	mov	r1, r2
 800330a:	4618      	mov	r0, r3
 800330c:	f006 fb17 	bl	800993e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	015a      	lsls	r2, r3, #5
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	4413      	add	r3, r2
 8003318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800331c:	461a      	mov	r2, r3
 800331e:	2340      	movs	r3, #64	; 0x40
 8003320:	6093      	str	r3, [r2, #8]
}
 8003322:	e1ed      	b.n	8003700 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	015a      	lsls	r2, r3, #5
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	4413      	add	r3, r2
 800332c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f003 0308 	and.w	r3, r3, #8
 8003336:	2b08      	cmp	r3, #8
 8003338:	d11a      	bne.n	8003370 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	015a      	lsls	r2, r3, #5
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	4413      	add	r3, r2
 8003342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003346:	461a      	mov	r2, r3
 8003348:	2308      	movs	r3, #8
 800334a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	212c      	movs	r1, #44	; 0x2c
 8003352:	fb01 f303 	mul.w	r3, r1, r3
 8003356:	4413      	add	r3, r2
 8003358:	3361      	adds	r3, #97	; 0x61
 800335a:	2205      	movs	r2, #5
 800335c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	b2d2      	uxtb	r2, r2
 8003366:	4611      	mov	r1, r2
 8003368:	4618      	mov	r0, r3
 800336a:	f006 fae8 	bl	800993e <USB_HC_Halt>
}
 800336e:	e1c7      	b.n	8003700 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	015a      	lsls	r2, r3, #5
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	4413      	add	r3, r2
 8003378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 0310 	and.w	r3, r3, #16
 8003382:	2b10      	cmp	r3, #16
 8003384:	d123      	bne.n	80033ce <HCD_HC_OUT_IRQHandler+0x2ca>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	212c      	movs	r1, #44	; 0x2c
 800338c:	fb01 f303 	mul.w	r3, r1, r3
 8003390:	4413      	add	r3, r2
 8003392:	335c      	adds	r3, #92	; 0x5c
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	212c      	movs	r1, #44	; 0x2c
 800339e:	fb01 f303 	mul.w	r3, r1, r3
 80033a2:	4413      	add	r3, r2
 80033a4:	3361      	adds	r3, #97	; 0x61
 80033a6:	2203      	movs	r2, #3
 80033a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	b2d2      	uxtb	r2, r2
 80033b2:	4611      	mov	r1, r2
 80033b4:	4618      	mov	r0, r3
 80033b6:	f006 fac2 	bl	800993e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	015a      	lsls	r2, r3, #5
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	4413      	add	r3, r2
 80033c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033c6:	461a      	mov	r2, r3
 80033c8:	2310      	movs	r3, #16
 80033ca:	6093      	str	r3, [r2, #8]
}
 80033cc:	e198      	b.n	8003700 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	015a      	lsls	r2, r3, #5
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	4413      	add	r3, r2
 80033d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e0:	2b80      	cmp	r3, #128	; 0x80
 80033e2:	d11a      	bne.n	800341a <HCD_HC_OUT_IRQHandler+0x316>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	212c      	movs	r1, #44	; 0x2c
 80033ea:	fb01 f303 	mul.w	r3, r1, r3
 80033ee:	4413      	add	r3, r2
 80033f0:	3361      	adds	r3, #97	; 0x61
 80033f2:	2206      	movs	r2, #6
 80033f4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	b2d2      	uxtb	r2, r2
 80033fe:	4611      	mov	r1, r2
 8003400:	4618      	mov	r0, r3
 8003402:	f006 fa9c 	bl	800993e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	015a      	lsls	r2, r3, #5
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	4413      	add	r3, r2
 800340e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003412:	461a      	mov	r2, r3
 8003414:	2380      	movs	r3, #128	; 0x80
 8003416:	6093      	str	r3, [r2, #8]
}
 8003418:	e172      	b.n	8003700 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	015a      	lsls	r2, r3, #5
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	4413      	add	r3, r2
 8003422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800342c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003430:	d11b      	bne.n	800346a <HCD_HC_OUT_IRQHandler+0x366>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	212c      	movs	r1, #44	; 0x2c
 8003438:	fb01 f303 	mul.w	r3, r1, r3
 800343c:	4413      	add	r3, r2
 800343e:	3361      	adds	r3, #97	; 0x61
 8003440:	2208      	movs	r2, #8
 8003442:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	b2d2      	uxtb	r2, r2
 800344c:	4611      	mov	r1, r2
 800344e:	4618      	mov	r0, r3
 8003450:	f006 fa75 	bl	800993e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	015a      	lsls	r2, r3, #5
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	4413      	add	r3, r2
 800345c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003460:	461a      	mov	r2, r3
 8003462:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003466:	6093      	str	r3, [r2, #8]
}
 8003468:	e14a      	b.n	8003700 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	015a      	lsls	r2, r3, #5
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	4413      	add	r3, r2
 8003472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b02      	cmp	r3, #2
 800347e:	f040 813f 	bne.w	8003700 <HCD_HC_OUT_IRQHandler+0x5fc>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	212c      	movs	r1, #44	; 0x2c
 8003488:	fb01 f303 	mul.w	r3, r1, r3
 800348c:	4413      	add	r3, r2
 800348e:	3361      	adds	r3, #97	; 0x61
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d17d      	bne.n	8003592 <HCD_HC_OUT_IRQHandler+0x48e>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	212c      	movs	r1, #44	; 0x2c
 800349c:	fb01 f303 	mul.w	r3, r1, r3
 80034a0:	4413      	add	r3, r2
 80034a2:	3360      	adds	r3, #96	; 0x60
 80034a4:	2201      	movs	r2, #1
 80034a6:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	212c      	movs	r1, #44	; 0x2c
 80034ae:	fb01 f303 	mul.w	r3, r1, r3
 80034b2:	4413      	add	r3, r2
 80034b4:	333f      	adds	r3, #63	; 0x3f
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d00a      	beq.n	80034d2 <HCD_HC_OUT_IRQHandler+0x3ce>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	212c      	movs	r1, #44	; 0x2c
 80034c2:	fb01 f303 	mul.w	r3, r1, r3
 80034c6:	4413      	add	r3, r2
 80034c8:	333f      	adds	r3, #63	; 0x3f
 80034ca:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80034cc:	2b03      	cmp	r3, #3
 80034ce:	f040 8100 	bne.w	80036d2 <HCD_HC_OUT_IRQHandler+0x5ce>
        if (hhcd->Init.dma_enable == 0U)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d113      	bne.n	8003502 <HCD_HC_OUT_IRQHandler+0x3fe>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	212c      	movs	r1, #44	; 0x2c
 80034e0:	fb01 f303 	mul.w	r3, r1, r3
 80034e4:	4413      	add	r3, r2
 80034e6:	3355      	adds	r3, #85	; 0x55
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	f083 0301 	eor.w	r3, r3, #1
 80034ee:	b2d8      	uxtb	r0, r3
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	212c      	movs	r1, #44	; 0x2c
 80034f6:	fb01 f303 	mul.w	r3, r1, r3
 80034fa:	4413      	add	r3, r2
 80034fc:	3355      	adds	r3, #85	; 0x55
 80034fe:	4602      	mov	r2, r0
 8003500:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	2b01      	cmp	r3, #1
 8003508:	f040 80e3 	bne.w	80036d2 <HCD_HC_OUT_IRQHandler+0x5ce>
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	212c      	movs	r1, #44	; 0x2c
 8003512:	fb01 f303 	mul.w	r3, r1, r3
 8003516:	4413      	add	r3, r2
 8003518:	334c      	adds	r3, #76	; 0x4c
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	f000 80d8 	beq.w	80036d2 <HCD_HC_OUT_IRQHandler+0x5ce>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	212c      	movs	r1, #44	; 0x2c
 8003528:	fb01 f303 	mul.w	r3, r1, r3
 800352c:	4413      	add	r3, r2
 800352e:	334c      	adds	r3, #76	; 0x4c
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	202c      	movs	r0, #44	; 0x2c
 8003538:	fb00 f202 	mul.w	r2, r0, r2
 800353c:	440a      	add	r2, r1
 800353e:	3240      	adds	r2, #64	; 0x40
 8003540:	8812      	ldrh	r2, [r2, #0]
 8003542:	4413      	add	r3, r2
 8003544:	3b01      	subs	r3, #1
 8003546:	6879      	ldr	r1, [r7, #4]
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	202c      	movs	r0, #44	; 0x2c
 800354c:	fb00 f202 	mul.w	r2, r0, r2
 8003550:	440a      	add	r2, r1
 8003552:	3240      	adds	r2, #64	; 0x40
 8003554:	8812      	ldrh	r2, [r2, #0]
 8003556:	fbb3 f3f2 	udiv	r3, r3, r2
 800355a:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	f000 80b5 	beq.w	80036d2 <HCD_HC_OUT_IRQHandler+0x5ce>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	212c      	movs	r1, #44	; 0x2c
 800356e:	fb01 f303 	mul.w	r3, r1, r3
 8003572:	4413      	add	r3, r2
 8003574:	3355      	adds	r3, #85	; 0x55
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	f083 0301 	eor.w	r3, r3, #1
 800357c:	b2d8      	uxtb	r0, r3
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	212c      	movs	r1, #44	; 0x2c
 8003584:	fb01 f303 	mul.w	r3, r1, r3
 8003588:	4413      	add	r3, r2
 800358a:	3355      	adds	r3, #85	; 0x55
 800358c:	4602      	mov	r2, r0
 800358e:	701a      	strb	r2, [r3, #0]
 8003590:	e09f      	b.n	80036d2 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	212c      	movs	r1, #44	; 0x2c
 8003598:	fb01 f303 	mul.w	r3, r1, r3
 800359c:	4413      	add	r3, r2
 800359e:	3361      	adds	r3, #97	; 0x61
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	2b03      	cmp	r3, #3
 80035a4:	d109      	bne.n	80035ba <HCD_HC_OUT_IRQHandler+0x4b6>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	212c      	movs	r1, #44	; 0x2c
 80035ac:	fb01 f303 	mul.w	r3, r1, r3
 80035b0:	4413      	add	r3, r2
 80035b2:	3360      	adds	r3, #96	; 0x60
 80035b4:	2202      	movs	r2, #2
 80035b6:	701a      	strb	r2, [r3, #0]
 80035b8:	e08b      	b.n	80036d2 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	212c      	movs	r1, #44	; 0x2c
 80035c0:	fb01 f303 	mul.w	r3, r1, r3
 80035c4:	4413      	add	r3, r2
 80035c6:	3361      	adds	r3, #97	; 0x61
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	2b04      	cmp	r3, #4
 80035cc:	d109      	bne.n	80035e2 <HCD_HC_OUT_IRQHandler+0x4de>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	212c      	movs	r1, #44	; 0x2c
 80035d4:	fb01 f303 	mul.w	r3, r1, r3
 80035d8:	4413      	add	r3, r2
 80035da:	3360      	adds	r3, #96	; 0x60
 80035dc:	2202      	movs	r2, #2
 80035de:	701a      	strb	r2, [r3, #0]
 80035e0:	e077      	b.n	80036d2 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	212c      	movs	r1, #44	; 0x2c
 80035e8:	fb01 f303 	mul.w	r3, r1, r3
 80035ec:	4413      	add	r3, r2
 80035ee:	3361      	adds	r3, #97	; 0x61
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	2b05      	cmp	r3, #5
 80035f4:	d109      	bne.n	800360a <HCD_HC_OUT_IRQHandler+0x506>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	212c      	movs	r1, #44	; 0x2c
 80035fc:	fb01 f303 	mul.w	r3, r1, r3
 8003600:	4413      	add	r3, r2
 8003602:	3360      	adds	r3, #96	; 0x60
 8003604:	2205      	movs	r2, #5
 8003606:	701a      	strb	r2, [r3, #0]
 8003608:	e063      	b.n	80036d2 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	212c      	movs	r1, #44	; 0x2c
 8003610:	fb01 f303 	mul.w	r3, r1, r3
 8003614:	4413      	add	r3, r2
 8003616:	3361      	adds	r3, #97	; 0x61
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	2b06      	cmp	r3, #6
 800361c:	d009      	beq.n	8003632 <HCD_HC_OUT_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	212c      	movs	r1, #44	; 0x2c
 8003624:	fb01 f303 	mul.w	r3, r1, r3
 8003628:	4413      	add	r3, r2
 800362a:	3361      	adds	r3, #97	; 0x61
 800362c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800362e:	2b08      	cmp	r3, #8
 8003630:	d14f      	bne.n	80036d2 <HCD_HC_OUT_IRQHandler+0x5ce>
      hhcd->hc[ch_num].ErrCnt++;
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	212c      	movs	r1, #44	; 0x2c
 8003638:	fb01 f303 	mul.w	r3, r1, r3
 800363c:	4413      	add	r3, r2
 800363e:	335c      	adds	r3, #92	; 0x5c
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	1c5a      	adds	r2, r3, #1
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	202c      	movs	r0, #44	; 0x2c
 800364a:	fb00 f303 	mul.w	r3, r0, r3
 800364e:	440b      	add	r3, r1
 8003650:	335c      	adds	r3, #92	; 0x5c
 8003652:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	212c      	movs	r1, #44	; 0x2c
 800365a:	fb01 f303 	mul.w	r3, r1, r3
 800365e:	4413      	add	r3, r2
 8003660:	335c      	adds	r3, #92	; 0x5c
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2b02      	cmp	r3, #2
 8003666:	d912      	bls.n	800368e <HCD_HC_OUT_IRQHandler+0x58a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	212c      	movs	r1, #44	; 0x2c
 800366e:	fb01 f303 	mul.w	r3, r1, r3
 8003672:	4413      	add	r3, r2
 8003674:	335c      	adds	r3, #92	; 0x5c
 8003676:	2200      	movs	r2, #0
 8003678:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	212c      	movs	r1, #44	; 0x2c
 8003680:	fb01 f303 	mul.w	r3, r1, r3
 8003684:	4413      	add	r3, r2
 8003686:	3360      	adds	r3, #96	; 0x60
 8003688:	2204      	movs	r2, #4
 800368a:	701a      	strb	r2, [r3, #0]
 800368c:	e021      	b.n	80036d2 <HCD_HC_OUT_IRQHandler+0x5ce>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	212c      	movs	r1, #44	; 0x2c
 8003694:	fb01 f303 	mul.w	r3, r1, r3
 8003698:	4413      	add	r3, r2
 800369a:	3360      	adds	r3, #96	; 0x60
 800369c:	2202      	movs	r2, #2
 800369e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	015a      	lsls	r2, r3, #5
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	4413      	add	r3, r2
 80036a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80036b6:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80036be:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	015a      	lsls	r2, r3, #5
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	4413      	add	r3, r2
 80036c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036cc:	461a      	mov	r2, r3
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	015a      	lsls	r2, r3, #5
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	4413      	add	r3, r2
 80036da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036de:	461a      	mov	r2, r3
 80036e0:	2302      	movs	r3, #2
 80036e2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	b2d9      	uxtb	r1, r3
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	202c      	movs	r0, #44	; 0x2c
 80036ee:	fb00 f303 	mul.w	r3, r0, r3
 80036f2:	4413      	add	r3, r2
 80036f4:	3360      	adds	r3, #96	; 0x60
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	461a      	mov	r2, r3
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f009 fd9a 	bl	800d234 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003700:	bf00      	nop
 8003702:	3720      	adds	r7, #32
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b08a      	sub	sp, #40	; 0x28
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003718:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	f003 030f 	and.w	r3, r3, #15
 8003728:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	0c5b      	lsrs	r3, r3, #17
 800372e:	f003 030f 	and.w	r3, r3, #15
 8003732:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	091b      	lsrs	r3, r3, #4
 8003738:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800373c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	2b02      	cmp	r3, #2
 8003742:	d004      	beq.n	800374e <HCD_RXQLVL_IRQHandler+0x46>
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	2b05      	cmp	r3, #5
 8003748:	f000 80a9 	beq.w	800389e <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800374c:	e0aa      	b.n	80038a4 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 80a6 	beq.w	80038a2 <HCD_RXQLVL_IRQHandler+0x19a>
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	212c      	movs	r1, #44	; 0x2c
 800375c:	fb01 f303 	mul.w	r3, r1, r3
 8003760:	4413      	add	r3, r2
 8003762:	3344      	adds	r3, #68	; 0x44
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 809b 	beq.w	80038a2 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	212c      	movs	r1, #44	; 0x2c
 8003772:	fb01 f303 	mul.w	r3, r1, r3
 8003776:	4413      	add	r3, r2
 8003778:	3350      	adds	r3, #80	; 0x50
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	441a      	add	r2, r3
 8003780:	6879      	ldr	r1, [r7, #4]
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	202c      	movs	r0, #44	; 0x2c
 8003786:	fb00 f303 	mul.w	r3, r0, r3
 800378a:	440b      	add	r3, r1
 800378c:	334c      	adds	r3, #76	; 0x4c
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	429a      	cmp	r2, r3
 8003792:	d87a      	bhi.n	800388a <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6818      	ldr	r0, [r3, #0]
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	212c      	movs	r1, #44	; 0x2c
 800379e:	fb01 f303 	mul.w	r3, r1, r3
 80037a2:	4413      	add	r3, r2
 80037a4:	3344      	adds	r3, #68	; 0x44
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	b292      	uxth	r2, r2
 80037ac:	4619      	mov	r1, r3
 80037ae:	f005 fcbb 	bl	8009128 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	212c      	movs	r1, #44	; 0x2c
 80037b8:	fb01 f303 	mul.w	r3, r1, r3
 80037bc:	4413      	add	r3, r2
 80037be:	3344      	adds	r3, #68	; 0x44
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	441a      	add	r2, r3
 80037c6:	6879      	ldr	r1, [r7, #4]
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	202c      	movs	r0, #44	; 0x2c
 80037cc:	fb00 f303 	mul.w	r3, r0, r3
 80037d0:	440b      	add	r3, r1
 80037d2:	3344      	adds	r3, #68	; 0x44
 80037d4:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	212c      	movs	r1, #44	; 0x2c
 80037dc:	fb01 f303 	mul.w	r3, r1, r3
 80037e0:	4413      	add	r3, r2
 80037e2:	3350      	adds	r3, #80	; 0x50
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	441a      	add	r2, r3
 80037ea:	6879      	ldr	r1, [r7, #4]
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	202c      	movs	r0, #44	; 0x2c
 80037f0:	fb00 f303 	mul.w	r3, r0, r3
 80037f4:	440b      	add	r3, r1
 80037f6:	3350      	adds	r3, #80	; 0x50
 80037f8:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	015a      	lsls	r2, r3, #5
 80037fe:	6a3b      	ldr	r3, [r7, #32]
 8003800:	4413      	add	r3, r2
 8003802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	0cdb      	lsrs	r3, r3, #19
 800380a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800380e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	212c      	movs	r1, #44	; 0x2c
 8003816:	fb01 f303 	mul.w	r3, r1, r3
 800381a:	4413      	add	r3, r2
 800381c:	3340      	adds	r3, #64	; 0x40
 800381e:	881b      	ldrh	r3, [r3, #0]
 8003820:	461a      	mov	r2, r3
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	4293      	cmp	r3, r2
 8003826:	d13c      	bne.n	80038a2 <HCD_RXQLVL_IRQHandler+0x19a>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d039      	beq.n	80038a2 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	015a      	lsls	r2, r3, #5
 8003832:	6a3b      	ldr	r3, [r7, #32]
 8003834:	4413      	add	r3, r2
 8003836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003844:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800384c:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	015a      	lsls	r2, r3, #5
 8003852:	6a3b      	ldr	r3, [r7, #32]
 8003854:	4413      	add	r3, r2
 8003856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800385a:	461a      	mov	r2, r3
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	212c      	movs	r1, #44	; 0x2c
 8003866:	fb01 f303 	mul.w	r3, r1, r3
 800386a:	4413      	add	r3, r2
 800386c:	3354      	adds	r3, #84	; 0x54
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	f083 0301 	eor.w	r3, r3, #1
 8003874:	b2d8      	uxtb	r0, r3
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	212c      	movs	r1, #44	; 0x2c
 800387c:	fb01 f303 	mul.w	r3, r1, r3
 8003880:	4413      	add	r3, r2
 8003882:	3354      	adds	r3, #84	; 0x54
 8003884:	4602      	mov	r2, r0
 8003886:	701a      	strb	r2, [r3, #0]
      break;
 8003888:	e00b      	b.n	80038a2 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	212c      	movs	r1, #44	; 0x2c
 8003890:	fb01 f303 	mul.w	r3, r1, r3
 8003894:	4413      	add	r3, r2
 8003896:	3360      	adds	r3, #96	; 0x60
 8003898:	2204      	movs	r2, #4
 800389a:	701a      	strb	r2, [r3, #0]
      break;
 800389c:	e001      	b.n	80038a2 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800389e:	bf00      	nop
 80038a0:	e000      	b.n	80038a4 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80038a2:	bf00      	nop
  }
}
 80038a4:	bf00      	nop
 80038a6:	3728      	adds	r7, #40	; 0x28
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80038d8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d10b      	bne.n	80038fc <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d102      	bne.n	80038f4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f009 fc84 	bl	800d1fc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	f043 0302 	orr.w	r3, r3, #2
 80038fa:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f003 0308 	and.w	r3, r3, #8
 8003902:	2b08      	cmp	r3, #8
 8003904:	d132      	bne.n	800396c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	f043 0308 	orr.w	r3, r3, #8
 800390c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f003 0304 	and.w	r3, r3, #4
 8003914:	2b04      	cmp	r3, #4
 8003916:	d126      	bne.n	8003966 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	2b02      	cmp	r3, #2
 800391e:	d113      	bne.n	8003948 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003926:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800392a:	d106      	bne.n	800393a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2102      	movs	r1, #2
 8003932:	4618      	mov	r0, r3
 8003934:	f005 fd28 	bl	8009388 <USB_InitFSLSPClkSel>
 8003938:	e011      	b.n	800395e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2101      	movs	r1, #1
 8003940:	4618      	mov	r0, r3
 8003942:	f005 fd21 	bl	8009388 <USB_InitFSLSPClkSel>
 8003946:	e00a      	b.n	800395e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d106      	bne.n	800395e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003956:	461a      	mov	r2, r3
 8003958:	f64e 2360 	movw	r3, #60000	; 0xea60
 800395c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f009 fc76 	bl	800d250 <HAL_HCD_PortEnabled_Callback>
 8003964:	e002      	b.n	800396c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f009 fc80 	bl	800d26c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f003 0320 	and.w	r3, r3, #32
 8003972:	2b20      	cmp	r3, #32
 8003974:	d103      	bne.n	800397e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	f043 0320 	orr.w	r3, r3, #32
 800397c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003984:	461a      	mov	r2, r3
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	6013      	str	r3, [r2, #0]
}
 800398a:	bf00      	nop
 800398c:	3718      	adds	r7, #24
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b082      	sub	sp, #8
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d101      	bne.n	80039a4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e081      	b.n	8003aa8 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d106      	bne.n	80039be <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f008 ff07 	bl	800c7cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2224      	movs	r2, #36	; 0x24
 80039c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 0201 	bic.w	r2, r2, #1
 80039d4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039e2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689a      	ldr	r2, [r3, #8]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039f2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d107      	bne.n	8003a0c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689a      	ldr	r2, [r3, #8]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a08:	609a      	str	r2, [r3, #8]
 8003a0a:	e006      	b.n	8003a1a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003a18:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d104      	bne.n	8003a2c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a2a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6812      	ldr	r2, [r2, #0]
 8003a36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a3e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68da      	ldr	r2, [r3, #12]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a4e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	691a      	ldr	r2, [r3, #16]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	430a      	orrs	r2, r1
 8003a68:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	69d9      	ldr	r1, [r3, #28]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a1a      	ldr	r2, [r3, #32]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f042 0201 	orr.w	r2, r2, #1
 8003a88:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2220      	movs	r2, #32
 8003a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3708      	adds	r7, #8
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b20      	cmp	r3, #32
 8003ac4:	d138      	bne.n	8003b38 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d101      	bne.n	8003ad4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	e032      	b.n	8003b3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2224      	movs	r2, #36	; 0x24
 8003ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 0201 	bic.w	r2, r2, #1
 8003af2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b02:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	6819      	ldr	r1, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	683a      	ldr	r2, [r7, #0]
 8003b10:	430a      	orrs	r2, r1
 8003b12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f042 0201 	orr.w	r2, r2, #1
 8003b22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2220      	movs	r2, #32
 8003b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b34:	2300      	movs	r3, #0
 8003b36:	e000      	b.n	8003b3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b38:	2302      	movs	r3, #2
  }
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b46:	b480      	push	{r7}
 8003b48:	b085      	sub	sp, #20
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
 8003b4e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b20      	cmp	r3, #32
 8003b5a:	d139      	bne.n	8003bd0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d101      	bne.n	8003b6a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b66:	2302      	movs	r3, #2
 8003b68:	e033      	b.n	8003bd2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2224      	movs	r2, #36	; 0x24
 8003b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f022 0201 	bic.w	r2, r2, #1
 8003b88:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b98:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	021b      	lsls	r3, r3, #8
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f042 0201 	orr.w	r2, r2, #1
 8003bba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2220      	movs	r2, #32
 8003bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	e000      	b.n	8003bd2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003bd0:	2302      	movs	r3, #2
  }
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3714      	adds	r7, #20
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
	...

08003be0 <HAL_NOR_Init>:
  * @param  ExtTiming pointer to NOR extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing,
                               FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
  uint32_t deviceaddress;
  HAL_StatusTypeDef status = HAL_OK;
 8003bec:	2300      	movs	r3, #0
 8003bee:	74fb      	strb	r3, [r7, #19]

  /* Check the NOR handle parameter */
  if (hnor == NULL)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <HAL_NOR_Init+0x1a>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e090      	b.n	8003d1c <HAL_NOR_Init+0x13c>
  }

  if (hnor->State == HAL_NOR_STATE_RESET)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d106      	bne.n	8003c14 <HAL_NOR_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f009 f8fa 	bl	800ce08 <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }

  /* Initialize NOR control Interface */
  (void)FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	3308      	adds	r3, #8
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4610      	mov	r0, r2
 8003c20:	f004 fb96 	bl	8008350 <FMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6818      	ldr	r0, [r3, #0]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	68b9      	ldr	r1, [r7, #8]
 8003c30:	f004 fc0a 	bl	8008448 <FMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6858      	ldr	r0, [r3, #4]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c40:	6879      	ldr	r1, [r7, #4]
 8003c42:	f004 fc51 	bl	80084e8 <FMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	6892      	ldr	r2, [r2, #8]
 8003c4e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	6892      	ldr	r2, [r2, #8]
 8003c5a:	f041 0101 	orr.w	r1, r1, #1
 8003c5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d103      	bne.n	8003c72 <HAL_NOR_Init+0x92>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 8003c6a:	4b2e      	ldr	r3, [pc, #184]	; (8003d24 <HAL_NOR_Init+0x144>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	601a      	str	r2, [r3, #0]
 8003c70:	e002      	b.n	8003c78 <HAL_NOR_Init+0x98>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 8003c72:	4b2c      	ldr	r3, [pc, #176]	; (8003d24 <HAL_NOR_Init+0x144>)
 8003c74:	2201      	movs	r2, #1
 8003c76:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Select the NOR device address */
  if (hnor->Init.NSBank == FMC_NORSRAM_BANK1)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d103      	bne.n	8003c90 <HAL_NOR_Init+0xb0>
  {
    deviceaddress = NOR_MEMORY_ADRESS1;
 8003c88:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8003c8c:	617b      	str	r3, [r7, #20]
 8003c8e:	e012      	b.n	8003cb6 <HAL_NOR_Init+0xd6>
  }
  else if (hnor->Init.NSBank == FMC_NORSRAM_BANK2)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d103      	bne.n	8003ca0 <HAL_NOR_Init+0xc0>
  {
    deviceaddress = NOR_MEMORY_ADRESS2;
 8003c98:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8003c9c:	617b      	str	r3, [r7, #20]
 8003c9e:	e00a      	b.n	8003cb6 <HAL_NOR_Init+0xd6>
  }
  else if (hnor->Init.NSBank == FMC_NORSRAM_BANK3)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	2b04      	cmp	r3, #4
 8003ca6:	d103      	bne.n	8003cb0 <HAL_NOR_Init+0xd0>
  {
    deviceaddress = NOR_MEMORY_ADRESS3;
 8003ca8:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8003cac:	617b      	str	r3, [r7, #20]
 8003cae:	e002      	b.n	8003cb6 <HAL_NOR_Init+0xd6>
  }
  else /* FMC_NORSRAM_BANK4 */
  {
    deviceaddress = NOR_MEMORY_ADRESS4;
 8003cb0:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 8003cb4:	617b      	str	r3, [r7, #20]
  }

  if (hnor->Init.WriteOperation == FMC_WRITE_OPERATION_DISABLE)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10c      	bne.n	8003cd8 <HAL_NOR_Init+0xf8>
  {
    (void)FMC_NORSRAM_WriteOperation_Disable(hnor->Instance, hnor->Init.NSBank);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	4610      	mov	r0, r2
 8003cca:	f004 fc45 	bl	8008558 <FMC_NORSRAM_WriteOperation_Disable>

    /* Update the NOR controller state */
    hnor->State = HAL_NOR_STATE_PROTECTED;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2204      	movs	r2, #4
 8003cd2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8003cd6:	e020      	b.n	8003d1a <HAL_NOR_Init+0x13a>
  }
  else
  {
    /* Get the value of the command set */
    NOR_WRITE(NOR_ADDR_SHIFT(deviceaddress, uwNORMemoryDataWidth, NOR_CMD_ADDRESS_FIRST_CFI), NOR_CMD_DATA_CFI);
 8003cd8:	4b12      	ldr	r3, [pc, #72]	; (8003d24 <HAL_NOR_Init+0x144>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d102      	bne.n	8003ce6 <HAL_NOR_Init+0x106>
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	33aa      	adds	r3, #170	; 0xaa
 8003ce4:	e001      	b.n	8003cea <HAL_NOR_Init+0x10a>
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	3355      	adds	r3, #85	; 0x55
 8003cea:	2298      	movs	r2, #152	; 0x98
 8003cec:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003cee:	f3bf 8f4f 	dsb	sy
}
 8003cf2:	bf00      	nop
    hnor->CommandSet = *(__IO uint16_t *) NOR_ADDR_SHIFT(deviceaddress, uwNORMemoryDataWidth, NOR_ADDRESS_COMMAND_SET);
 8003cf4:	4b0b      	ldr	r3, [pc, #44]	; (8003d24 <HAL_NOR_Init+0x144>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d102      	bne.n	8003d02 <HAL_NOR_Init+0x122>
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	3326      	adds	r3, #38	; 0x26
 8003d00:	e001      	b.n	8003d06 <HAL_NOR_Init+0x126>
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	3313      	adds	r3, #19
 8003d06:	881b      	ldrh	r3, [r3, #0]
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	64da      	str	r2, [r3, #76]	; 0x4c

    status = HAL_NOR_ReturnToReadMode(hnor);
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f000 f809 	bl	8003d28 <HAL_NOR_ReturnToReadMode>
 8003d16:	4603      	mov	r3, r0
 8003d18:	74fb      	strb	r3, [r7, #19]
  }

  return status;
 8003d1a:	7cfb      	ldrb	r3, [r7, #19]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3718      	adds	r7, #24
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	200000b0 	.word	0x200000b0

08003d28 <HAL_NOR_ReturnToReadMode>:
  * @param  hnor pointer to a NOR_HandleTypeDef structure that contains
  *                the configuration information for NOR module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_ReturnToReadMode(NOR_HandleTypeDef *hnor)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t deviceaddress;
  HAL_NOR_StateTypeDef state;
  HAL_StatusTypeDef status = HAL_OK;
 8003d30:	2300      	movs	r3, #0
 8003d32:	72fb      	strb	r3, [r7, #11]

  /* Check the NOR controller state */
  state = hnor->State;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003d3a:	72bb      	strb	r3, [r7, #10]
  if (state == HAL_NOR_STATE_BUSY)
 8003d3c:	7abb      	ldrb	r3, [r7, #10]
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d101      	bne.n	8003d46 <HAL_NOR_ReturnToReadMode+0x1e>
  {
    return HAL_BUSY;
 8003d42:	2302      	movs	r3, #2
 8003d44:	e052      	b.n	8003dec <HAL_NOR_ReturnToReadMode+0xc4>
  }
  else if (state == HAL_NOR_STATE_PROTECTED)
 8003d46:	7abb      	ldrb	r3, [r7, #10]
 8003d48:	2b04      	cmp	r3, #4
 8003d4a:	d101      	bne.n	8003d50 <HAL_NOR_ReturnToReadMode+0x28>
  {
    return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e04d      	b.n	8003dec <HAL_NOR_ReturnToReadMode+0xc4>
  }
  else if (state == HAL_NOR_STATE_READY)
 8003d50:	7abb      	ldrb	r3, [r7, #10]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d149      	bne.n	8003dea <HAL_NOR_ReturnToReadMode+0xc2>
  {
    /* Process Locked */
    __HAL_LOCK(hnor);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d101      	bne.n	8003d64 <HAL_NOR_ReturnToReadMode+0x3c>
 8003d60:	2302      	movs	r3, #2
 8003d62:	e043      	b.n	8003dec <HAL_NOR_ReturnToReadMode+0xc4>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Update the NOR controller state */
    hnor->State = HAL_NOR_STATE_BUSY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2202      	movs	r2, #2
 8003d70:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Select the NOR device address */
    if (hnor->Init.NSBank == FMC_NORSRAM_BANK1)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d103      	bne.n	8003d84 <HAL_NOR_ReturnToReadMode+0x5c>
    {
      deviceaddress = NOR_MEMORY_ADRESS1;
 8003d7c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8003d80:	60fb      	str	r3, [r7, #12]
 8003d82:	e012      	b.n	8003daa <HAL_NOR_ReturnToReadMode+0x82>
    }
    else if (hnor->Init.NSBank == FMC_NORSRAM_BANK2)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d103      	bne.n	8003d94 <HAL_NOR_ReturnToReadMode+0x6c>
    {
      deviceaddress = NOR_MEMORY_ADRESS2;
 8003d8c:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8003d90:	60fb      	str	r3, [r7, #12]
 8003d92:	e00a      	b.n	8003daa <HAL_NOR_ReturnToReadMode+0x82>
    }
    else if (hnor->Init.NSBank == FMC_NORSRAM_BANK3)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	2b04      	cmp	r3, #4
 8003d9a:	d103      	bne.n	8003da4 <HAL_NOR_ReturnToReadMode+0x7c>
    {
      deviceaddress = NOR_MEMORY_ADRESS3;
 8003d9c:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8003da0:	60fb      	str	r3, [r7, #12]
 8003da2:	e002      	b.n	8003daa <HAL_NOR_ReturnToReadMode+0x82>
    }
    else /* FMC_NORSRAM_BANK4 */
    {
      deviceaddress = NOR_MEMORY_ADRESS4;
 8003da4:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 8003da8:	60fb      	str	r3, [r7, #12]
    }

    if (hnor->CommandSet == NOR_AMD_FUJITSU_COMMAND_SET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d105      	bne.n	8003dbe <HAL_NOR_ReturnToReadMode+0x96>
    {
      NOR_WRITE(deviceaddress, NOR_CMD_DATA_READ_RESET);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	22f0      	movs	r2, #240	; 0xf0
 8003db6:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003db8:	f3bf 8f4f 	dsb	sy
}
 8003dbc:	e00b      	b.n	8003dd6 <HAL_NOR_ReturnToReadMode+0xae>
    }
    else if (hnor->CommandSet == NOR_INTEL_SHARP_EXT_COMMAND_SET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d105      	bne.n	8003dd2 <HAL_NOR_ReturnToReadMode+0xaa>
    {
      NOR_WRITE(deviceaddress, NOR_CMD_READ_ARRAY);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	22ff      	movs	r2, #255	; 0xff
 8003dca:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003dcc:	f3bf 8f4f 	dsb	sy
}
 8003dd0:	e001      	b.n	8003dd6 <HAL_NOR_ReturnToReadMode+0xae>
    }
    else
    {
      /* Primary command set not supported by the driver */
      status = HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	72fb      	strb	r3, [r7, #11]
    }

    /* Check the NOR controller state */
    hnor->State = state;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	7aba      	ldrb	r2, [r7, #10]
 8003dda:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Process unlocked */
    __HAL_UNLOCK(hnor);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  else
  {
    return HAL_ERROR;
  }

  return status;
 8003de6:	7afb      	ldrb	r3, [r7, #11]
 8003de8:	e000      	b.n	8003dec <HAL_NOR_ReturnToReadMode+0xc4>
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3714      	adds	r7, #20
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e00:	2300      	movs	r3, #0
 8003e02:	73fb      	strb	r3, [r7, #15]
  uint32_t updateotrlpotr;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if(hopamp == NULL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e0c3      	b.n	8003f96 <HAL_OPAMP_Init+0x19e>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b05      	cmp	r3, #5
 8003e18:	d101      	bne.n	8003e1e <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e0bb      	b.n	8003f96 <HAL_OPAMP_Init+0x19e>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d101      	bne.n	8003e2e <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e0b3      	b.n	8003f96 <HAL_OPAMP_Init+0x19e>
    {
      assert_param(IS_OPAMP_PGA_GAIN(hopamp->Init.PgaGain));
    }

    assert_param(IS_OPAMP_TRIMMING(hopamp->Init.UserTrimming));
    if ((hopamp->Init.UserTrimming) == OPAMP_TRIMMING_USER)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	69db      	ldr	r3, [r3, #28]
 8003e32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValuePLowPower));
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueNLowPower));
      }
    }

    if(hopamp->State == HAL_OPAMP_STATE_RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d103      	bne.n	8003e4a <HAL_OPAMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f008 fe68 	bl	800cb20 <HAL_OPAMP_MspInit>
#endif /* USE_HAL_OPAMP_REGISTER_CALLBACKS */

    /* Set operating mode */
    CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e5e:	601a      	str	r2, [r3, #0]

    if (hopamp->Init.Mode == OPAMP_PGA_MODE)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	2b08      	cmp	r3, #8
 8003e66:	d11b      	bne.n	8003ea0 <HAL_OPAMP_Init+0xa8>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_PGA, \
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f423 438e 	bic.w	r3, r3, #18176	; 0x4700
 8003e72:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	6891      	ldr	r1, [r2, #8]
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	68d2      	ldr	r2, [r2, #12]
 8003e7e:	4311      	orrs	r1, r2
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	6992      	ldr	r2, [r2, #24]
 8003e84:	4311      	orrs	r1, r2
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	6912      	ldr	r2, [r2, #16]
 8003e8a:	4311      	orrs	r1, r2
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6952      	ldr	r2, [r2, #20]
 8003e90:	4311      	orrs	r1, r2
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	69d2      	ldr	r2, [r2, #28]
 8003e96:	4311      	orrs	r1, r2
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	6812      	ldr	r2, [r2, #0]
 8003e9c:	430b      	orrs	r3, r1
 8003e9e:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	2b0c      	cmp	r3, #12
 8003ea6:	d115      	bne.n	8003ed4 <HAL_OPAMP_Init+0xdc>
    {
    /* In Follower mode InvertingInput is Not Applicable  */
    MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_FOLLOWER, \
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f423 4388 	bic.w	r3, r3, #17408	; 0x4400
 8003eb2:	f023 030e 	bic.w	r3, r3, #14
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	6891      	ldr	r1, [r2, #8]
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	68d2      	ldr	r2, [r2, #12]
 8003ebe:	4311      	orrs	r1, r2
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	6952      	ldr	r2, [r2, #20]
 8003ec4:	4311      	orrs	r1, r2
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	69d2      	ldr	r2, [r2, #28]
 8003eca:	4311      	orrs	r1, r2
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	6812      	ldr	r2, [r2, #0]
 8003ed0:	430b      	orrs	r3, r1
 8003ed2:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.Mode | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_STANDALONE_MODE)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d118      	bne.n	8003f0e <HAL_OPAMP_Init+0x116>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_STANDALONE, \
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f423 438e 	bic.w	r3, r3, #18176	; 0x4700
 8003ee6:	f023 030e 	bic.w	r3, r3, #14
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	6891      	ldr	r1, [r2, #8]
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	68d2      	ldr	r2, [r2, #12]
 8003ef2:	4311      	orrs	r1, r2
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	6912      	ldr	r2, [r2, #16]
 8003ef8:	4311      	orrs	r1, r2
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	6952      	ldr	r2, [r2, #20]
 8003efe:	4311      	orrs	r1, r2
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	69d2      	ldr	r2, [r2, #28]
 8003f04:	4311      	orrs	r1, r2
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	6812      	ldr	r2, [r2, #0]
 8003f0a:	430b      	orrs	r3, r1
 8003f0c:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.UserTrimming == OPAMP_TRIMMING_USER)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	69db      	ldr	r3, [r3, #28]
 8003f12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f16:	d12a      	bne.n	8003f6e <HAL_OPAMP_Init+0x176>
    {
      /* Set power mode and associated calibration parameters */
      if (hopamp->Init.PowerMode != OPAMP_POWERMODE_LOWPOWER)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d013      	beq.n	8003f48 <HAL_OPAMP_Init+0x150>
      {
        /* OPAMP_POWERMODE_NORMALPOWER */
        /* Set calibration mode (factory or user) and values for            */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* normal mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueN));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->OTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003f38:	f023 031f 	bic.w	r3, r3, #31
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	6812      	ldr	r2, [r2, #0]
 8003f40:	68b9      	ldr	r1, [r7, #8]
 8003f42:	430b      	orrs	r3, r1
 8003f44:	6053      	str	r3, [r2, #4]
 8003f46:	e012      	b.n	8003f6e <HAL_OPAMP_Init+0x176>
      else
      {
        /* OPAMP_POWERMODE_LOWPOWER */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* low power mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValuePLowPower) << (OPAMP_INPUT_NONINVERTING)) \
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4c:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueNLowPower));
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        updateotrlpotr = (((hopamp->Init.TrimmingValuePLowPower) << (OPAMP_INPUT_NONINVERTING)) \
 8003f52:	4313      	orrs	r3, r2
 8003f54:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->LPOTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003f60:	f023 031f 	bic.w	r3, r3, #31
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	6812      	ldr	r2, [r2, #0]
 8003f68:	68b9      	ldr	r1, [r7, #8]
 8003f6a:	430b      	orrs	r3, r1
 8003f6c:	6093      	str	r3, [r2, #8]
    }

    /* Configure the power supply range */
    /* The OPAMP_CSR_OPARANGE is common configuration for all OPAMPs */
    /* bit OPAMP1_CSR_OPARANGE is used for both OPAMPs */
    MODIFY_REG(OPAMP1->CSR, OPAMP1_CSR_OPARANGE, hopamp->Init.PowerSupplyRange);
 8003f6e:	4b0c      	ldr	r3, [pc, #48]	; (8003fa0 <HAL_OPAMP_Init+0x1a8>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	4909      	ldr	r1, [pc, #36]	; (8003fa0 <HAL_OPAMP_Init+0x1a8>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	600b      	str	r3, [r1, #0]

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d103      	bne.n	8003f94 <HAL_OPAMP_Init+0x19c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    }
    /* else: remain in READY or BUSY state (no update) */
    return status;
 8003f94:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40007800 	.word	0x40007800

08003fa4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003fa8:	4b04      	ldr	r3, [pc, #16]	; (8003fbc <HAL_PWREx_GetVoltageRange+0x18>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	40007000 	.word	0x40007000

08003fc0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fce:	d130      	bne.n	8004032 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fd0:	4b23      	ldr	r3, [pc, #140]	; (8004060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fdc:	d038      	beq.n	8004050 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fde:	4b20      	ldr	r3, [pc, #128]	; (8004060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003fe6:	4a1e      	ldr	r2, [pc, #120]	; (8004060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fe8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003fee:	4b1d      	ldr	r3, [pc, #116]	; (8004064 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2232      	movs	r2, #50	; 0x32
 8003ff4:	fb02 f303 	mul.w	r3, r2, r3
 8003ff8:	4a1b      	ldr	r2, [pc, #108]	; (8004068 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffe:	0c9b      	lsrs	r3, r3, #18
 8004000:	3301      	adds	r3, #1
 8004002:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004004:	e002      	b.n	800400c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	3b01      	subs	r3, #1
 800400a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800400c:	4b14      	ldr	r3, [pc, #80]	; (8004060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800400e:	695b      	ldr	r3, [r3, #20]
 8004010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004014:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004018:	d102      	bne.n	8004020 <HAL_PWREx_ControlVoltageScaling+0x60>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1f2      	bne.n	8004006 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004020:	4b0f      	ldr	r3, [pc, #60]	; (8004060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800402c:	d110      	bne.n	8004050 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e00f      	b.n	8004052 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004032:	4b0b      	ldr	r3, [pc, #44]	; (8004060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800403a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800403e:	d007      	beq.n	8004050 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004040:	4b07      	ldr	r3, [pc, #28]	; (8004060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004048:	4a05      	ldr	r2, [pc, #20]	; (8004060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800404a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800404e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3714      	adds	r7, #20
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	40007000 	.word	0x40007000
 8004064:	20000028 	.word	0x20000028
 8004068:	431bde83 	.word	0x431bde83

0800406c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004070:	4b05      	ldr	r3, [pc, #20]	; (8004088 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	4a04      	ldr	r2, [pc, #16]	; (8004088 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004076:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800407a:	6053      	str	r3, [r2, #4]
}
 800407c:	bf00      	nop
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	40007000 	.word	0x40007000

0800408c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800408c:	b480      	push	{r7}
 800408e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004090:	4b05      	ldr	r3, [pc, #20]	; (80040a8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	4a04      	ldr	r2, [pc, #16]	; (80040a8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004096:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800409a:	6053      	str	r3, [r2, #4]
}
 800409c:	bf00      	nop
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	40007000 	.word	0x40007000

080040ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b088      	sub	sp, #32
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e3ca      	b.n	8004854 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040be:	4b97      	ldr	r3, [pc, #604]	; (800431c <HAL_RCC_OscConfig+0x270>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f003 030c 	and.w	r3, r3, #12
 80040c6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040c8:	4b94      	ldr	r3, [pc, #592]	; (800431c <HAL_RCC_OscConfig+0x270>)
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	f003 0303 	and.w	r3, r3, #3
 80040d0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0310 	and.w	r3, r3, #16
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f000 80e4 	beq.w	80042a8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d007      	beq.n	80040f6 <HAL_RCC_OscConfig+0x4a>
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	2b0c      	cmp	r3, #12
 80040ea:	f040 808b 	bne.w	8004204 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	f040 8087 	bne.w	8004204 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80040f6:	4b89      	ldr	r3, [pc, #548]	; (800431c <HAL_RCC_OscConfig+0x270>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d005      	beq.n	800410e <HAL_RCC_OscConfig+0x62>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d101      	bne.n	800410e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e3a2      	b.n	8004854 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a1a      	ldr	r2, [r3, #32]
 8004112:	4b82      	ldr	r3, [pc, #520]	; (800431c <HAL_RCC_OscConfig+0x270>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0308 	and.w	r3, r3, #8
 800411a:	2b00      	cmp	r3, #0
 800411c:	d004      	beq.n	8004128 <HAL_RCC_OscConfig+0x7c>
 800411e:	4b7f      	ldr	r3, [pc, #508]	; (800431c <HAL_RCC_OscConfig+0x270>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004126:	e005      	b.n	8004134 <HAL_RCC_OscConfig+0x88>
 8004128:	4b7c      	ldr	r3, [pc, #496]	; (800431c <HAL_RCC_OscConfig+0x270>)
 800412a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800412e:	091b      	lsrs	r3, r3, #4
 8004130:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004134:	4293      	cmp	r3, r2
 8004136:	d223      	bcs.n	8004180 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	4618      	mov	r0, r3
 800413e:	f000 fd55 	bl	8004bec <RCC_SetFlashLatencyFromMSIRange>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d001      	beq.n	800414c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e383      	b.n	8004854 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800414c:	4b73      	ldr	r3, [pc, #460]	; (800431c <HAL_RCC_OscConfig+0x270>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a72      	ldr	r2, [pc, #456]	; (800431c <HAL_RCC_OscConfig+0x270>)
 8004152:	f043 0308 	orr.w	r3, r3, #8
 8004156:	6013      	str	r3, [r2, #0]
 8004158:	4b70      	ldr	r3, [pc, #448]	; (800431c <HAL_RCC_OscConfig+0x270>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	496d      	ldr	r1, [pc, #436]	; (800431c <HAL_RCC_OscConfig+0x270>)
 8004166:	4313      	orrs	r3, r2
 8004168:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800416a:	4b6c      	ldr	r3, [pc, #432]	; (800431c <HAL_RCC_OscConfig+0x270>)
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	021b      	lsls	r3, r3, #8
 8004178:	4968      	ldr	r1, [pc, #416]	; (800431c <HAL_RCC_OscConfig+0x270>)
 800417a:	4313      	orrs	r3, r2
 800417c:	604b      	str	r3, [r1, #4]
 800417e:	e025      	b.n	80041cc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004180:	4b66      	ldr	r3, [pc, #408]	; (800431c <HAL_RCC_OscConfig+0x270>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a65      	ldr	r2, [pc, #404]	; (800431c <HAL_RCC_OscConfig+0x270>)
 8004186:	f043 0308 	orr.w	r3, r3, #8
 800418a:	6013      	str	r3, [r2, #0]
 800418c:	4b63      	ldr	r3, [pc, #396]	; (800431c <HAL_RCC_OscConfig+0x270>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a1b      	ldr	r3, [r3, #32]
 8004198:	4960      	ldr	r1, [pc, #384]	; (800431c <HAL_RCC_OscConfig+0x270>)
 800419a:	4313      	orrs	r3, r2
 800419c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800419e:	4b5f      	ldr	r3, [pc, #380]	; (800431c <HAL_RCC_OscConfig+0x270>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	021b      	lsls	r3, r3, #8
 80041ac:	495b      	ldr	r1, [pc, #364]	; (800431c <HAL_RCC_OscConfig+0x270>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d109      	bne.n	80041cc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 fd15 	bl	8004bec <RCC_SetFlashLatencyFromMSIRange>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d001      	beq.n	80041cc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e343      	b.n	8004854 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041cc:	f000 fc4a 	bl	8004a64 <HAL_RCC_GetSysClockFreq>
 80041d0:	4602      	mov	r2, r0
 80041d2:	4b52      	ldr	r3, [pc, #328]	; (800431c <HAL_RCC_OscConfig+0x270>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	091b      	lsrs	r3, r3, #4
 80041d8:	f003 030f 	and.w	r3, r3, #15
 80041dc:	4950      	ldr	r1, [pc, #320]	; (8004320 <HAL_RCC_OscConfig+0x274>)
 80041de:	5ccb      	ldrb	r3, [r1, r3]
 80041e0:	f003 031f 	and.w	r3, r3, #31
 80041e4:	fa22 f303 	lsr.w	r3, r2, r3
 80041e8:	4a4e      	ldr	r2, [pc, #312]	; (8004324 <HAL_RCC_OscConfig+0x278>)
 80041ea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80041ec:	4b4e      	ldr	r3, [pc, #312]	; (8004328 <HAL_RCC_OscConfig+0x27c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7fc f983 	bl	80004fc <HAL_InitTick>
 80041f6:	4603      	mov	r3, r0
 80041f8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80041fa:	7bfb      	ldrb	r3, [r7, #15]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d052      	beq.n	80042a6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004200:	7bfb      	ldrb	r3, [r7, #15]
 8004202:	e327      	b.n	8004854 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d032      	beq.n	8004272 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800420c:	4b43      	ldr	r3, [pc, #268]	; (800431c <HAL_RCC_OscConfig+0x270>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a42      	ldr	r2, [pc, #264]	; (800431c <HAL_RCC_OscConfig+0x270>)
 8004212:	f043 0301 	orr.w	r3, r3, #1
 8004216:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004218:	f7fc f9c0 	bl	800059c <HAL_GetTick>
 800421c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800421e:	e008      	b.n	8004232 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004220:	f7fc f9bc 	bl	800059c <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e310      	b.n	8004854 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004232:	4b3a      	ldr	r3, [pc, #232]	; (800431c <HAL_RCC_OscConfig+0x270>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d0f0      	beq.n	8004220 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800423e:	4b37      	ldr	r3, [pc, #220]	; (800431c <HAL_RCC_OscConfig+0x270>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a36      	ldr	r2, [pc, #216]	; (800431c <HAL_RCC_OscConfig+0x270>)
 8004244:	f043 0308 	orr.w	r3, r3, #8
 8004248:	6013      	str	r3, [r2, #0]
 800424a:	4b34      	ldr	r3, [pc, #208]	; (800431c <HAL_RCC_OscConfig+0x270>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	4931      	ldr	r1, [pc, #196]	; (800431c <HAL_RCC_OscConfig+0x270>)
 8004258:	4313      	orrs	r3, r2
 800425a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800425c:	4b2f      	ldr	r3, [pc, #188]	; (800431c <HAL_RCC_OscConfig+0x270>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	69db      	ldr	r3, [r3, #28]
 8004268:	021b      	lsls	r3, r3, #8
 800426a:	492c      	ldr	r1, [pc, #176]	; (800431c <HAL_RCC_OscConfig+0x270>)
 800426c:	4313      	orrs	r3, r2
 800426e:	604b      	str	r3, [r1, #4]
 8004270:	e01a      	b.n	80042a8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004272:	4b2a      	ldr	r3, [pc, #168]	; (800431c <HAL_RCC_OscConfig+0x270>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a29      	ldr	r2, [pc, #164]	; (800431c <HAL_RCC_OscConfig+0x270>)
 8004278:	f023 0301 	bic.w	r3, r3, #1
 800427c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800427e:	f7fc f98d 	bl	800059c <HAL_GetTick>
 8004282:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004284:	e008      	b.n	8004298 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004286:	f7fc f989 	bl	800059c <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2b02      	cmp	r3, #2
 8004292:	d901      	bls.n	8004298 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e2dd      	b.n	8004854 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004298:	4b20      	ldr	r3, [pc, #128]	; (800431c <HAL_RCC_OscConfig+0x270>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0302 	and.w	r3, r3, #2
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1f0      	bne.n	8004286 <HAL_RCC_OscConfig+0x1da>
 80042a4:	e000      	b.n	80042a8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042a6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0301 	and.w	r3, r3, #1
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d074      	beq.n	800439e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	2b08      	cmp	r3, #8
 80042b8:	d005      	beq.n	80042c6 <HAL_RCC_OscConfig+0x21a>
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	2b0c      	cmp	r3, #12
 80042be:	d10e      	bne.n	80042de <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	2b03      	cmp	r3, #3
 80042c4:	d10b      	bne.n	80042de <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c6:	4b15      	ldr	r3, [pc, #84]	; (800431c <HAL_RCC_OscConfig+0x270>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d064      	beq.n	800439c <HAL_RCC_OscConfig+0x2f0>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d160      	bne.n	800439c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e2ba      	b.n	8004854 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042e6:	d106      	bne.n	80042f6 <HAL_RCC_OscConfig+0x24a>
 80042e8:	4b0c      	ldr	r3, [pc, #48]	; (800431c <HAL_RCC_OscConfig+0x270>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a0b      	ldr	r2, [pc, #44]	; (800431c <HAL_RCC_OscConfig+0x270>)
 80042ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042f2:	6013      	str	r3, [r2, #0]
 80042f4:	e026      	b.n	8004344 <HAL_RCC_OscConfig+0x298>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042fe:	d115      	bne.n	800432c <HAL_RCC_OscConfig+0x280>
 8004300:	4b06      	ldr	r3, [pc, #24]	; (800431c <HAL_RCC_OscConfig+0x270>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a05      	ldr	r2, [pc, #20]	; (800431c <HAL_RCC_OscConfig+0x270>)
 8004306:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800430a:	6013      	str	r3, [r2, #0]
 800430c:	4b03      	ldr	r3, [pc, #12]	; (800431c <HAL_RCC_OscConfig+0x270>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a02      	ldr	r2, [pc, #8]	; (800431c <HAL_RCC_OscConfig+0x270>)
 8004312:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004316:	6013      	str	r3, [r2, #0]
 8004318:	e014      	b.n	8004344 <HAL_RCC_OscConfig+0x298>
 800431a:	bf00      	nop
 800431c:	40021000 	.word	0x40021000
 8004320:	0800d960 	.word	0x0800d960
 8004324:	20000028 	.word	0x20000028
 8004328:	20000000 	.word	0x20000000
 800432c:	4ba0      	ldr	r3, [pc, #640]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a9f      	ldr	r2, [pc, #636]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 8004332:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004336:	6013      	str	r3, [r2, #0]
 8004338:	4b9d      	ldr	r3, [pc, #628]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a9c      	ldr	r2, [pc, #624]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 800433e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004342:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d013      	beq.n	8004374 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434c:	f7fc f926 	bl	800059c <HAL_GetTick>
 8004350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004352:	e008      	b.n	8004366 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004354:	f7fc f922 	bl	800059c <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	2b64      	cmp	r3, #100	; 0x64
 8004360:	d901      	bls.n	8004366 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e276      	b.n	8004854 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004366:	4b92      	ldr	r3, [pc, #584]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d0f0      	beq.n	8004354 <HAL_RCC_OscConfig+0x2a8>
 8004372:	e014      	b.n	800439e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004374:	f7fc f912 	bl	800059c <HAL_GetTick>
 8004378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800437c:	f7fc f90e 	bl	800059c <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b64      	cmp	r3, #100	; 0x64
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e262      	b.n	8004854 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800438e:	4b88      	ldr	r3, [pc, #544]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1f0      	bne.n	800437c <HAL_RCC_OscConfig+0x2d0>
 800439a:	e000      	b.n	800439e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800439c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d060      	beq.n	800446c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	2b04      	cmp	r3, #4
 80043ae:	d005      	beq.n	80043bc <HAL_RCC_OscConfig+0x310>
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	2b0c      	cmp	r3, #12
 80043b4:	d119      	bne.n	80043ea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d116      	bne.n	80043ea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043bc:	4b7c      	ldr	r3, [pc, #496]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d005      	beq.n	80043d4 <HAL_RCC_OscConfig+0x328>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d101      	bne.n	80043d4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e23f      	b.n	8004854 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043d4:	4b76      	ldr	r3, [pc, #472]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	061b      	lsls	r3, r3, #24
 80043e2:	4973      	ldr	r1, [pc, #460]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043e8:	e040      	b.n	800446c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d023      	beq.n	800443a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043f2:	4b6f      	ldr	r3, [pc, #444]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a6e      	ldr	r2, [pc, #440]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 80043f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fe:	f7fc f8cd 	bl	800059c <HAL_GetTick>
 8004402:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004404:	e008      	b.n	8004418 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004406:	f7fc f8c9 	bl	800059c <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d901      	bls.n	8004418 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e21d      	b.n	8004854 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004418:	4b65      	ldr	r3, [pc, #404]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004420:	2b00      	cmp	r3, #0
 8004422:	d0f0      	beq.n	8004406 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004424:	4b62      	ldr	r3, [pc, #392]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	061b      	lsls	r3, r3, #24
 8004432:	495f      	ldr	r1, [pc, #380]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 8004434:	4313      	orrs	r3, r2
 8004436:	604b      	str	r3, [r1, #4]
 8004438:	e018      	b.n	800446c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800443a:	4b5d      	ldr	r3, [pc, #372]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a5c      	ldr	r2, [pc, #368]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 8004440:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004444:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004446:	f7fc f8a9 	bl	800059c <HAL_GetTick>
 800444a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800444c:	e008      	b.n	8004460 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800444e:	f7fc f8a5 	bl	800059c <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	2b02      	cmp	r3, #2
 800445a:	d901      	bls.n	8004460 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e1f9      	b.n	8004854 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004460:	4b53      	ldr	r3, [pc, #332]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1f0      	bne.n	800444e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0308 	and.w	r3, r3, #8
 8004474:	2b00      	cmp	r3, #0
 8004476:	d03c      	beq.n	80044f2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d01c      	beq.n	80044ba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004480:	4b4b      	ldr	r3, [pc, #300]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 8004482:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004486:	4a4a      	ldr	r2, [pc, #296]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 8004488:	f043 0301 	orr.w	r3, r3, #1
 800448c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004490:	f7fc f884 	bl	800059c <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004496:	e008      	b.n	80044aa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004498:	f7fc f880 	bl	800059c <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e1d4      	b.n	8004854 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044aa:	4b41      	ldr	r3, [pc, #260]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 80044ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d0ef      	beq.n	8004498 <HAL_RCC_OscConfig+0x3ec>
 80044b8:	e01b      	b.n	80044f2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044ba:	4b3d      	ldr	r3, [pc, #244]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 80044bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044c0:	4a3b      	ldr	r2, [pc, #236]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 80044c2:	f023 0301 	bic.w	r3, r3, #1
 80044c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ca:	f7fc f867 	bl	800059c <HAL_GetTick>
 80044ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044d0:	e008      	b.n	80044e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044d2:	f7fc f863 	bl	800059c <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d901      	bls.n	80044e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e1b7      	b.n	8004854 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044e4:	4b32      	ldr	r3, [pc, #200]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 80044e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1ef      	bne.n	80044d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0304 	and.w	r3, r3, #4
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f000 80a6 	beq.w	800464c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004500:	2300      	movs	r3, #0
 8004502:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004504:	4b2a      	ldr	r3, [pc, #168]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 8004506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10d      	bne.n	800452c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004510:	4b27      	ldr	r3, [pc, #156]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 8004512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004514:	4a26      	ldr	r2, [pc, #152]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 8004516:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800451a:	6593      	str	r3, [r2, #88]	; 0x58
 800451c:	4b24      	ldr	r3, [pc, #144]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 800451e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004524:	60bb      	str	r3, [r7, #8]
 8004526:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004528:	2301      	movs	r3, #1
 800452a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800452c:	4b21      	ldr	r3, [pc, #132]	; (80045b4 <HAL_RCC_OscConfig+0x508>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004534:	2b00      	cmp	r3, #0
 8004536:	d118      	bne.n	800456a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004538:	4b1e      	ldr	r3, [pc, #120]	; (80045b4 <HAL_RCC_OscConfig+0x508>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a1d      	ldr	r2, [pc, #116]	; (80045b4 <HAL_RCC_OscConfig+0x508>)
 800453e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004542:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004544:	f7fc f82a 	bl	800059c <HAL_GetTick>
 8004548:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800454a:	e008      	b.n	800455e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800454c:	f7fc f826 	bl	800059c <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b02      	cmp	r3, #2
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e17a      	b.n	8004854 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800455e:	4b15      	ldr	r3, [pc, #84]	; (80045b4 <HAL_RCC_OscConfig+0x508>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004566:	2b00      	cmp	r3, #0
 8004568:	d0f0      	beq.n	800454c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d108      	bne.n	8004584 <HAL_RCC_OscConfig+0x4d8>
 8004572:	4b0f      	ldr	r3, [pc, #60]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 8004574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004578:	4a0d      	ldr	r2, [pc, #52]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 800457a:	f043 0301 	orr.w	r3, r3, #1
 800457e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004582:	e029      	b.n	80045d8 <HAL_RCC_OscConfig+0x52c>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	2b05      	cmp	r3, #5
 800458a:	d115      	bne.n	80045b8 <HAL_RCC_OscConfig+0x50c>
 800458c:	4b08      	ldr	r3, [pc, #32]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 800458e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004592:	4a07      	ldr	r2, [pc, #28]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 8004594:	f043 0304 	orr.w	r3, r3, #4
 8004598:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800459c:	4b04      	ldr	r3, [pc, #16]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 800459e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a2:	4a03      	ldr	r2, [pc, #12]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 80045a4:	f043 0301 	orr.w	r3, r3, #1
 80045a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045ac:	e014      	b.n	80045d8 <HAL_RCC_OscConfig+0x52c>
 80045ae:	bf00      	nop
 80045b0:	40021000 	.word	0x40021000
 80045b4:	40007000 	.word	0x40007000
 80045b8:	4b9c      	ldr	r3, [pc, #624]	; (800482c <HAL_RCC_OscConfig+0x780>)
 80045ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045be:	4a9b      	ldr	r2, [pc, #620]	; (800482c <HAL_RCC_OscConfig+0x780>)
 80045c0:	f023 0301 	bic.w	r3, r3, #1
 80045c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045c8:	4b98      	ldr	r3, [pc, #608]	; (800482c <HAL_RCC_OscConfig+0x780>)
 80045ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ce:	4a97      	ldr	r2, [pc, #604]	; (800482c <HAL_RCC_OscConfig+0x780>)
 80045d0:	f023 0304 	bic.w	r3, r3, #4
 80045d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d016      	beq.n	800460e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e0:	f7fb ffdc 	bl	800059c <HAL_GetTick>
 80045e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045e6:	e00a      	b.n	80045fe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e8:	f7fb ffd8 	bl	800059c <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e12a      	b.n	8004854 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045fe:	4b8b      	ldr	r3, [pc, #556]	; (800482c <HAL_RCC_OscConfig+0x780>)
 8004600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d0ed      	beq.n	80045e8 <HAL_RCC_OscConfig+0x53c>
 800460c:	e015      	b.n	800463a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800460e:	f7fb ffc5 	bl	800059c <HAL_GetTick>
 8004612:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004614:	e00a      	b.n	800462c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004616:	f7fb ffc1 	bl	800059c <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	f241 3288 	movw	r2, #5000	; 0x1388
 8004624:	4293      	cmp	r3, r2
 8004626:	d901      	bls.n	800462c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e113      	b.n	8004854 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800462c:	4b7f      	ldr	r3, [pc, #508]	; (800482c <HAL_RCC_OscConfig+0x780>)
 800462e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1ed      	bne.n	8004616 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800463a:	7ffb      	ldrb	r3, [r7, #31]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d105      	bne.n	800464c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004640:	4b7a      	ldr	r3, [pc, #488]	; (800482c <HAL_RCC_OscConfig+0x780>)
 8004642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004644:	4a79      	ldr	r2, [pc, #484]	; (800482c <HAL_RCC_OscConfig+0x780>)
 8004646:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800464a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004650:	2b00      	cmp	r3, #0
 8004652:	f000 80fe 	beq.w	8004852 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465a:	2b02      	cmp	r3, #2
 800465c:	f040 80d0 	bne.w	8004800 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004660:	4b72      	ldr	r3, [pc, #456]	; (800482c <HAL_RCC_OscConfig+0x780>)
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	f003 0203 	and.w	r2, r3, #3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004670:	429a      	cmp	r2, r3
 8004672:	d130      	bne.n	80046d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467e:	3b01      	subs	r3, #1
 8004680:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004682:	429a      	cmp	r2, r3
 8004684:	d127      	bne.n	80046d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004690:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004692:	429a      	cmp	r2, r3
 8004694:	d11f      	bne.n	80046d6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046a0:	2a07      	cmp	r2, #7
 80046a2:	bf14      	ite	ne
 80046a4:	2201      	movne	r2, #1
 80046a6:	2200      	moveq	r2, #0
 80046a8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d113      	bne.n	80046d6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b8:	085b      	lsrs	r3, r3, #1
 80046ba:	3b01      	subs	r3, #1
 80046bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80046be:	429a      	cmp	r2, r3
 80046c0:	d109      	bne.n	80046d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046cc:	085b      	lsrs	r3, r3, #1
 80046ce:	3b01      	subs	r3, #1
 80046d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d06e      	beq.n	80047b4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	2b0c      	cmp	r3, #12
 80046da:	d069      	beq.n	80047b0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80046dc:	4b53      	ldr	r3, [pc, #332]	; (800482c <HAL_RCC_OscConfig+0x780>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d105      	bne.n	80046f4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80046e8:	4b50      	ldr	r3, [pc, #320]	; (800482c <HAL_RCC_OscConfig+0x780>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e0ad      	b.n	8004854 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80046f8:	4b4c      	ldr	r3, [pc, #304]	; (800482c <HAL_RCC_OscConfig+0x780>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a4b      	ldr	r2, [pc, #300]	; (800482c <HAL_RCC_OscConfig+0x780>)
 80046fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004702:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004704:	f7fb ff4a 	bl	800059c <HAL_GetTick>
 8004708:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800470c:	f7fb ff46 	bl	800059c <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e09a      	b.n	8004854 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800471e:	4b43      	ldr	r3, [pc, #268]	; (800482c <HAL_RCC_OscConfig+0x780>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1f0      	bne.n	800470c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800472a:	4b40      	ldr	r3, [pc, #256]	; (800482c <HAL_RCC_OscConfig+0x780>)
 800472c:	68da      	ldr	r2, [r3, #12]
 800472e:	4b40      	ldr	r3, [pc, #256]	; (8004830 <HAL_RCC_OscConfig+0x784>)
 8004730:	4013      	ands	r3, r2
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800473a:	3a01      	subs	r2, #1
 800473c:	0112      	lsls	r2, r2, #4
 800473e:	4311      	orrs	r1, r2
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004744:	0212      	lsls	r2, r2, #8
 8004746:	4311      	orrs	r1, r2
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800474c:	0852      	lsrs	r2, r2, #1
 800474e:	3a01      	subs	r2, #1
 8004750:	0552      	lsls	r2, r2, #21
 8004752:	4311      	orrs	r1, r2
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004758:	0852      	lsrs	r2, r2, #1
 800475a:	3a01      	subs	r2, #1
 800475c:	0652      	lsls	r2, r2, #25
 800475e:	4311      	orrs	r1, r2
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004764:	0912      	lsrs	r2, r2, #4
 8004766:	0452      	lsls	r2, r2, #17
 8004768:	430a      	orrs	r2, r1
 800476a:	4930      	ldr	r1, [pc, #192]	; (800482c <HAL_RCC_OscConfig+0x780>)
 800476c:	4313      	orrs	r3, r2
 800476e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004770:	4b2e      	ldr	r3, [pc, #184]	; (800482c <HAL_RCC_OscConfig+0x780>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a2d      	ldr	r2, [pc, #180]	; (800482c <HAL_RCC_OscConfig+0x780>)
 8004776:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800477a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800477c:	4b2b      	ldr	r3, [pc, #172]	; (800482c <HAL_RCC_OscConfig+0x780>)
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	4a2a      	ldr	r2, [pc, #168]	; (800482c <HAL_RCC_OscConfig+0x780>)
 8004782:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004786:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004788:	f7fb ff08 	bl	800059c <HAL_GetTick>
 800478c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800478e:	e008      	b.n	80047a2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004790:	f7fb ff04 	bl	800059c <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b02      	cmp	r3, #2
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e058      	b.n	8004854 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047a2:	4b22      	ldr	r3, [pc, #136]	; (800482c <HAL_RCC_OscConfig+0x780>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d0f0      	beq.n	8004790 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047ae:	e050      	b.n	8004852 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e04f      	b.n	8004854 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047b4:	4b1d      	ldr	r3, [pc, #116]	; (800482c <HAL_RCC_OscConfig+0x780>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d148      	bne.n	8004852 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80047c0:	4b1a      	ldr	r3, [pc, #104]	; (800482c <HAL_RCC_OscConfig+0x780>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a19      	ldr	r2, [pc, #100]	; (800482c <HAL_RCC_OscConfig+0x780>)
 80047c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047cc:	4b17      	ldr	r3, [pc, #92]	; (800482c <HAL_RCC_OscConfig+0x780>)
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	4a16      	ldr	r2, [pc, #88]	; (800482c <HAL_RCC_OscConfig+0x780>)
 80047d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80047d8:	f7fb fee0 	bl	800059c <HAL_GetTick>
 80047dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047de:	e008      	b.n	80047f2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047e0:	f7fb fedc 	bl	800059c <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e030      	b.n	8004854 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047f2:	4b0e      	ldr	r3, [pc, #56]	; (800482c <HAL_RCC_OscConfig+0x780>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d0f0      	beq.n	80047e0 <HAL_RCC_OscConfig+0x734>
 80047fe:	e028      	b.n	8004852 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	2b0c      	cmp	r3, #12
 8004804:	d023      	beq.n	800484e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004806:	4b09      	ldr	r3, [pc, #36]	; (800482c <HAL_RCC_OscConfig+0x780>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a08      	ldr	r2, [pc, #32]	; (800482c <HAL_RCC_OscConfig+0x780>)
 800480c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004810:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004812:	f7fb fec3 	bl	800059c <HAL_GetTick>
 8004816:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004818:	e00c      	b.n	8004834 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800481a:	f7fb febf 	bl	800059c <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	2b02      	cmp	r3, #2
 8004826:	d905      	bls.n	8004834 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e013      	b.n	8004854 <HAL_RCC_OscConfig+0x7a8>
 800482c:	40021000 	.word	0x40021000
 8004830:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004834:	4b09      	ldr	r3, [pc, #36]	; (800485c <HAL_RCC_OscConfig+0x7b0>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1ec      	bne.n	800481a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004840:	4b06      	ldr	r3, [pc, #24]	; (800485c <HAL_RCC_OscConfig+0x7b0>)
 8004842:	68da      	ldr	r2, [r3, #12]
 8004844:	4905      	ldr	r1, [pc, #20]	; (800485c <HAL_RCC_OscConfig+0x7b0>)
 8004846:	4b06      	ldr	r3, [pc, #24]	; (8004860 <HAL_RCC_OscConfig+0x7b4>)
 8004848:	4013      	ands	r3, r2
 800484a:	60cb      	str	r3, [r1, #12]
 800484c:	e001      	b.n	8004852 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e000      	b.n	8004854 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	3720      	adds	r7, #32
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	40021000 	.word	0x40021000
 8004860:	feeefffc 	.word	0xfeeefffc

08004864 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d101      	bne.n	8004878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e0e7      	b.n	8004a48 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004878:	4b75      	ldr	r3, [pc, #468]	; (8004a50 <HAL_RCC_ClockConfig+0x1ec>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0307 	and.w	r3, r3, #7
 8004880:	683a      	ldr	r2, [r7, #0]
 8004882:	429a      	cmp	r2, r3
 8004884:	d910      	bls.n	80048a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004886:	4b72      	ldr	r3, [pc, #456]	; (8004a50 <HAL_RCC_ClockConfig+0x1ec>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f023 0207 	bic.w	r2, r3, #7
 800488e:	4970      	ldr	r1, [pc, #448]	; (8004a50 <HAL_RCC_ClockConfig+0x1ec>)
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	4313      	orrs	r3, r2
 8004894:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004896:	4b6e      	ldr	r3, [pc, #440]	; (8004a50 <HAL_RCC_ClockConfig+0x1ec>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0307 	and.w	r3, r3, #7
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d001      	beq.n	80048a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e0cf      	b.n	8004a48 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d010      	beq.n	80048d6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689a      	ldr	r2, [r3, #8]
 80048b8:	4b66      	ldr	r3, [pc, #408]	; (8004a54 <HAL_RCC_ClockConfig+0x1f0>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d908      	bls.n	80048d6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048c4:	4b63      	ldr	r3, [pc, #396]	; (8004a54 <HAL_RCC_ClockConfig+0x1f0>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	4960      	ldr	r1, [pc, #384]	; (8004a54 <HAL_RCC_ClockConfig+0x1f0>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d04c      	beq.n	800497c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	2b03      	cmp	r3, #3
 80048e8:	d107      	bne.n	80048fa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048ea:	4b5a      	ldr	r3, [pc, #360]	; (8004a54 <HAL_RCC_ClockConfig+0x1f0>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d121      	bne.n	800493a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e0a6      	b.n	8004a48 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d107      	bne.n	8004912 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004902:	4b54      	ldr	r3, [pc, #336]	; (8004a54 <HAL_RCC_ClockConfig+0x1f0>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d115      	bne.n	800493a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e09a      	b.n	8004a48 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d107      	bne.n	800492a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800491a:	4b4e      	ldr	r3, [pc, #312]	; (8004a54 <HAL_RCC_ClockConfig+0x1f0>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d109      	bne.n	800493a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e08e      	b.n	8004a48 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800492a:	4b4a      	ldr	r3, [pc, #296]	; (8004a54 <HAL_RCC_ClockConfig+0x1f0>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004932:	2b00      	cmp	r3, #0
 8004934:	d101      	bne.n	800493a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e086      	b.n	8004a48 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800493a:	4b46      	ldr	r3, [pc, #280]	; (8004a54 <HAL_RCC_ClockConfig+0x1f0>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f023 0203 	bic.w	r2, r3, #3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	4943      	ldr	r1, [pc, #268]	; (8004a54 <HAL_RCC_ClockConfig+0x1f0>)
 8004948:	4313      	orrs	r3, r2
 800494a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800494c:	f7fb fe26 	bl	800059c <HAL_GetTick>
 8004950:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004952:	e00a      	b.n	800496a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004954:	f7fb fe22 	bl	800059c <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004962:	4293      	cmp	r3, r2
 8004964:	d901      	bls.n	800496a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e06e      	b.n	8004a48 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800496a:	4b3a      	ldr	r3, [pc, #232]	; (8004a54 <HAL_RCC_ClockConfig+0x1f0>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f003 020c 	and.w	r2, r3, #12
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	429a      	cmp	r2, r3
 800497a:	d1eb      	bne.n	8004954 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0302 	and.w	r3, r3, #2
 8004984:	2b00      	cmp	r3, #0
 8004986:	d010      	beq.n	80049aa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689a      	ldr	r2, [r3, #8]
 800498c:	4b31      	ldr	r3, [pc, #196]	; (8004a54 <HAL_RCC_ClockConfig+0x1f0>)
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004994:	429a      	cmp	r2, r3
 8004996:	d208      	bcs.n	80049aa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004998:	4b2e      	ldr	r3, [pc, #184]	; (8004a54 <HAL_RCC_ClockConfig+0x1f0>)
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	492b      	ldr	r1, [pc, #172]	; (8004a54 <HAL_RCC_ClockConfig+0x1f0>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049aa:	4b29      	ldr	r3, [pc, #164]	; (8004a50 <HAL_RCC_ClockConfig+0x1ec>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0307 	and.w	r3, r3, #7
 80049b2:	683a      	ldr	r2, [r7, #0]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d210      	bcs.n	80049da <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049b8:	4b25      	ldr	r3, [pc, #148]	; (8004a50 <HAL_RCC_ClockConfig+0x1ec>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f023 0207 	bic.w	r2, r3, #7
 80049c0:	4923      	ldr	r1, [pc, #140]	; (8004a50 <HAL_RCC_ClockConfig+0x1ec>)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049c8:	4b21      	ldr	r3, [pc, #132]	; (8004a50 <HAL_RCC_ClockConfig+0x1ec>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0307 	and.w	r3, r3, #7
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d001      	beq.n	80049da <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e036      	b.n	8004a48 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0304 	and.w	r3, r3, #4
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d008      	beq.n	80049f8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049e6:	4b1b      	ldr	r3, [pc, #108]	; (8004a54 <HAL_RCC_ClockConfig+0x1f0>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	4918      	ldr	r1, [pc, #96]	; (8004a54 <HAL_RCC_ClockConfig+0x1f0>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0308 	and.w	r3, r3, #8
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d009      	beq.n	8004a18 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a04:	4b13      	ldr	r3, [pc, #76]	; (8004a54 <HAL_RCC_ClockConfig+0x1f0>)
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	00db      	lsls	r3, r3, #3
 8004a12:	4910      	ldr	r1, [pc, #64]	; (8004a54 <HAL_RCC_ClockConfig+0x1f0>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a18:	f000 f824 	bl	8004a64 <HAL_RCC_GetSysClockFreq>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	4b0d      	ldr	r3, [pc, #52]	; (8004a54 <HAL_RCC_ClockConfig+0x1f0>)
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	091b      	lsrs	r3, r3, #4
 8004a24:	f003 030f 	and.w	r3, r3, #15
 8004a28:	490b      	ldr	r1, [pc, #44]	; (8004a58 <HAL_RCC_ClockConfig+0x1f4>)
 8004a2a:	5ccb      	ldrb	r3, [r1, r3]
 8004a2c:	f003 031f 	and.w	r3, r3, #31
 8004a30:	fa22 f303 	lsr.w	r3, r2, r3
 8004a34:	4a09      	ldr	r2, [pc, #36]	; (8004a5c <HAL_RCC_ClockConfig+0x1f8>)
 8004a36:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004a38:	4b09      	ldr	r3, [pc, #36]	; (8004a60 <HAL_RCC_ClockConfig+0x1fc>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7fb fd5d 	bl	80004fc <HAL_InitTick>
 8004a42:	4603      	mov	r3, r0
 8004a44:	72fb      	strb	r3, [r7, #11]

  return status;
 8004a46:	7afb      	ldrb	r3, [r7, #11]
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	40022000 	.word	0x40022000
 8004a54:	40021000 	.word	0x40021000
 8004a58:	0800d960 	.word	0x0800d960
 8004a5c:	20000028 	.word	0x20000028
 8004a60:	20000000 	.word	0x20000000

08004a64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b089      	sub	sp, #36	; 0x24
 8004a68:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	61fb      	str	r3, [r7, #28]
 8004a6e:	2300      	movs	r3, #0
 8004a70:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a72:	4b3e      	ldr	r3, [pc, #248]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f003 030c 	and.w	r3, r3, #12
 8004a7a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a7c:	4b3b      	ldr	r3, [pc, #236]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	f003 0303 	and.w	r3, r3, #3
 8004a84:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d005      	beq.n	8004a98 <HAL_RCC_GetSysClockFreq+0x34>
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	2b0c      	cmp	r3, #12
 8004a90:	d121      	bne.n	8004ad6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d11e      	bne.n	8004ad6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004a98:	4b34      	ldr	r3, [pc, #208]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0308 	and.w	r3, r3, #8
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d107      	bne.n	8004ab4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004aa4:	4b31      	ldr	r3, [pc, #196]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x108>)
 8004aa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004aaa:	0a1b      	lsrs	r3, r3, #8
 8004aac:	f003 030f 	and.w	r3, r3, #15
 8004ab0:	61fb      	str	r3, [r7, #28]
 8004ab2:	e005      	b.n	8004ac0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ab4:	4b2d      	ldr	r3, [pc, #180]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	091b      	lsrs	r3, r3, #4
 8004aba:	f003 030f 	and.w	r3, r3, #15
 8004abe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004ac0:	4a2b      	ldr	r2, [pc, #172]	; (8004b70 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ac8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10d      	bne.n	8004aec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ad4:	e00a      	b.n	8004aec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	2b04      	cmp	r3, #4
 8004ada:	d102      	bne.n	8004ae2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004adc:	4b25      	ldr	r3, [pc, #148]	; (8004b74 <HAL_RCC_GetSysClockFreq+0x110>)
 8004ade:	61bb      	str	r3, [r7, #24]
 8004ae0:	e004      	b.n	8004aec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	2b08      	cmp	r3, #8
 8004ae6:	d101      	bne.n	8004aec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ae8:	4b23      	ldr	r3, [pc, #140]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x114>)
 8004aea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	2b0c      	cmp	r3, #12
 8004af0:	d134      	bne.n	8004b5c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004af2:	4b1e      	ldr	r3, [pc, #120]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x108>)
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	f003 0303 	and.w	r3, r3, #3
 8004afa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d003      	beq.n	8004b0a <HAL_RCC_GetSysClockFreq+0xa6>
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	2b03      	cmp	r3, #3
 8004b06:	d003      	beq.n	8004b10 <HAL_RCC_GetSysClockFreq+0xac>
 8004b08:	e005      	b.n	8004b16 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004b0a:	4b1a      	ldr	r3, [pc, #104]	; (8004b74 <HAL_RCC_GetSysClockFreq+0x110>)
 8004b0c:	617b      	str	r3, [r7, #20]
      break;
 8004b0e:	e005      	b.n	8004b1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004b10:	4b19      	ldr	r3, [pc, #100]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b12:	617b      	str	r3, [r7, #20]
      break;
 8004b14:	e002      	b.n	8004b1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	617b      	str	r3, [r7, #20]
      break;
 8004b1a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b1c:	4b13      	ldr	r3, [pc, #76]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	091b      	lsrs	r3, r3, #4
 8004b22:	f003 0307 	and.w	r3, r3, #7
 8004b26:	3301      	adds	r3, #1
 8004b28:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004b2a:	4b10      	ldr	r3, [pc, #64]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	0a1b      	lsrs	r3, r3, #8
 8004b30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b34:	697a      	ldr	r2, [r7, #20]
 8004b36:	fb03 f202 	mul.w	r2, r3, r2
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b40:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b42:	4b0a      	ldr	r3, [pc, #40]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	0e5b      	lsrs	r3, r3, #25
 8004b48:	f003 0303 	and.w	r3, r3, #3
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	005b      	lsls	r3, r3, #1
 8004b50:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004b52:	697a      	ldr	r2, [r7, #20]
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b5a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004b5c:	69bb      	ldr	r3, [r7, #24]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3724      	adds	r7, #36	; 0x24
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	40021000 	.word	0x40021000
 8004b70:	0800d978 	.word	0x0800d978
 8004b74:	00f42400 	.word	0x00f42400
 8004b78:	007a1200 	.word	0x007a1200

08004b7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b80:	4b03      	ldr	r3, [pc, #12]	; (8004b90 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b82:	681b      	ldr	r3, [r3, #0]
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	20000028 	.word	0x20000028

08004b94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b98:	f7ff fff0 	bl	8004b7c <HAL_RCC_GetHCLKFreq>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	4b06      	ldr	r3, [pc, #24]	; (8004bb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	0a1b      	lsrs	r3, r3, #8
 8004ba4:	f003 0307 	and.w	r3, r3, #7
 8004ba8:	4904      	ldr	r1, [pc, #16]	; (8004bbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8004baa:	5ccb      	ldrb	r3, [r1, r3]
 8004bac:	f003 031f 	and.w	r3, r3, #31
 8004bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	40021000 	.word	0x40021000
 8004bbc:	0800d970 	.word	0x0800d970

08004bc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004bc4:	f7ff ffda 	bl	8004b7c <HAL_RCC_GetHCLKFreq>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	4b06      	ldr	r3, [pc, #24]	; (8004be4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	0adb      	lsrs	r3, r3, #11
 8004bd0:	f003 0307 	and.w	r3, r3, #7
 8004bd4:	4904      	ldr	r1, [pc, #16]	; (8004be8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004bd6:	5ccb      	ldrb	r3, [r1, r3]
 8004bd8:	f003 031f 	and.w	r3, r3, #31
 8004bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	40021000 	.word	0x40021000
 8004be8:	0800d970 	.word	0x0800d970

08004bec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004bf8:	4b2a      	ldr	r3, [pc, #168]	; (8004ca4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d003      	beq.n	8004c0c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004c04:	f7ff f9ce 	bl	8003fa4 <HAL_PWREx_GetVoltageRange>
 8004c08:	6178      	str	r0, [r7, #20]
 8004c0a:	e014      	b.n	8004c36 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c0c:	4b25      	ldr	r3, [pc, #148]	; (8004ca4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c10:	4a24      	ldr	r2, [pc, #144]	; (8004ca4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c16:	6593      	str	r3, [r2, #88]	; 0x58
 8004c18:	4b22      	ldr	r3, [pc, #136]	; (8004ca4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c20:	60fb      	str	r3, [r7, #12]
 8004c22:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004c24:	f7ff f9be 	bl	8003fa4 <HAL_PWREx_GetVoltageRange>
 8004c28:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004c2a:	4b1e      	ldr	r3, [pc, #120]	; (8004ca4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c2e:	4a1d      	ldr	r2, [pc, #116]	; (8004ca4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c34:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c3c:	d10b      	bne.n	8004c56 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2b80      	cmp	r3, #128	; 0x80
 8004c42:	d919      	bls.n	8004c78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2ba0      	cmp	r3, #160	; 0xa0
 8004c48:	d902      	bls.n	8004c50 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c4a:	2302      	movs	r3, #2
 8004c4c:	613b      	str	r3, [r7, #16]
 8004c4e:	e013      	b.n	8004c78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c50:	2301      	movs	r3, #1
 8004c52:	613b      	str	r3, [r7, #16]
 8004c54:	e010      	b.n	8004c78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2b80      	cmp	r3, #128	; 0x80
 8004c5a:	d902      	bls.n	8004c62 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	613b      	str	r3, [r7, #16]
 8004c60:	e00a      	b.n	8004c78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2b80      	cmp	r3, #128	; 0x80
 8004c66:	d102      	bne.n	8004c6e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c68:	2302      	movs	r3, #2
 8004c6a:	613b      	str	r3, [r7, #16]
 8004c6c:	e004      	b.n	8004c78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2b70      	cmp	r3, #112	; 0x70
 8004c72:	d101      	bne.n	8004c78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c74:	2301      	movs	r3, #1
 8004c76:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004c78:	4b0b      	ldr	r3, [pc, #44]	; (8004ca8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f023 0207 	bic.w	r2, r3, #7
 8004c80:	4909      	ldr	r1, [pc, #36]	; (8004ca8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004c88:	4b07      	ldr	r3, [pc, #28]	; (8004ca8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0307 	and.w	r3, r3, #7
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d001      	beq.n	8004c9a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e000      	b.n	8004c9c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3718      	adds	r7, #24
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	40021000 	.word	0x40021000
 8004ca8:	40022000 	.word	0x40022000

08004cac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004cb8:	2300      	movs	r3, #0
 8004cba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d041      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ccc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004cd0:	d02a      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004cd2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004cd6:	d824      	bhi.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004cd8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004cdc:	d008      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004cde:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ce2:	d81e      	bhi.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00a      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004ce8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cec:	d010      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004cee:	e018      	b.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004cf0:	4b86      	ldr	r3, [pc, #536]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	4a85      	ldr	r2, [pc, #532]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cfa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004cfc:	e015      	b.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	3304      	adds	r3, #4
 8004d02:	2100      	movs	r1, #0
 8004d04:	4618      	mov	r0, r3
 8004d06:	f001 f829 	bl	8005d5c <RCCEx_PLLSAI1_Config>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d0e:	e00c      	b.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	3320      	adds	r3, #32
 8004d14:	2100      	movs	r1, #0
 8004d16:	4618      	mov	r0, r3
 8004d18:	f001 f914 	bl	8005f44 <RCCEx_PLLSAI2_Config>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d20:	e003      	b.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	74fb      	strb	r3, [r7, #19]
      break;
 8004d26:	e000      	b.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004d28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d2a:	7cfb      	ldrb	r3, [r7, #19]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10b      	bne.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d30:	4b76      	ldr	r3, [pc, #472]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d36:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d3e:	4973      	ldr	r1, [pc, #460]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004d46:	e001      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d48:	7cfb      	ldrb	r3, [r7, #19]
 8004d4a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d041      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d5c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004d60:	d02a      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004d62:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004d66:	d824      	bhi.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004d68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d6c:	d008      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004d6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d72:	d81e      	bhi.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00a      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004d78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d7c:	d010      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004d7e:	e018      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d80:	4b62      	ldr	r3, [pc, #392]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	4a61      	ldr	r2, [pc, #388]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d8a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d8c:	e015      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	3304      	adds	r3, #4
 8004d92:	2100      	movs	r1, #0
 8004d94:	4618      	mov	r0, r3
 8004d96:	f000 ffe1 	bl	8005d5c <RCCEx_PLLSAI1_Config>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d9e:	e00c      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	3320      	adds	r3, #32
 8004da4:	2100      	movs	r1, #0
 8004da6:	4618      	mov	r0, r3
 8004da8:	f001 f8cc 	bl	8005f44 <RCCEx_PLLSAI2_Config>
 8004dac:	4603      	mov	r3, r0
 8004dae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004db0:	e003      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	74fb      	strb	r3, [r7, #19]
      break;
 8004db6:	e000      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004db8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dba:	7cfb      	ldrb	r3, [r7, #19]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d10b      	bne.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004dc0:	4b52      	ldr	r3, [pc, #328]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dce:	494f      	ldr	r1, [pc, #316]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004dd6:	e001      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd8:	7cfb      	ldrb	r3, [r7, #19]
 8004dda:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f000 80a0 	beq.w	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dea:	2300      	movs	r3, #0
 8004dec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004dee:	4b47      	ldr	r3, [pc, #284]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e000      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004dfe:	2300      	movs	r3, #0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d00d      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e04:	4b41      	ldr	r3, [pc, #260]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e08:	4a40      	ldr	r2, [pc, #256]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e0e:	6593      	str	r3, [r2, #88]	; 0x58
 8004e10:	4b3e      	ldr	r3, [pc, #248]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e18:	60bb      	str	r3, [r7, #8]
 8004e1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e20:	4b3b      	ldr	r3, [pc, #236]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a3a      	ldr	r2, [pc, #232]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e2a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e2c:	f7fb fbb6 	bl	800059c <HAL_GetTick>
 8004e30:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e32:	e009      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e34:	f7fb fbb2 	bl	800059c <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d902      	bls.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	74fb      	strb	r3, [r7, #19]
        break;
 8004e46:	e005      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e48:	4b31      	ldr	r3, [pc, #196]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d0ef      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004e54:	7cfb      	ldrb	r3, [r7, #19]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d15c      	bne.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e5a:	4b2c      	ldr	r3, [pc, #176]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e64:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d01f      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d019      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e78:	4b24      	ldr	r3, [pc, #144]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e82:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e84:	4b21      	ldr	r3, [pc, #132]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e8a:	4a20      	ldr	r2, [pc, #128]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e94:	4b1d      	ldr	r3, [pc, #116]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e9a:	4a1c      	ldr	r2, [pc, #112]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ea0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ea4:	4a19      	ldr	r2, [pc, #100]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d016      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb6:	f7fb fb71 	bl	800059c <HAL_GetTick>
 8004eba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ebc:	e00b      	b.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ebe:	f7fb fb6d 	bl	800059c <HAL_GetTick>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d902      	bls.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	74fb      	strb	r3, [r7, #19]
            break;
 8004ed4:	e006      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ed6:	4b0d      	ldr	r3, [pc, #52]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d0ec      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004ee4:	7cfb      	ldrb	r3, [r7, #19]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d10c      	bne.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004eea:	4b08      	ldr	r3, [pc, #32]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004efa:	4904      	ldr	r1, [pc, #16]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004f02:	e009      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f04:	7cfb      	ldrb	r3, [r7, #19]
 8004f06:	74bb      	strb	r3, [r7, #18]
 8004f08:	e006      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004f0a:	bf00      	nop
 8004f0c:	40021000 	.word	0x40021000
 8004f10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f14:	7cfb      	ldrb	r3, [r7, #19]
 8004f16:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f18:	7c7b      	ldrb	r3, [r7, #17]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d105      	bne.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f1e:	4b9e      	ldr	r3, [pc, #632]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f22:	4a9d      	ldr	r2, [pc, #628]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f28:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00a      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f36:	4b98      	ldr	r3, [pc, #608]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f3c:	f023 0203 	bic.w	r2, r3, #3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f44:	4994      	ldr	r1, [pc, #592]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0302 	and.w	r3, r3, #2
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00a      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f58:	4b8f      	ldr	r3, [pc, #572]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f5e:	f023 020c 	bic.w	r2, r3, #12
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f66:	498c      	ldr	r1, [pc, #560]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0304 	and.w	r3, r3, #4
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f7a:	4b87      	ldr	r3, [pc, #540]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f80:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f88:	4983      	ldr	r1, [pc, #524]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0308 	and.w	r3, r3, #8
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00a      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f9c:	4b7e      	ldr	r3, [pc, #504]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fa2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004faa:	497b      	ldr	r1, [pc, #492]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0310 	and.w	r3, r3, #16
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00a      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004fbe:	4b76      	ldr	r3, [pc, #472]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fcc:	4972      	ldr	r1, [pc, #456]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0320 	and.w	r3, r3, #32
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00a      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004fe0:	4b6d      	ldr	r3, [pc, #436]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fee:	496a      	ldr	r1, [pc, #424]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00a      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005002:	4b65      	ldr	r3, [pc, #404]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005008:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005010:	4961      	ldr	r1, [pc, #388]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005012:	4313      	orrs	r3, r2
 8005014:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00a      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005024:	4b5c      	ldr	r3, [pc, #368]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800502a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005032:	4959      	ldr	r1, [pc, #356]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005034:	4313      	orrs	r3, r2
 8005036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00a      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005046:	4b54      	ldr	r3, [pc, #336]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800504c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005054:	4950      	ldr	r1, [pc, #320]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005056:	4313      	orrs	r3, r2
 8005058:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00a      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005068:	4b4b      	ldr	r3, [pc, #300]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800506a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005076:	4948      	ldr	r1, [pc, #288]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005078:	4313      	orrs	r3, r2
 800507a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00a      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800508a:	4b43      	ldr	r3, [pc, #268]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800508c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005090:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005098:	493f      	ldr	r1, [pc, #252]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800509a:	4313      	orrs	r3, r2
 800509c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d028      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050ac:	4b3a      	ldr	r3, [pc, #232]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050ba:	4937      	ldr	r1, [pc, #220]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050ca:	d106      	bne.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050cc:	4b32      	ldr	r3, [pc, #200]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	4a31      	ldr	r2, [pc, #196]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050d6:	60d3      	str	r3, [r2, #12]
 80050d8:	e011      	b.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050e2:	d10c      	bne.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	3304      	adds	r3, #4
 80050e8:	2101      	movs	r1, #1
 80050ea:	4618      	mov	r0, r3
 80050ec:	f000 fe36 	bl	8005d5c <RCCEx_PLLSAI1_Config>
 80050f0:	4603      	mov	r3, r0
 80050f2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80050f4:	7cfb      	ldrb	r3, [r7, #19]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d001      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80050fa:	7cfb      	ldrb	r3, [r7, #19]
 80050fc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d028      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800510a:	4b23      	ldr	r3, [pc, #140]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800510c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005110:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005118:	491f      	ldr	r1, [pc, #124]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800511a:	4313      	orrs	r3, r2
 800511c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005124:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005128:	d106      	bne.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800512a:	4b1b      	ldr	r3, [pc, #108]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	4a1a      	ldr	r2, [pc, #104]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005130:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005134:	60d3      	str	r3, [r2, #12]
 8005136:	e011      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800513c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005140:	d10c      	bne.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	3304      	adds	r3, #4
 8005146:	2101      	movs	r1, #1
 8005148:	4618      	mov	r0, r3
 800514a:	f000 fe07 	bl	8005d5c <RCCEx_PLLSAI1_Config>
 800514e:	4603      	mov	r3, r0
 8005150:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005152:	7cfb      	ldrb	r3, [r7, #19]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d001      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005158:	7cfb      	ldrb	r3, [r7, #19]
 800515a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d02b      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005168:	4b0b      	ldr	r3, [pc, #44]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800516a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800516e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005176:	4908      	ldr	r1, [pc, #32]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005178:	4313      	orrs	r3, r2
 800517a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005182:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005186:	d109      	bne.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005188:	4b03      	ldr	r3, [pc, #12]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	4a02      	ldr	r2, [pc, #8]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800518e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005192:	60d3      	str	r3, [r2, #12]
 8005194:	e014      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005196:	bf00      	nop
 8005198:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051a4:	d10c      	bne.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	3304      	adds	r3, #4
 80051aa:	2101      	movs	r1, #1
 80051ac:	4618      	mov	r0, r3
 80051ae:	f000 fdd5 	bl	8005d5c <RCCEx_PLLSAI1_Config>
 80051b2:	4603      	mov	r3, r0
 80051b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051b6:	7cfb      	ldrb	r3, [r7, #19]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d001      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80051bc:	7cfb      	ldrb	r3, [r7, #19]
 80051be:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d02f      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80051cc:	4b2b      	ldr	r3, [pc, #172]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80051ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051da:	4928      	ldr	r1, [pc, #160]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051ea:	d10d      	bne.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	3304      	adds	r3, #4
 80051f0:	2102      	movs	r1, #2
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 fdb2 	bl	8005d5c <RCCEx_PLLSAI1_Config>
 80051f8:	4603      	mov	r3, r0
 80051fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051fc:	7cfb      	ldrb	r3, [r7, #19]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d014      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005202:	7cfb      	ldrb	r3, [r7, #19]
 8005204:	74bb      	strb	r3, [r7, #18]
 8005206:	e011      	b.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800520c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005210:	d10c      	bne.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	3320      	adds	r3, #32
 8005216:	2102      	movs	r1, #2
 8005218:	4618      	mov	r0, r3
 800521a:	f000 fe93 	bl	8005f44 <RCCEx_PLLSAI2_Config>
 800521e:	4603      	mov	r3, r0
 8005220:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005222:	7cfb      	ldrb	r3, [r7, #19]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d001      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005228:	7cfb      	ldrb	r3, [r7, #19]
 800522a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d00a      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005238:	4b10      	ldr	r3, [pc, #64]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800523a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800523e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005246:	490d      	ldr	r1, [pc, #52]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005248:	4313      	orrs	r3, r2
 800524a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00b      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800525a:	4b08      	ldr	r3, [pc, #32]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800525c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005260:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800526a:	4904      	ldr	r1, [pc, #16]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800526c:	4313      	orrs	r3, r2
 800526e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005272:	7cbb      	ldrb	r3, [r7, #18]
}
 8005274:	4618      	mov	r0, r3
 8005276:	3718      	adds	r7, #24
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	40021000 	.word	0x40021000

08005280 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b088      	sub	sp, #32
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005288:	2300      	movs	r3, #0
 800528a:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005292:	d13e      	bne.n	8005312 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005294:	4bb2      	ldr	r3, [pc, #712]	; (8005560 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8005296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800529a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800529e:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052a6:	d028      	beq.n	80052fa <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052ae:	f200 8542 	bhi.w	8005d36 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052b8:	d005      	beq.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052c0:	d00e      	beq.n	80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80052c2:	f000 bd38 	b.w	8005d36 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80052c6:	4ba6      	ldr	r3, [pc, #664]	; (8005560 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80052c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052cc:	f003 0302 	and.w	r3, r3, #2
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	f040 8532 	bne.w	8005d3a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 80052d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052da:	61fb      	str	r3, [r7, #28]
      break;
 80052dc:	f000 bd2d 	b.w	8005d3a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80052e0:	4b9f      	ldr	r3, [pc, #636]	; (8005560 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80052e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	f040 8527 	bne.w	8005d3e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 80052f0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80052f4:	61fb      	str	r3, [r7, #28]
      break;
 80052f6:	f000 bd22 	b.w	8005d3e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80052fa:	4b99      	ldr	r3, [pc, #612]	; (8005560 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005302:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005306:	f040 851c 	bne.w	8005d42 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 800530a:	4b96      	ldr	r3, [pc, #600]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800530c:	61fb      	str	r3, [r7, #28]
      break;
 800530e:	f000 bd18 	b.w	8005d42 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005312:	4b93      	ldr	r3, [pc, #588]	; (8005560 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	f003 0303 	and.w	r3, r3, #3
 800531a:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	2b03      	cmp	r3, #3
 8005320:	d036      	beq.n	8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	2b03      	cmp	r3, #3
 8005326:	d840      	bhi.n	80053aa <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	2b01      	cmp	r3, #1
 800532c:	d003      	beq.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	2b02      	cmp	r3, #2
 8005332:	d020      	beq.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8005334:	e039      	b.n	80053aa <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005336:	4b8a      	ldr	r3, [pc, #552]	; (8005560 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0302 	and.w	r3, r3, #2
 800533e:	2b02      	cmp	r3, #2
 8005340:	d116      	bne.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005342:	4b87      	ldr	r3, [pc, #540]	; (8005560 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0308 	and.w	r3, r3, #8
 800534a:	2b00      	cmp	r3, #0
 800534c:	d005      	beq.n	800535a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800534e:	4b84      	ldr	r3, [pc, #528]	; (8005560 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	091b      	lsrs	r3, r3, #4
 8005354:	f003 030f 	and.w	r3, r3, #15
 8005358:	e005      	b.n	8005366 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800535a:	4b81      	ldr	r3, [pc, #516]	; (8005560 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800535c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005360:	0a1b      	lsrs	r3, r3, #8
 8005362:	f003 030f 	and.w	r3, r3, #15
 8005366:	4a80      	ldr	r2, [pc, #512]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8005368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800536c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800536e:	e01f      	b.n	80053b0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005370:	2300      	movs	r3, #0
 8005372:	61bb      	str	r3, [r7, #24]
      break;
 8005374:	e01c      	b.n	80053b0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005376:	4b7a      	ldr	r3, [pc, #488]	; (8005560 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800537e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005382:	d102      	bne.n	800538a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8005384:	4b79      	ldr	r3, [pc, #484]	; (800556c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8005386:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005388:	e012      	b.n	80053b0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800538a:	2300      	movs	r3, #0
 800538c:	61bb      	str	r3, [r7, #24]
      break;
 800538e:	e00f      	b.n	80053b0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005390:	4b73      	ldr	r3, [pc, #460]	; (8005560 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005398:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800539c:	d102      	bne.n	80053a4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800539e:	4b74      	ldr	r3, [pc, #464]	; (8005570 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80053a0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80053a2:	e005      	b.n	80053b0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80053a4:	2300      	movs	r3, #0
 80053a6:	61bb      	str	r3, [r7, #24]
      break;
 80053a8:	e002      	b.n	80053b0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80053aa:	2300      	movs	r3, #0
 80053ac:	61bb      	str	r3, [r7, #24]
      break;
 80053ae:	bf00      	nop
    }

    switch(PeriphClk)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80053b6:	f000 80dd 	beq.w	8005574 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80053c0:	f200 84c1 	bhi.w	8005d46 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80053ca:	f000 80d3 	beq.w	8005574 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80053d4:	f200 84b7 	bhi.w	8005d46 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053de:	f000 835f 	beq.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053e8:	f200 84ad 	bhi.w	8005d46 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053f2:	f000 847e 	beq.w	8005cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053fc:	f200 84a3 	bhi.w	8005d46 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005406:	f000 82cd 	beq.w	80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005410:	f200 8499 	bhi.w	8005d46 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800541a:	f000 80ab 	beq.w	8005574 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005424:	f200 848f 	bhi.w	8005d46 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800542e:	f000 8090 	beq.w	8005552 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005438:	f200 8485 	bhi.w	8005d46 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005442:	d07f      	beq.n	8005544 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800544a:	f200 847c 	bhi.w	8005d46 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005454:	f000 8403 	beq.w	8005c5e <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800545e:	f200 8472 	bhi.w	8005d46 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005468:	f000 83af 	beq.w	8005bca <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005472:	f200 8468 	bhi.w	8005d46 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800547c:	f000 8379 	beq.w	8005b72 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005486:	f200 845e 	bhi.w	8005d46 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2b80      	cmp	r3, #128	; 0x80
 800548e:	f000 8344 	beq.w	8005b1a <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2b80      	cmp	r3, #128	; 0x80
 8005496:	f200 8456 	bhi.w	8005d46 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2b20      	cmp	r3, #32
 800549e:	d84b      	bhi.n	8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	f000 844f 	beq.w	8005d46 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	3b01      	subs	r3, #1
 80054ac:	2b1f      	cmp	r3, #31
 80054ae:	f200 844a 	bhi.w	8005d46 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80054b2:	a201      	add	r2, pc, #4	; (adr r2, 80054b8 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 80054b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b8:	080056a1 	.word	0x080056a1
 80054bc:	0800570f 	.word	0x0800570f
 80054c0:	08005d47 	.word	0x08005d47
 80054c4:	080057a3 	.word	0x080057a3
 80054c8:	08005d47 	.word	0x08005d47
 80054cc:	08005d47 	.word	0x08005d47
 80054d0:	08005d47 	.word	0x08005d47
 80054d4:	08005829 	.word	0x08005829
 80054d8:	08005d47 	.word	0x08005d47
 80054dc:	08005d47 	.word	0x08005d47
 80054e0:	08005d47 	.word	0x08005d47
 80054e4:	08005d47 	.word	0x08005d47
 80054e8:	08005d47 	.word	0x08005d47
 80054ec:	08005d47 	.word	0x08005d47
 80054f0:	08005d47 	.word	0x08005d47
 80054f4:	080058a1 	.word	0x080058a1
 80054f8:	08005d47 	.word	0x08005d47
 80054fc:	08005d47 	.word	0x08005d47
 8005500:	08005d47 	.word	0x08005d47
 8005504:	08005d47 	.word	0x08005d47
 8005508:	08005d47 	.word	0x08005d47
 800550c:	08005d47 	.word	0x08005d47
 8005510:	08005d47 	.word	0x08005d47
 8005514:	08005d47 	.word	0x08005d47
 8005518:	08005d47 	.word	0x08005d47
 800551c:	08005d47 	.word	0x08005d47
 8005520:	08005d47 	.word	0x08005d47
 8005524:	08005d47 	.word	0x08005d47
 8005528:	08005d47 	.word	0x08005d47
 800552c:	08005d47 	.word	0x08005d47
 8005530:	08005d47 	.word	0x08005d47
 8005534:	08005923 	.word	0x08005923
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2b40      	cmp	r3, #64	; 0x40
 800553c:	f000 82c1 	beq.w	8005ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8005540:	f000 bc01 	b.w	8005d46 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005544:	69b9      	ldr	r1, [r7, #24]
 8005546:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800554a:	f000 fdd9 	bl	8006100 <RCCEx_GetSAIxPeriphCLKFreq>
 800554e:	61f8      	str	r0, [r7, #28]
      break;
 8005550:	e3fa      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8005552:	69b9      	ldr	r1, [r7, #24]
 8005554:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005558:	f000 fdd2 	bl	8006100 <RCCEx_GetSAIxPeriphCLKFreq>
 800555c:	61f8      	str	r0, [r7, #28]
      break;
 800555e:	e3f3      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8005560:	40021000 	.word	0x40021000
 8005564:	0003d090 	.word	0x0003d090
 8005568:	0800d978 	.word	0x0800d978
 800556c:	00f42400 	.word	0x00f42400
 8005570:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005574:	4ba9      	ldr	r3, [pc, #676]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800557a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800557e:	613b      	str	r3, [r7, #16]
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005586:	d00c      	beq.n	80055a2 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800558e:	d87f      	bhi.n	8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005596:	d04e      	beq.n	8005636 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800559e:	d01d      	beq.n	80055dc <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 80055a0:	e076      	b.n	8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80055a2:	4b9e      	ldr	r3, [pc, #632]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d172      	bne.n	8005694 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80055ae:	4b9b      	ldr	r3, [pc, #620]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0308 	and.w	r3, r3, #8
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d005      	beq.n	80055c6 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 80055ba:	4b98      	ldr	r3, [pc, #608]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	091b      	lsrs	r3, r3, #4
 80055c0:	f003 030f 	and.w	r3, r3, #15
 80055c4:	e005      	b.n	80055d2 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 80055c6:	4b95      	ldr	r3, [pc, #596]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80055c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055cc:	0a1b      	lsrs	r3, r3, #8
 80055ce:	f003 030f 	and.w	r3, r3, #15
 80055d2:	4a93      	ldr	r2, [pc, #588]	; (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80055d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055d8:	61fb      	str	r3, [r7, #28]
          break;
 80055da:	e05b      	b.n	8005694 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80055dc:	4b8f      	ldr	r3, [pc, #572]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055e8:	d156      	bne.n	8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80055ea:	4b8c      	ldr	r3, [pc, #560]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055f6:	d14f      	bne.n	8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80055f8:	4b88      	ldr	r3, [pc, #544]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	0a1b      	lsrs	r3, r3, #8
 80055fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005602:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	fb03 f202 	mul.w	r2, r3, r2
 800560c:	4b83      	ldr	r3, [pc, #524]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	091b      	lsrs	r3, r3, #4
 8005612:	f003 0307 	and.w	r3, r3, #7
 8005616:	3301      	adds	r3, #1
 8005618:	fbb2 f3f3 	udiv	r3, r2, r3
 800561c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800561e:	4b7f      	ldr	r3, [pc, #508]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	0d5b      	lsrs	r3, r3, #21
 8005624:	f003 0303 	and.w	r3, r3, #3
 8005628:	3301      	adds	r3, #1
 800562a:	005b      	lsls	r3, r3, #1
 800562c:	69ba      	ldr	r2, [r7, #24]
 800562e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005632:	61fb      	str	r3, [r7, #28]
          break;
 8005634:	e030      	b.n	8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005636:	4b79      	ldr	r3, [pc, #484]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800563e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005642:	d12b      	bne.n	800569c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005644:	4b75      	ldr	r3, [pc, #468]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800564c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005650:	d124      	bne.n	800569c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005652:	4b72      	ldr	r3, [pc, #456]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	0a1b      	lsrs	r3, r3, #8
 8005658:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800565c:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	fb03 f202 	mul.w	r2, r3, r2
 8005666:	4b6d      	ldr	r3, [pc, #436]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	091b      	lsrs	r3, r3, #4
 800566c:	f003 0307 	and.w	r3, r3, #7
 8005670:	3301      	adds	r3, #1
 8005672:	fbb2 f3f3 	udiv	r3, r2, r3
 8005676:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8005678:	4b68      	ldr	r3, [pc, #416]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	0d5b      	lsrs	r3, r3, #21
 800567e:	f003 0303 	and.w	r3, r3, #3
 8005682:	3301      	adds	r3, #1
 8005684:	005b      	lsls	r3, r3, #1
 8005686:	69ba      	ldr	r2, [r7, #24]
 8005688:	fbb2 f3f3 	udiv	r3, r2, r3
 800568c:	61fb      	str	r3, [r7, #28]
          break;
 800568e:	e005      	b.n	800569c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 8005690:	bf00      	nop
 8005692:	e359      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005694:	bf00      	nop
 8005696:	e357      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005698:	bf00      	nop
 800569a:	e355      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800569c:	bf00      	nop
        break;
 800569e:	e353      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80056a0:	4b5e      	ldr	r3, [pc, #376]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80056a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a6:	f003 0303 	and.w	r3, r3, #3
 80056aa:	613b      	str	r3, [r7, #16]
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	2b03      	cmp	r3, #3
 80056b0:	d827      	bhi.n	8005702 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 80056b2:	a201      	add	r2, pc, #4	; (adr r2, 80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 80056b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b8:	080056c9 	.word	0x080056c9
 80056bc:	080056d1 	.word	0x080056d1
 80056c0:	080056d9 	.word	0x080056d9
 80056c4:	080056ed 	.word	0x080056ed
          frequency = HAL_RCC_GetPCLK2Freq();
 80056c8:	f7ff fa7a 	bl	8004bc0 <HAL_RCC_GetPCLK2Freq>
 80056cc:	61f8      	str	r0, [r7, #28]
          break;
 80056ce:	e01d      	b.n	800570c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 80056d0:	f7ff f9c8 	bl	8004a64 <HAL_RCC_GetSysClockFreq>
 80056d4:	61f8      	str	r0, [r7, #28]
          break;
 80056d6:	e019      	b.n	800570c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80056d8:	4b50      	ldr	r3, [pc, #320]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056e4:	d10f      	bne.n	8005706 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 80056e6:	4b4f      	ldr	r3, [pc, #316]	; (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80056e8:	61fb      	str	r3, [r7, #28]
          break;
 80056ea:	e00c      	b.n	8005706 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80056ec:	4b4b      	ldr	r3, [pc, #300]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80056ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f2:	f003 0302 	and.w	r3, r3, #2
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d107      	bne.n	800570a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 80056fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056fe:	61fb      	str	r3, [r7, #28]
          break;
 8005700:	e003      	b.n	800570a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 8005702:	bf00      	nop
 8005704:	e320      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005706:	bf00      	nop
 8005708:	e31e      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800570a:	bf00      	nop
        break;
 800570c:	e31c      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800570e:	4b43      	ldr	r3, [pc, #268]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005714:	f003 030c 	and.w	r3, r3, #12
 8005718:	613b      	str	r3, [r7, #16]
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	2b0c      	cmp	r3, #12
 800571e:	d83a      	bhi.n	8005796 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8005720:	a201      	add	r2, pc, #4	; (adr r2, 8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8005722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005726:	bf00      	nop
 8005728:	0800575d 	.word	0x0800575d
 800572c:	08005797 	.word	0x08005797
 8005730:	08005797 	.word	0x08005797
 8005734:	08005797 	.word	0x08005797
 8005738:	08005765 	.word	0x08005765
 800573c:	08005797 	.word	0x08005797
 8005740:	08005797 	.word	0x08005797
 8005744:	08005797 	.word	0x08005797
 8005748:	0800576d 	.word	0x0800576d
 800574c:	08005797 	.word	0x08005797
 8005750:	08005797 	.word	0x08005797
 8005754:	08005797 	.word	0x08005797
 8005758:	08005781 	.word	0x08005781
          frequency = HAL_RCC_GetPCLK1Freq();
 800575c:	f7ff fa1a 	bl	8004b94 <HAL_RCC_GetPCLK1Freq>
 8005760:	61f8      	str	r0, [r7, #28]
          break;
 8005762:	e01d      	b.n	80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8005764:	f7ff f97e 	bl	8004a64 <HAL_RCC_GetSysClockFreq>
 8005768:	61f8      	str	r0, [r7, #28]
          break;
 800576a:	e019      	b.n	80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800576c:	4b2b      	ldr	r3, [pc, #172]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005774:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005778:	d10f      	bne.n	800579a <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 800577a:	4b2a      	ldr	r3, [pc, #168]	; (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800577c:	61fb      	str	r3, [r7, #28]
          break;
 800577e:	e00c      	b.n	800579a <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005780:	4b26      	ldr	r3, [pc, #152]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005786:	f003 0302 	and.w	r3, r3, #2
 800578a:	2b02      	cmp	r3, #2
 800578c:	d107      	bne.n	800579e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 800578e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005792:	61fb      	str	r3, [r7, #28]
          break;
 8005794:	e003      	b.n	800579e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 8005796:	bf00      	nop
 8005798:	e2d6      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800579a:	bf00      	nop
 800579c:	e2d4      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800579e:	bf00      	nop
        break;
 80057a0:	e2d2      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80057a2:	4b1e      	ldr	r3, [pc, #120]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80057a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057a8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80057ac:	613b      	str	r3, [r7, #16]
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	2b30      	cmp	r3, #48	; 0x30
 80057b2:	d021      	beq.n	80057f8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	2b30      	cmp	r3, #48	; 0x30
 80057b8:	d829      	bhi.n	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	2b20      	cmp	r3, #32
 80057be:	d011      	beq.n	80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	2b20      	cmp	r3, #32
 80057c4:	d823      	bhi.n	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d003      	beq.n	80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	2b10      	cmp	r3, #16
 80057d0:	d004      	beq.n	80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 80057d2:	e01c      	b.n	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80057d4:	f7ff f9de 	bl	8004b94 <HAL_RCC_GetPCLK1Freq>
 80057d8:	61f8      	str	r0, [r7, #28]
          break;
 80057da:	e01d      	b.n	8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 80057dc:	f7ff f942 	bl	8004a64 <HAL_RCC_GetSysClockFreq>
 80057e0:	61f8      	str	r0, [r7, #28]
          break;
 80057e2:	e019      	b.n	8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80057e4:	4b0d      	ldr	r3, [pc, #52]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057f0:	d10f      	bne.n	8005812 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 80057f2:	4b0c      	ldr	r3, [pc, #48]	; (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80057f4:	61fb      	str	r3, [r7, #28]
          break;
 80057f6:	e00c      	b.n	8005812 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80057f8:	4b08      	ldr	r3, [pc, #32]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80057fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057fe:	f003 0302 	and.w	r3, r3, #2
 8005802:	2b02      	cmp	r3, #2
 8005804:	d107      	bne.n	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 8005806:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800580a:	61fb      	str	r3, [r7, #28]
          break;
 800580c:	e003      	b.n	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 800580e:	bf00      	nop
 8005810:	e29a      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005812:	bf00      	nop
 8005814:	e298      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005816:	bf00      	nop
        break;
 8005818:	e296      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800581a:	bf00      	nop
 800581c:	40021000 	.word	0x40021000
 8005820:	0800d978 	.word	0x0800d978
 8005824:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005828:	4b9b      	ldr	r3, [pc, #620]	; (8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800582a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800582e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005832:	613b      	str	r3, [r7, #16]
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	2bc0      	cmp	r3, #192	; 0xc0
 8005838:	d021      	beq.n	800587e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	2bc0      	cmp	r3, #192	; 0xc0
 800583e:	d829      	bhi.n	8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	2b80      	cmp	r3, #128	; 0x80
 8005844:	d011      	beq.n	800586a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	2b80      	cmp	r3, #128	; 0x80
 800584a:	d823      	bhi.n	8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d003      	beq.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	2b40      	cmp	r3, #64	; 0x40
 8005856:	d004      	beq.n	8005862 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8005858:	e01c      	b.n	8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 800585a:	f7ff f99b 	bl	8004b94 <HAL_RCC_GetPCLK1Freq>
 800585e:	61f8      	str	r0, [r7, #28]
          break;
 8005860:	e01d      	b.n	800589e <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 8005862:	f7ff f8ff 	bl	8004a64 <HAL_RCC_GetSysClockFreq>
 8005866:	61f8      	str	r0, [r7, #28]
          break;
 8005868:	e019      	b.n	800589e <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800586a:	4b8b      	ldr	r3, [pc, #556]	; (8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005876:	d10f      	bne.n	8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 8005878:	4b88      	ldr	r3, [pc, #544]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800587a:	61fb      	str	r3, [r7, #28]
          break;
 800587c:	e00c      	b.n	8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800587e:	4b86      	ldr	r3, [pc, #536]	; (8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005884:	f003 0302 	and.w	r3, r3, #2
 8005888:	2b02      	cmp	r3, #2
 800588a:	d107      	bne.n	800589c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 800588c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005890:	61fb      	str	r3, [r7, #28]
          break;
 8005892:	e003      	b.n	800589c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 8005894:	bf00      	nop
 8005896:	e257      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005898:	bf00      	nop
 800589a:	e255      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800589c:	bf00      	nop
        break;
 800589e:	e253      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80058a0:	4b7d      	ldr	r3, [pc, #500]	; (8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80058a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058aa:	613b      	str	r3, [r7, #16]
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058b2:	d025      	beq.n	8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058ba:	d82c      	bhi.n	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058c2:	d013      	beq.n	80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058ca:	d824      	bhi.n	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d004      	beq.n	80058dc <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058d8:	d004      	beq.n	80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 80058da:	e01c      	b.n	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 80058dc:	f7ff f95a 	bl	8004b94 <HAL_RCC_GetPCLK1Freq>
 80058e0:	61f8      	str	r0, [r7, #28]
          break;
 80058e2:	e01d      	b.n	8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 80058e4:	f7ff f8be 	bl	8004a64 <HAL_RCC_GetSysClockFreq>
 80058e8:	61f8      	str	r0, [r7, #28]
          break;
 80058ea:	e019      	b.n	8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80058ec:	4b6a      	ldr	r3, [pc, #424]	; (8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058f8:	d10f      	bne.n	800591a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 80058fa:	4b68      	ldr	r3, [pc, #416]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80058fc:	61fb      	str	r3, [r7, #28]
          break;
 80058fe:	e00c      	b.n	800591a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005900:	4b65      	ldr	r3, [pc, #404]	; (8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005906:	f003 0302 	and.w	r3, r3, #2
 800590a:	2b02      	cmp	r3, #2
 800590c:	d107      	bne.n	800591e <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 800590e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005912:	61fb      	str	r3, [r7, #28]
          break;
 8005914:	e003      	b.n	800591e <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8005916:	bf00      	nop
 8005918:	e216      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800591a:	bf00      	nop
 800591c:	e214      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800591e:	bf00      	nop
        break;
 8005920:	e212      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005922:	4b5d      	ldr	r3, [pc, #372]	; (8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005928:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800592c:	613b      	str	r3, [r7, #16]
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005934:	d025      	beq.n	8005982 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800593c:	d82c      	bhi.n	8005998 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005944:	d013      	beq.n	800596e <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800594c:	d824      	bhi.n	8005998 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d004      	beq.n	800595e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800595a:	d004      	beq.n	8005966 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 800595c:	e01c      	b.n	8005998 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 800595e:	f7ff f919 	bl	8004b94 <HAL_RCC_GetPCLK1Freq>
 8005962:	61f8      	str	r0, [r7, #28]
          break;
 8005964:	e01d      	b.n	80059a2 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 8005966:	f7ff f87d 	bl	8004a64 <HAL_RCC_GetSysClockFreq>
 800596a:	61f8      	str	r0, [r7, #28]
          break;
 800596c:	e019      	b.n	80059a2 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800596e:	4b4a      	ldr	r3, [pc, #296]	; (8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800597a:	d10f      	bne.n	800599c <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 800597c:	4b47      	ldr	r3, [pc, #284]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800597e:	61fb      	str	r3, [r7, #28]
          break;
 8005980:	e00c      	b.n	800599c <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005982:	4b45      	ldr	r3, [pc, #276]	; (8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005988:	f003 0302 	and.w	r3, r3, #2
 800598c:	2b02      	cmp	r3, #2
 800598e:	d107      	bne.n	80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 8005990:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005994:	61fb      	str	r3, [r7, #28]
          break;
 8005996:	e003      	b.n	80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 8005998:	bf00      	nop
 800599a:	e1d5      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800599c:	bf00      	nop
 800599e:	e1d3      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80059a0:	bf00      	nop
        break;
 80059a2:	e1d1      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80059a4:	4b3c      	ldr	r3, [pc, #240]	; (8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80059a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80059ae:	613b      	str	r3, [r7, #16]
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80059b6:	d00c      	beq.n	80059d2 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80059be:	d864      	bhi.n	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059c6:	d008      	beq.n	80059da <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059ce:	d030      	beq.n	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 80059d0:	e05b      	b.n	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 80059d2:	f7ff f847 	bl	8004a64 <HAL_RCC_GetSysClockFreq>
 80059d6:	61f8      	str	r0, [r7, #28]
          break;
 80059d8:	e05c      	b.n	8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80059da:	4b2f      	ldr	r3, [pc, #188]	; (8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059e6:	d152      	bne.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 80059e8:	4b2b      	ldr	r3, [pc, #172]	; (8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d04c      	beq.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80059f4:	4b28      	ldr	r3, [pc, #160]	; (8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	0a1b      	lsrs	r3, r3, #8
 80059fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059fe:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	fb03 f202 	mul.w	r2, r3, r2
 8005a08:	4b23      	ldr	r3, [pc, #140]	; (8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	091b      	lsrs	r3, r3, #4
 8005a0e:	f003 0307 	and.w	r3, r3, #7
 8005a12:	3301      	adds	r3, #1
 8005a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a18:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8005a1a:	4b1f      	ldr	r3, [pc, #124]	; (8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	0e5b      	lsrs	r3, r3, #25
 8005a20:	f003 0303 	and.w	r3, r3, #3
 8005a24:	3301      	adds	r3, #1
 8005a26:	005b      	lsls	r3, r3, #1
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a2e:	61fb      	str	r3, [r7, #28]
          break;
 8005a30:	e02d      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8005a32:	4b19      	ldr	r3, [pc, #100]	; (8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a3e:	d128      	bne.n	8005a92 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8005a40:	4b15      	ldr	r3, [pc, #84]	; (8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005a42:	695b      	ldr	r3, [r3, #20]
 8005a44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d022      	beq.n	8005a92 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005a4c:	4b12      	ldr	r3, [pc, #72]	; (8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005a4e:	695b      	ldr	r3, [r3, #20]
 8005a50:	0a1b      	lsrs	r3, r3, #8
 8005a52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a56:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	fb03 f202 	mul.w	r2, r3, r2
 8005a60:	4b0d      	ldr	r3, [pc, #52]	; (8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	091b      	lsrs	r3, r3, #4
 8005a66:	f003 0307 	and.w	r3, r3, #7
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a70:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8005a72:	4b09      	ldr	r3, [pc, #36]	; (8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005a74:	695b      	ldr	r3, [r3, #20]
 8005a76:	0e5b      	lsrs	r3, r3, #25
 8005a78:	f003 0303 	and.w	r3, r3, #3
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	005b      	lsls	r3, r3, #1
 8005a80:	69ba      	ldr	r2, [r7, #24]
 8005a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a86:	61fb      	str	r3, [r7, #28]
          break;
 8005a88:	e003      	b.n	8005a92 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 8005a8a:	bf00      	nop
 8005a8c:	e15c      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005a8e:	bf00      	nop
 8005a90:	e15a      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005a92:	bf00      	nop
        break;
 8005a94:	e158      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8005a96:	bf00      	nop
 8005a98:	40021000 	.word	0x40021000
 8005a9c:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005aa0:	4b9d      	ldr	r3, [pc, #628]	; (8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aa6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005aaa:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d103      	bne.n	8005aba <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005ab2:	f7ff f885 	bl	8004bc0 <HAL_RCC_GetPCLK2Freq>
 8005ab6:	61f8      	str	r0, [r7, #28]
        break;
 8005ab8:	e146      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 8005aba:	f7fe ffd3 	bl	8004a64 <HAL_RCC_GetSysClockFreq>
 8005abe:	61f8      	str	r0, [r7, #28]
        break;
 8005ac0:	e142      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005ac2:	4b95      	ldr	r3, [pc, #596]	; (8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ac8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005acc:	613b      	str	r3, [r7, #16]
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ad4:	d013      	beq.n	8005afe <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005adc:	d819      	bhi.n	8005b12 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d004      	beq.n	8005aee <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aea:	d004      	beq.n	8005af6 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 8005aec:	e011      	b.n	8005b12 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005aee:	f7ff f851 	bl	8004b94 <HAL_RCC_GetPCLK1Freq>
 8005af2:	61f8      	str	r0, [r7, #28]
          break;
 8005af4:	e010      	b.n	8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 8005af6:	f7fe ffb5 	bl	8004a64 <HAL_RCC_GetSysClockFreq>
 8005afa:	61f8      	str	r0, [r7, #28]
          break;
 8005afc:	e00c      	b.n	8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005afe:	4b86      	ldr	r3, [pc, #536]	; (8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b0a:	d104      	bne.n	8005b16 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 8005b0c:	4b83      	ldr	r3, [pc, #524]	; (8005d1c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8005b0e:	61fb      	str	r3, [r7, #28]
          break;
 8005b10:	e001      	b.n	8005b16 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 8005b12:	bf00      	nop
 8005b14:	e118      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005b16:	bf00      	nop
        break;
 8005b18:	e116      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005b1a:	4b7f      	ldr	r3, [pc, #508]	; (8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005b24:	613b      	str	r3, [r7, #16]
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b2c:	d013      	beq.n	8005b56 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b34:	d819      	bhi.n	8005b6a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d004      	beq.n	8005b46 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b42:	d004      	beq.n	8005b4e <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8005b44:	e011      	b.n	8005b6a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005b46:	f7ff f825 	bl	8004b94 <HAL_RCC_GetPCLK1Freq>
 8005b4a:	61f8      	str	r0, [r7, #28]
          break;
 8005b4c:	e010      	b.n	8005b70 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8005b4e:	f7fe ff89 	bl	8004a64 <HAL_RCC_GetSysClockFreq>
 8005b52:	61f8      	str	r0, [r7, #28]
          break;
 8005b54:	e00c      	b.n	8005b70 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b56:	4b70      	ldr	r3, [pc, #448]	; (8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b62:	d104      	bne.n	8005b6e <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 8005b64:	4b6d      	ldr	r3, [pc, #436]	; (8005d1c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8005b66:	61fb      	str	r3, [r7, #28]
          break;
 8005b68:	e001      	b.n	8005b6e <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 8005b6a:	bf00      	nop
 8005b6c:	e0ec      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005b6e:	bf00      	nop
        break;
 8005b70:	e0ea      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005b72:	4b69      	ldr	r3, [pc, #420]	; (8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b7c:	613b      	str	r3, [r7, #16]
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b84:	d013      	beq.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b8c:	d819      	bhi.n	8005bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d004      	beq.n	8005b9e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b9a:	d004      	beq.n	8005ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 8005b9c:	e011      	b.n	8005bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005b9e:	f7fe fff9 	bl	8004b94 <HAL_RCC_GetPCLK1Freq>
 8005ba2:	61f8      	str	r0, [r7, #28]
          break;
 8005ba4:	e010      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 8005ba6:	f7fe ff5d 	bl	8004a64 <HAL_RCC_GetSysClockFreq>
 8005baa:	61f8      	str	r0, [r7, #28]
          break;
 8005bac:	e00c      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005bae:	4b5a      	ldr	r3, [pc, #360]	; (8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bba:	d104      	bne.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 8005bbc:	4b57      	ldr	r3, [pc, #348]	; (8005d1c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8005bbe:	61fb      	str	r3, [r7, #28]
          break;
 8005bc0:	e001      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 8005bc2:	bf00      	nop
 8005bc4:	e0c0      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005bc6:	bf00      	nop
        break;
 8005bc8:	e0be      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005bca:	4b53      	ldr	r3, [pc, #332]	; (8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bd0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005bd4:	613b      	str	r3, [r7, #16]
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005bdc:	d02c      	beq.n	8005c38 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005be4:	d833      	bhi.n	8005c4e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005bec:	d01a      	beq.n	8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005bf4:	d82b      	bhi.n	8005c4e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d004      	beq.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c02:	d004      	beq.n	8005c0e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8005c04:	e023      	b.n	8005c4e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005c06:	f7fe ffc5 	bl	8004b94 <HAL_RCC_GetPCLK1Freq>
 8005c0a:	61f8      	str	r0, [r7, #28]
          break;
 8005c0c:	e026      	b.n	8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005c0e:	4b42      	ldr	r3, [pc, #264]	; (8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c14:	f003 0302 	and.w	r3, r3, #2
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d11a      	bne.n	8005c52 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 8005c1c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005c20:	61fb      	str	r3, [r7, #28]
          break;
 8005c22:	e016      	b.n	8005c52 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c24:	4b3c      	ldr	r3, [pc, #240]	; (8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c30:	d111      	bne.n	8005c56 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 8005c32:	4b3a      	ldr	r3, [pc, #232]	; (8005d1c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8005c34:	61fb      	str	r3, [r7, #28]
          break;
 8005c36:	e00e      	b.n	8005c56 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005c38:	4b37      	ldr	r3, [pc, #220]	; (8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c3e:	f003 0302 	and.w	r3, r3, #2
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d109      	bne.n	8005c5a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 8005c46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c4a:	61fb      	str	r3, [r7, #28]
          break;
 8005c4c:	e005      	b.n	8005c5a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 8005c4e:	bf00      	nop
 8005c50:	e07a      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005c52:	bf00      	nop
 8005c54:	e078      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005c56:	bf00      	nop
 8005c58:	e076      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005c5a:	bf00      	nop
        break;
 8005c5c:	e074      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005c5e:	4b2e      	ldr	r3, [pc, #184]	; (8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c64:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005c68:	613b      	str	r3, [r7, #16]
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005c70:	d02c      	beq.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005c78:	d833      	bhi.n	8005ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c80:	d01a      	beq.n	8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c88:	d82b      	bhi.n	8005ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d004      	beq.n	8005c9a <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c96:	d004      	beq.n	8005ca2 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 8005c98:	e023      	b.n	8005ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005c9a:	f7fe ff7b 	bl	8004b94 <HAL_RCC_GetPCLK1Freq>
 8005c9e:	61f8      	str	r0, [r7, #28]
          break;
 8005ca0:	e026      	b.n	8005cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005ca2:	4b1d      	ldr	r3, [pc, #116]	; (8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005ca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ca8:	f003 0302 	and.w	r3, r3, #2
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d11a      	bne.n	8005ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8005cb0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005cb4:	61fb      	str	r3, [r7, #28]
          break;
 8005cb6:	e016      	b.n	8005ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005cb8:	4b17      	ldr	r3, [pc, #92]	; (8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cc4:	d111      	bne.n	8005cea <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 8005cc6:	4b15      	ldr	r3, [pc, #84]	; (8005d1c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8005cc8:	61fb      	str	r3, [r7, #28]
          break;
 8005cca:	e00e      	b.n	8005cea <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005ccc:	4b12      	ldr	r3, [pc, #72]	; (8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cd2:	f003 0302 	and.w	r3, r3, #2
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d109      	bne.n	8005cee <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 8005cda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cde:	61fb      	str	r3, [r7, #28]
          break;
 8005ce0:	e005      	b.n	8005cee <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 8005ce2:	bf00      	nop
 8005ce4:	e030      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005ce6:	bf00      	nop
 8005ce8:	e02e      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005cea:	bf00      	nop
 8005cec:	e02c      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005cee:	bf00      	nop
        break;
 8005cf0:	e02a      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8005cf2:	4b09      	ldr	r3, [pc, #36]	; (8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cf8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005cfc:	613b      	str	r3, [r7, #16]
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d004      	beq.n	8005d0e <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d0a:	d009      	beq.n	8005d20 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 8005d0c:	e012      	b.n	8005d34 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d0e:	f7fe ff41 	bl	8004b94 <HAL_RCC_GetPCLK1Freq>
 8005d12:	61f8      	str	r0, [r7, #28]
          break;
 8005d14:	e00e      	b.n	8005d34 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8005d16:	bf00      	nop
 8005d18:	40021000 	.word	0x40021000
 8005d1c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d20:	4b0c      	ldr	r3, [pc, #48]	; (8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d2c:	d101      	bne.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 8005d2e:	4b0a      	ldr	r3, [pc, #40]	; (8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005d30:	61fb      	str	r3, [r7, #28]
          break;
 8005d32:	bf00      	nop
        break;
 8005d34:	e008      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8005d36:	bf00      	nop
 8005d38:	e006      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8005d3a:	bf00      	nop
 8005d3c:	e004      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8005d3e:	bf00      	nop
 8005d40:	e002      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8005d42:	bf00      	nop
 8005d44:	e000      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8005d46:	bf00      	nop
    }
  }

  return(frequency);
 8005d48:	69fb      	ldr	r3, [r7, #28]
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3720      	adds	r7, #32
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	40021000 	.word	0x40021000
 8005d58:	00f42400 	.word	0x00f42400

08005d5c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d66:	2300      	movs	r3, #0
 8005d68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005d6a:	4b75      	ldr	r3, [pc, #468]	; (8005f40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	f003 0303 	and.w	r3, r3, #3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d018      	beq.n	8005da8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005d76:	4b72      	ldr	r3, [pc, #456]	; (8005f40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	f003 0203 	and.w	r2, r3, #3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d10d      	bne.n	8005da2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
       ||
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d009      	beq.n	8005da2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005d8e:	4b6c      	ldr	r3, [pc, #432]	; (8005f40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	091b      	lsrs	r3, r3, #4
 8005d94:	f003 0307 	and.w	r3, r3, #7
 8005d98:	1c5a      	adds	r2, r3, #1
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	685b      	ldr	r3, [r3, #4]
       ||
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d047      	beq.n	8005e32 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	73fb      	strb	r3, [r7, #15]
 8005da6:	e044      	b.n	8005e32 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2b03      	cmp	r3, #3
 8005dae:	d018      	beq.n	8005de2 <RCCEx_PLLSAI1_Config+0x86>
 8005db0:	2b03      	cmp	r3, #3
 8005db2:	d825      	bhi.n	8005e00 <RCCEx_PLLSAI1_Config+0xa4>
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d002      	beq.n	8005dbe <RCCEx_PLLSAI1_Config+0x62>
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	d009      	beq.n	8005dd0 <RCCEx_PLLSAI1_Config+0x74>
 8005dbc:	e020      	b.n	8005e00 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005dbe:	4b60      	ldr	r3, [pc, #384]	; (8005f40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0302 	and.w	r3, r3, #2
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d11d      	bne.n	8005e06 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005dce:	e01a      	b.n	8005e06 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005dd0:	4b5b      	ldr	r3, [pc, #364]	; (8005f40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d116      	bne.n	8005e0a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005de0:	e013      	b.n	8005e0a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005de2:	4b57      	ldr	r3, [pc, #348]	; (8005f40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10f      	bne.n	8005e0e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005dee:	4b54      	ldr	r3, [pc, #336]	; (8005f40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d109      	bne.n	8005e0e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005dfe:	e006      	b.n	8005e0e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	73fb      	strb	r3, [r7, #15]
      break;
 8005e04:	e004      	b.n	8005e10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005e06:	bf00      	nop
 8005e08:	e002      	b.n	8005e10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005e0a:	bf00      	nop
 8005e0c:	e000      	b.n	8005e10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005e0e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005e10:	7bfb      	ldrb	r3, [r7, #15]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d10d      	bne.n	8005e32 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005e16:	4b4a      	ldr	r3, [pc, #296]	; (8005f40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6819      	ldr	r1, [r3, #0]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	3b01      	subs	r3, #1
 8005e28:	011b      	lsls	r3, r3, #4
 8005e2a:	430b      	orrs	r3, r1
 8005e2c:	4944      	ldr	r1, [pc, #272]	; (8005f40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005e32:	7bfb      	ldrb	r3, [r7, #15]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d17d      	bne.n	8005f34 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005e38:	4b41      	ldr	r3, [pc, #260]	; (8005f40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a40      	ldr	r2, [pc, #256]	; (8005f40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e3e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e44:	f7fa fbaa 	bl	800059c <HAL_GetTick>
 8005e48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005e4a:	e009      	b.n	8005e60 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e4c:	f7fa fba6 	bl	800059c <HAL_GetTick>
 8005e50:	4602      	mov	r2, r0
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d902      	bls.n	8005e60 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	73fb      	strb	r3, [r7, #15]
        break;
 8005e5e:	e005      	b.n	8005e6c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005e60:	4b37      	ldr	r3, [pc, #220]	; (8005f40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d1ef      	bne.n	8005e4c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005e6c:	7bfb      	ldrb	r3, [r7, #15]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d160      	bne.n	8005f34 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d111      	bne.n	8005e9c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e78:	4b31      	ldr	r3, [pc, #196]	; (8005f40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005e80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	6892      	ldr	r2, [r2, #8]
 8005e88:	0211      	lsls	r1, r2, #8
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	68d2      	ldr	r2, [r2, #12]
 8005e8e:	0912      	lsrs	r2, r2, #4
 8005e90:	0452      	lsls	r2, r2, #17
 8005e92:	430a      	orrs	r2, r1
 8005e94:	492a      	ldr	r1, [pc, #168]	; (8005f40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e96:	4313      	orrs	r3, r2
 8005e98:	610b      	str	r3, [r1, #16]
 8005e9a:	e027      	b.n	8005eec <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d112      	bne.n	8005ec8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ea2:	4b27      	ldr	r3, [pc, #156]	; (8005f40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005eaa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	6892      	ldr	r2, [r2, #8]
 8005eb2:	0211      	lsls	r1, r2, #8
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	6912      	ldr	r2, [r2, #16]
 8005eb8:	0852      	lsrs	r2, r2, #1
 8005eba:	3a01      	subs	r2, #1
 8005ebc:	0552      	lsls	r2, r2, #21
 8005ebe:	430a      	orrs	r2, r1
 8005ec0:	491f      	ldr	r1, [pc, #124]	; (8005f40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	610b      	str	r3, [r1, #16]
 8005ec6:	e011      	b.n	8005eec <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ec8:	4b1d      	ldr	r3, [pc, #116]	; (8005f40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005ed0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	6892      	ldr	r2, [r2, #8]
 8005ed8:	0211      	lsls	r1, r2, #8
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	6952      	ldr	r2, [r2, #20]
 8005ede:	0852      	lsrs	r2, r2, #1
 8005ee0:	3a01      	subs	r2, #1
 8005ee2:	0652      	lsls	r2, r2, #25
 8005ee4:	430a      	orrs	r2, r1
 8005ee6:	4916      	ldr	r1, [pc, #88]	; (8005f40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005eec:	4b14      	ldr	r3, [pc, #80]	; (8005f40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a13      	ldr	r2, [pc, #76]	; (8005f40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ef2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ef6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ef8:	f7fa fb50 	bl	800059c <HAL_GetTick>
 8005efc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005efe:	e009      	b.n	8005f14 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f00:	f7fa fb4c 	bl	800059c <HAL_GetTick>
 8005f04:	4602      	mov	r2, r0
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d902      	bls.n	8005f14 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	73fb      	strb	r3, [r7, #15]
          break;
 8005f12:	e005      	b.n	8005f20 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005f14:	4b0a      	ldr	r3, [pc, #40]	; (8005f40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d0ef      	beq.n	8005f00 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005f20:	7bfb      	ldrb	r3, [r7, #15]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d106      	bne.n	8005f34 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005f26:	4b06      	ldr	r3, [pc, #24]	; (8005f40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f28:	691a      	ldr	r2, [r3, #16]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	4904      	ldr	r1, [pc, #16]	; (8005f40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f30:	4313      	orrs	r3, r2
 8005f32:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3710      	adds	r7, #16
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	40021000 	.word	0x40021000

08005f44 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005f52:	4b6a      	ldr	r3, [pc, #424]	; (80060fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	f003 0303 	and.w	r3, r3, #3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d018      	beq.n	8005f90 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005f5e:	4b67      	ldr	r3, [pc, #412]	; (80060fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	f003 0203 	and.w	r2, r3, #3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d10d      	bne.n	8005f8a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
       ||
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d009      	beq.n	8005f8a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005f76:	4b61      	ldr	r3, [pc, #388]	; (80060fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	091b      	lsrs	r3, r3, #4
 8005f7c:	f003 0307 	and.w	r3, r3, #7
 8005f80:	1c5a      	adds	r2, r3, #1
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	685b      	ldr	r3, [r3, #4]
       ||
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d047      	beq.n	800601a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	73fb      	strb	r3, [r7, #15]
 8005f8e:	e044      	b.n	800601a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2b03      	cmp	r3, #3
 8005f96:	d018      	beq.n	8005fca <RCCEx_PLLSAI2_Config+0x86>
 8005f98:	2b03      	cmp	r3, #3
 8005f9a:	d825      	bhi.n	8005fe8 <RCCEx_PLLSAI2_Config+0xa4>
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d002      	beq.n	8005fa6 <RCCEx_PLLSAI2_Config+0x62>
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d009      	beq.n	8005fb8 <RCCEx_PLLSAI2_Config+0x74>
 8005fa4:	e020      	b.n	8005fe8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005fa6:	4b55      	ldr	r3, [pc, #340]	; (80060fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 0302 	and.w	r3, r3, #2
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d11d      	bne.n	8005fee <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fb6:	e01a      	b.n	8005fee <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005fb8:	4b50      	ldr	r3, [pc, #320]	; (80060fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d116      	bne.n	8005ff2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fc8:	e013      	b.n	8005ff2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005fca:	4b4c      	ldr	r3, [pc, #304]	; (80060fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d10f      	bne.n	8005ff6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005fd6:	4b49      	ldr	r3, [pc, #292]	; (80060fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d109      	bne.n	8005ff6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005fe6:	e006      	b.n	8005ff6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	73fb      	strb	r3, [r7, #15]
      break;
 8005fec:	e004      	b.n	8005ff8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005fee:	bf00      	nop
 8005ff0:	e002      	b.n	8005ff8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005ff2:	bf00      	nop
 8005ff4:	e000      	b.n	8005ff8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005ff6:	bf00      	nop
    }

    if(status == HAL_OK)
 8005ff8:	7bfb      	ldrb	r3, [r7, #15]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d10d      	bne.n	800601a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005ffe:	4b3f      	ldr	r3, [pc, #252]	; (80060fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6819      	ldr	r1, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	3b01      	subs	r3, #1
 8006010:	011b      	lsls	r3, r3, #4
 8006012:	430b      	orrs	r3, r1
 8006014:	4939      	ldr	r1, [pc, #228]	; (80060fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006016:	4313      	orrs	r3, r2
 8006018:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800601a:	7bfb      	ldrb	r3, [r7, #15]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d167      	bne.n	80060f0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006020:	4b36      	ldr	r3, [pc, #216]	; (80060fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a35      	ldr	r2, [pc, #212]	; (80060fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006026:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800602a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800602c:	f7fa fab6 	bl	800059c <HAL_GetTick>
 8006030:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006032:	e009      	b.n	8006048 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006034:	f7fa fab2 	bl	800059c <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	2b02      	cmp	r3, #2
 8006040:	d902      	bls.n	8006048 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	73fb      	strb	r3, [r7, #15]
        break;
 8006046:	e005      	b.n	8006054 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006048:	4b2c      	ldr	r3, [pc, #176]	; (80060fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006050:	2b00      	cmp	r3, #0
 8006052:	d1ef      	bne.n	8006034 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006054:	7bfb      	ldrb	r3, [r7, #15]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d14a      	bne.n	80060f0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d111      	bne.n	8006084 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006060:	4b26      	ldr	r3, [pc, #152]	; (80060fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006062:	695b      	ldr	r3, [r3, #20]
 8006064:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006068:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	6892      	ldr	r2, [r2, #8]
 8006070:	0211      	lsls	r1, r2, #8
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	68d2      	ldr	r2, [r2, #12]
 8006076:	0912      	lsrs	r2, r2, #4
 8006078:	0452      	lsls	r2, r2, #17
 800607a:	430a      	orrs	r2, r1
 800607c:	491f      	ldr	r1, [pc, #124]	; (80060fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800607e:	4313      	orrs	r3, r2
 8006080:	614b      	str	r3, [r1, #20]
 8006082:	e011      	b.n	80060a8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006084:	4b1d      	ldr	r3, [pc, #116]	; (80060fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006086:	695b      	ldr	r3, [r3, #20]
 8006088:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800608c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	6892      	ldr	r2, [r2, #8]
 8006094:	0211      	lsls	r1, r2, #8
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	6912      	ldr	r2, [r2, #16]
 800609a:	0852      	lsrs	r2, r2, #1
 800609c:	3a01      	subs	r2, #1
 800609e:	0652      	lsls	r2, r2, #25
 80060a0:	430a      	orrs	r2, r1
 80060a2:	4916      	ldr	r1, [pc, #88]	; (80060fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80060a4:	4313      	orrs	r3, r2
 80060a6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80060a8:	4b14      	ldr	r3, [pc, #80]	; (80060fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a13      	ldr	r2, [pc, #76]	; (80060fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80060ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060b4:	f7fa fa72 	bl	800059c <HAL_GetTick>
 80060b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80060ba:	e009      	b.n	80060d0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80060bc:	f7fa fa6e 	bl	800059c <HAL_GetTick>
 80060c0:	4602      	mov	r2, r0
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d902      	bls.n	80060d0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	73fb      	strb	r3, [r7, #15]
          break;
 80060ce:	e005      	b.n	80060dc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80060d0:	4b0a      	ldr	r3, [pc, #40]	; (80060fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d0ef      	beq.n	80060bc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80060dc:	7bfb      	ldrb	r3, [r7, #15]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d106      	bne.n	80060f0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80060e2:	4b06      	ldr	r3, [pc, #24]	; (80060fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80060e4:	695a      	ldr	r2, [r3, #20]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	4904      	ldr	r1, [pc, #16]	; (80060fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80060ec:	4313      	orrs	r3, r2
 80060ee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80060f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	40021000 	.word	0x40021000

08006100 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8006100:	b480      	push	{r7}
 8006102:	b089      	sub	sp, #36	; 0x24
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800610a:	2300      	movs	r3, #0
 800610c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800610e:	2300      	movs	r3, #0
 8006110:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8006112:	2300      	movs	r3, #0
 8006114:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800611c:	d10c      	bne.n	8006138 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800611e:	4b6e      	ldr	r3, [pc, #440]	; (80062d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006124:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006128:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006130:	d112      	bne.n	8006158 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006132:	4b6a      	ldr	r3, [pc, #424]	; (80062dc <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8006134:	61fb      	str	r3, [r7, #28]
 8006136:	e00f      	b.n	8006158 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800613e:	d10b      	bne.n	8006158 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006140:	4b65      	ldr	r3, [pc, #404]	; (80062d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006146:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800614a:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006152:	d101      	bne.n	8006158 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8006154:	4b61      	ldr	r3, [pc, #388]	; (80062dc <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8006156:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	2b00      	cmp	r3, #0
 800615c:	f040 80b4 	bne.w	80062c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800616a:	d003      	beq.n	8006174 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006172:	d135      	bne.n	80061e0 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006174:	4b58      	ldr	r3, [pc, #352]	; (80062d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800617c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006180:	f040 80a1 	bne.w	80062c6 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8006184:	4b54      	ldr	r3, [pc, #336]	; (80062d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800618c:	2b00      	cmp	r3, #0
 800618e:	f000 809a 	beq.w	80062c6 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006192:	4b51      	ldr	r3, [pc, #324]	; (80062d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	091b      	lsrs	r3, r3, #4
 8006198:	f003 0307 	and.w	r3, r3, #7
 800619c:	3301      	adds	r3, #1
 800619e:	693a      	ldr	r2, [r7, #16]
 80061a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061a4:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80061a6:	4b4c      	ldr	r3, [pc, #304]	; (80062d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	0a1b      	lsrs	r3, r3, #8
 80061ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061b0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d10a      	bne.n	80061ce <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80061b8:	4b47      	ldr	r3, [pc, #284]	; (80062d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d002      	beq.n	80061ca <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 80061c4:	2311      	movs	r3, #17
 80061c6:	617b      	str	r3, [r7, #20]
 80061c8:	e001      	b.n	80061ce <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 80061ca:	2307      	movs	r3, #7
 80061cc:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	fb03 f202 	mul.w	r2, r3, r2
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061dc:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80061de:	e072      	b.n	80062c6 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d133      	bne.n	800624e <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80061e6:	4b3c      	ldr	r3, [pc, #240]	; (80062d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061f2:	d169      	bne.n	80062c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 80061f4:	4b38      	ldr	r3, [pc, #224]	; (80062d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d063      	beq.n	80062c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006200:	4b35      	ldr	r3, [pc, #212]	; (80062d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	091b      	lsrs	r3, r3, #4
 8006206:	f003 0307 	and.w	r3, r3, #7
 800620a:	3301      	adds	r3, #1
 800620c:	693a      	ldr	r2, [r7, #16]
 800620e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006212:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006214:	4b30      	ldr	r3, [pc, #192]	; (80062d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	0a1b      	lsrs	r3, r3, #8
 800621a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800621e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d10a      	bne.n	800623c <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8006226:	4b2c      	ldr	r3, [pc, #176]	; (80062d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800622e:	2b00      	cmp	r3, #0
 8006230:	d002      	beq.n	8006238 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8006232:	2311      	movs	r3, #17
 8006234:	617b      	str	r3, [r7, #20]
 8006236:	e001      	b.n	800623c <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8006238:	2307      	movs	r3, #7
 800623a:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	fb03 f202 	mul.w	r2, r3, r2
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	fbb2 f3f3 	udiv	r3, r2, r3
 800624a:	61fb      	str	r3, [r7, #28]
 800624c:	e03c      	b.n	80062c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006254:	d003      	beq.n	800625e <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800625c:	d134      	bne.n	80062c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800625e:	4b1e      	ldr	r3, [pc, #120]	; (80062d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006266:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800626a:	d12d      	bne.n	80062c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 800626c:	4b1a      	ldr	r3, [pc, #104]	; (80062d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800626e:	695b      	ldr	r3, [r3, #20]
 8006270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006274:	2b00      	cmp	r3, #0
 8006276:	d027      	beq.n	80062c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006278:	4b17      	ldr	r3, [pc, #92]	; (80062d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	091b      	lsrs	r3, r3, #4
 800627e:	f003 0307 	and.w	r3, r3, #7
 8006282:	3301      	adds	r3, #1
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	fbb2 f3f3 	udiv	r3, r2, r3
 800628a:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800628c:	4b12      	ldr	r3, [pc, #72]	; (80062d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800628e:	695b      	ldr	r3, [r3, #20]
 8006290:	0a1b      	lsrs	r3, r3, #8
 8006292:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006296:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d10a      	bne.n	80062b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800629e:	4b0e      	ldr	r3, [pc, #56]	; (80062d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d002      	beq.n	80062b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 80062aa:	2311      	movs	r3, #17
 80062ac:	617b      	str	r3, [r7, #20]
 80062ae:	e001      	b.n	80062b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 80062b0:	2307      	movs	r3, #7
 80062b2:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	fb03 f202 	mul.w	r2, r3, r2
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	fbb2 f3f3 	udiv	r3, r2, r3
 80062c2:	61fb      	str	r3, [r7, #28]
 80062c4:	e000      	b.n	80062c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80062c6:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80062c8:	69fb      	ldr	r3, [r7, #28]
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3724      	adds	r7, #36	; 0x24
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	40021000 	.word	0x40021000
 80062dc:	001fff68 	.word	0x001fff68

080062e0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b088      	sub	sp, #32
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d101      	bne.n	80062f2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e155      	b.n	800659e <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d106      	bne.n	800630c <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f006 fd92 	bl	800ce30 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 f959 	bl	80065c4 <SAI_Disable>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d001      	beq.n	800631c <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e140      	b.n	800659e <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2202      	movs	r2, #2
 8006320:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	2b02      	cmp	r3, #2
 800632a:	d00c      	beq.n	8006346 <HAL_SAI_Init+0x66>
 800632c:	2b02      	cmp	r3, #2
 800632e:	d80d      	bhi.n	800634c <HAL_SAI_Init+0x6c>
 8006330:	2b00      	cmp	r3, #0
 8006332:	d002      	beq.n	800633a <HAL_SAI_Init+0x5a>
 8006334:	2b01      	cmp	r3, #1
 8006336:	d003      	beq.n	8006340 <HAL_SAI_Init+0x60>
 8006338:	e008      	b.n	800634c <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800633a:	2300      	movs	r3, #0
 800633c:	61fb      	str	r3, [r7, #28]
      break;
 800633e:	e008      	b.n	8006352 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8006340:	2310      	movs	r3, #16
 8006342:	61fb      	str	r3, [r7, #28]
      break;
 8006344:	e005      	b.n	8006352 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006346:	2320      	movs	r3, #32
 8006348:	61fb      	str	r3, [r7, #28]
      break;
 800634a:	e002      	b.n	8006352 <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 800634c:	2300      	movs	r3, #0
 800634e:	61fb      	str	r3, [r7, #28]
      break;
 8006350:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	2b03      	cmp	r3, #3
 8006358:	d81d      	bhi.n	8006396 <HAL_SAI_Init+0xb6>
 800635a:	a201      	add	r2, pc, #4	; (adr r2, 8006360 <HAL_SAI_Init+0x80>)
 800635c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006360:	08006371 	.word	0x08006371
 8006364:	08006377 	.word	0x08006377
 8006368:	0800637f 	.word	0x0800637f
 800636c:	08006387 	.word	0x08006387
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8006370:	2300      	movs	r3, #0
 8006372:	617b      	str	r3, [r7, #20]
      break;
 8006374:	e012      	b.n	800639c <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8006376:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800637a:	617b      	str	r3, [r7, #20]
      break;
 800637c:	e00e      	b.n	800639c <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800637e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006382:	617b      	str	r3, [r7, #20]
      break;
 8006384:	e00a      	b.n	800639c <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006386:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800638a:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	f043 0301 	orr.w	r3, r3, #1
 8006392:	61fb      	str	r3, [r7, #28]
      break;
 8006394:	e002      	b.n	800639c <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8006396:	2300      	movs	r3, #0
 8006398:	617b      	str	r3, [r7, #20]
      break;
 800639a:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a81      	ldr	r2, [pc, #516]	; (80065a8 <HAL_SAI_Init+0x2c8>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d004      	beq.n	80063b0 <HAL_SAI_Init+0xd0>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a80      	ldr	r2, [pc, #512]	; (80065ac <HAL_SAI_Init+0x2cc>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d103      	bne.n	80063b8 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 80063b0:	4a7f      	ldr	r2, [pc, #508]	; (80065b0 <HAL_SAI_Init+0x2d0>)
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	6013      	str	r3, [r2, #0]
 80063b6:	e002      	b.n	80063be <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80063b8:	4a7e      	ldr	r2, [pc, #504]	; (80065b4 <HAL_SAI_Init+0x2d4>)
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	69db      	ldr	r3, [r3, #28]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d041      	beq.n	800644a <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a77      	ldr	r2, [pc, #476]	; (80065a8 <HAL_SAI_Init+0x2c8>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d004      	beq.n	80063da <HAL_SAI_Init+0xfa>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a75      	ldr	r2, [pc, #468]	; (80065ac <HAL_SAI_Init+0x2cc>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d105      	bne.n	80063e6 <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80063da:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80063de:	f7fe ff4f 	bl	8005280 <HAL_RCCEx_GetPeriphCLKFreq>
 80063e2:	6138      	str	r0, [r7, #16]
 80063e4:	e004      	b.n	80063f0 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80063e6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80063ea:	f7fe ff49 	bl	8005280 <HAL_RCCEx_GetPeriphCLKFreq>
 80063ee:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	4613      	mov	r3, r2
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	4413      	add	r3, r2
 80063f8:	005b      	lsls	r3, r3, #1
 80063fa:	461a      	mov	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	69db      	ldr	r3, [r3, #28]
 8006400:	025b      	lsls	r3, r3, #9
 8006402:	fbb2 f3f3 	udiv	r3, r2, r3
 8006406:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	4a6b      	ldr	r2, [pc, #428]	; (80065b8 <HAL_SAI_Init+0x2d8>)
 800640c:	fba2 2303 	umull	r2, r3, r2, r3
 8006410:	08da      	lsrs	r2, r3, #3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8006416:	68f9      	ldr	r1, [r7, #12]
 8006418:	4b67      	ldr	r3, [pc, #412]	; (80065b8 <HAL_SAI_Init+0x2d8>)
 800641a:	fba3 2301 	umull	r2, r3, r3, r1
 800641e:	08da      	lsrs	r2, r3, #3
 8006420:	4613      	mov	r3, r2
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	4413      	add	r3, r2
 8006426:	005b      	lsls	r3, r3, #1
 8006428:	1aca      	subs	r2, r1, r3
 800642a:	2a08      	cmp	r2, #8
 800642c:	d904      	bls.n	8006438 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a1b      	ldr	r3, [r3, #32]
 8006432:	1c5a      	adds	r2, r3, #1
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643c:	2b04      	cmp	r3, #4
 800643e:	d104      	bne.n	800644a <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a1b      	ldr	r3, [r3, #32]
 8006444:	085a      	lsrs	r2, r3, #1
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d003      	beq.n	800645a <HAL_SAI_Init+0x17a>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	2b02      	cmp	r3, #2
 8006458:	d109      	bne.n	800646e <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800645e:	2b01      	cmp	r3, #1
 8006460:	d101      	bne.n	8006466 <HAL_SAI_Init+0x186>
 8006462:	2300      	movs	r3, #0
 8006464:	e001      	b.n	800646a <HAL_SAI_Init+0x18a>
 8006466:	f44f 7300 	mov.w	r3, #512	; 0x200
 800646a:	61bb      	str	r3, [r7, #24]
 800646c:	e008      	b.n	8006480 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006472:	2b01      	cmp	r3, #1
 8006474:	d102      	bne.n	800647c <HAL_SAI_Init+0x19c>
 8006476:	f44f 7300 	mov.w	r3, #512	; 0x200
 800647a:	e000      	b.n	800647e <HAL_SAI_Init+0x19e>
 800647c:	2300      	movs	r3, #0
 800647e:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	6819      	ldr	r1, [r3, #0]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	4b4c      	ldr	r3, [pc, #304]	; (80065bc <HAL_SAI_Init+0x2dc>)
 800648c:	400b      	ands	r3, r1
 800648e:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6819      	ldr	r1, [r3, #0]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	685a      	ldr	r2, [r3, #4]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800649e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80064a4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064aa:	431a      	orrs	r2, r3
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 80064b8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80064c4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	051b      	lsls	r3, r3, #20
 80064cc:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	430a      	orrs	r2, r1
 80064d4:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	6812      	ldr	r2, [r2, #0]
 80064e0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80064e4:	f023 030f 	bic.w	r3, r3, #15
 80064e8:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	6859      	ldr	r1, [r3, #4]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	699a      	ldr	r2, [r3, #24]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f8:	431a      	orrs	r2, r3
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fe:	431a      	orrs	r2, r3
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	430a      	orrs	r2, r1
 8006506:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	6899      	ldr	r1, [r3, #8]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	4b2b      	ldr	r3, [pc, #172]	; (80065c0 <HAL_SAI_Init+0x2e0>)
 8006514:	400b      	ands	r3, r1
 8006516:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	6899      	ldr	r1, [r3, #8]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006522:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006528:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800652e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8006534:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800653a:	3b01      	subs	r3, #1
 800653c:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800653e:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	430a      	orrs	r2, r1
 8006546:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68d9      	ldr	r1, [r3, #12]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	f24f 0320 	movw	r3, #61472	; 0xf020
 8006556:	400b      	ands	r3, r1
 8006558:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68d9      	ldr	r1, [r3, #12]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006568:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800656e:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006570:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006576:	3b01      	subs	r3, #1
 8006578:	021b      	lsls	r3, r3, #8
 800657a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	430a      	orrs	r2, r1
 8006582:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3720      	adds	r7, #32
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	40015404 	.word	0x40015404
 80065ac:	40015424 	.word	0x40015424
 80065b0:	40015400 	.word	0x40015400
 80065b4:	40015800 	.word	0x40015800
 80065b8:	cccccccd 	.word	0xcccccccd
 80065bc:	ff05c010 	.word	0xff05c010
 80065c0:	fff88000 	.word	0xfff88000

080065c4 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80065cc:	4b18      	ldr	r3, [pc, #96]	; (8006630 <SAI_Disable+0x6c>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a18      	ldr	r2, [pc, #96]	; (8006634 <SAI_Disable+0x70>)
 80065d2:	fba2 2303 	umull	r2, r3, r2, r3
 80065d6:	0b1b      	lsrs	r3, r3, #12
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80065dc:	2300      	movs	r3, #0
 80065de:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80065ee:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d10a      	bne.n	800660c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	72fb      	strb	r3, [r7, #11]
      break;
 800660a:	e009      	b.n	8006620 <SAI_Disable+0x5c>
    }
    count--;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	3b01      	subs	r3, #1
 8006610:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800661c:	2b00      	cmp	r3, #0
 800661e:	d1e7      	bne.n	80065f0 <SAI_Disable+0x2c>

  return status;
 8006620:	7afb      	ldrb	r3, [r7, #11]
}
 8006622:	4618      	mov	r0, r3
 8006624:	3714      	adds	r7, #20
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop
 8006630:	20000028 	.word	0x20000028
 8006634:	95cbec1b 	.word	0x95cbec1b

08006638 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d101      	bne.n	800664a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e022      	b.n	8006690 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006650:	b2db      	uxtb	r3, r3
 8006652:	2b00      	cmp	r3, #0
 8006654:	d105      	bne.n	8006662 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f006 fa9d 	bl	800cb9c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2203      	movs	r2, #3
 8006666:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 f814 	bl	8006698 <HAL_SD_InitCard>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d001      	beq.n	800667a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e00a      	b.n	8006690 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	3708      	adds	r7, #8
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006698:	b5b0      	push	{r4, r5, r7, lr}
 800669a:	b08e      	sub	sp, #56	; 0x38
 800669c:	af04      	add	r7, sp, #16
 800669e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80066a0:	2300      	movs	r3, #0
 80066a2:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80066a4:	2300      	movs	r3, #0
 80066a6:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80066a8:	2300      	movs	r3, #0
 80066aa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80066ac:	2300      	movs	r3, #0
 80066ae:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80066b0:	2300      	movs	r3, #0
 80066b2:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80066b4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80066b8:	f7fe fde2 	bl	8005280 <HAL_RCCEx_GetPeriphCLKFreq>
 80066bc:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 80066be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d109      	bne.n	80066d8 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80066d2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e07b      	b.n	80067d0 <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 80066d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066da:	09db      	lsrs	r3, r3, #7
 80066dc:	4a3e      	ldr	r2, [pc, #248]	; (80067d8 <HAL_SD_InitCard+0x140>)
 80066de:	fba2 2303 	umull	r2, r3, r2, r3
 80066e2:	091b      	lsrs	r3, r3, #4
 80066e4:	3b02      	subs	r3, #2
 80066e6:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681d      	ldr	r5, [r3, #0]
 80066ec:	466c      	mov	r4, sp
 80066ee:	f107 0314 	add.w	r3, r7, #20
 80066f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80066f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80066fa:	f107 0308 	add.w	r3, r7, #8
 80066fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006700:	4628      	mov	r0, r5
 8006702:	f001 ff3f 	bl	8008584 <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	685a      	ldr	r2, [r3, #4]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006714:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4618      	mov	r0, r3
 800671c:	f001 ff6c 	bl	80085f8 <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	685a      	ldr	r2, [r3, #4]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800672e:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	3302      	adds	r3, #2
 8006734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006736:	fbb2 f3f3 	udiv	r3, r2, r3
 800673a:	627b      	str	r3, [r7, #36]	; 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800673c:	4a27      	ldr	r2, [pc, #156]	; (80067dc <HAL_SD_InitCard+0x144>)
 800673e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006740:	fbb2 f3f3 	udiv	r3, r2, r3
 8006744:	3301      	adds	r3, #1
 8006746:	4618      	mov	r0, r3
 8006748:	f7f9 ff34 	bl	80005b4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 fb77 	bl	8006e40 <SD_PowerON>
 8006752:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006754:	6a3b      	ldr	r3, [r7, #32]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00b      	beq.n	8006772 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2201      	movs	r2, #1
 800675e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006766:	6a3b      	ldr	r3, [r7, #32]
 8006768:	431a      	orrs	r2, r3
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	e02e      	b.n	80067d0 <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 fa96 	bl	8006ca4 <SD_InitCard>
 8006778:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800677a:	6a3b      	ldr	r3, [r7, #32]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00b      	beq.n	8006798 <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800678c:	6a3b      	ldr	r3, [r7, #32]
 800678e:	431a      	orrs	r2, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	e01b      	b.n	80067d0 <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80067a0:	4618      	mov	r0, r3
 80067a2:	f001 ffbc 	bl	800871e <SDMMC_CmdBlockLength>
 80067a6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80067a8:	6a3b      	ldr	r3, [r7, #32]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00f      	beq.n	80067ce <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a0b      	ldr	r2, [pc, #44]	; (80067e0 <HAL_SD_InitCard+0x148>)
 80067b4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067ba:	6a3b      	ldr	r3, [r7, #32]
 80067bc:	431a      	orrs	r2, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2201      	movs	r2, #1
 80067c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e000      	b.n	80067d0 <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3728      	adds	r7, #40	; 0x28
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bdb0      	pop	{r4, r5, r7, pc}
 80067d8:	014f8b59 	.word	0x014f8b59
 80067dc:	00012110 	.word	0x00012110
 80067e0:	004005ff 	.word	0x004005ff

080067e4 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067f2:	0f9b      	lsrs	r3, r3, #30
 80067f4:	b2da      	uxtb	r2, r3
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067fe:	0e9b      	lsrs	r3, r3, #26
 8006800:	b2db      	uxtb	r3, r3
 8006802:	f003 030f 	and.w	r3, r3, #15
 8006806:	b2da      	uxtb	r2, r3
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006810:	0e1b      	lsrs	r3, r3, #24
 8006812:	b2db      	uxtb	r3, r3
 8006814:	f003 0303 	and.w	r3, r3, #3
 8006818:	b2da      	uxtb	r2, r3
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006822:	0c1b      	lsrs	r3, r3, #16
 8006824:	b2da      	uxtb	r2, r3
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800682e:	0a1b      	lsrs	r3, r3, #8
 8006830:	b2da      	uxtb	r2, r3
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800683a:	b2da      	uxtb	r2, r3
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006844:	0d1b      	lsrs	r3, r3, #20
 8006846:	b29a      	uxth	r2, r3
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006850:	0c1b      	lsrs	r3, r3, #16
 8006852:	b2db      	uxtb	r3, r3
 8006854:	f003 030f 	and.w	r3, r3, #15
 8006858:	b2da      	uxtb	r2, r3
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006862:	0bdb      	lsrs	r3, r3, #15
 8006864:	b2db      	uxtb	r3, r3
 8006866:	f003 0301 	and.w	r3, r3, #1
 800686a:	b2da      	uxtb	r2, r3
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006874:	0b9b      	lsrs	r3, r3, #14
 8006876:	b2db      	uxtb	r3, r3
 8006878:	f003 0301 	and.w	r3, r3, #1
 800687c:	b2da      	uxtb	r2, r3
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006886:	0b5b      	lsrs	r3, r3, #13
 8006888:	b2db      	uxtb	r3, r3
 800688a:	f003 0301 	and.w	r3, r3, #1
 800688e:	b2da      	uxtb	r2, r3
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006898:	0b1b      	lsrs	r3, r3, #12
 800689a:	b2db      	uxtb	r3, r3
 800689c:	f003 0301 	and.w	r3, r3, #1
 80068a0:	b2da      	uxtb	r2, r3
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	2200      	movs	r2, #0
 80068aa:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d163      	bne.n	800697c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068b8:	009a      	lsls	r2, r3, #2
 80068ba:	f640 73fc 	movw	r3, #4092	; 0xffc
 80068be:	4013      	ands	r3, r2
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80068c4:	0f92      	lsrs	r2, r2, #30
 80068c6:	431a      	orrs	r2, r3
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068d0:	0edb      	lsrs	r3, r3, #27
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	f003 0307 	and.w	r3, r3, #7
 80068d8:	b2da      	uxtb	r2, r3
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068e2:	0e1b      	lsrs	r3, r3, #24
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	f003 0307 	and.w	r3, r3, #7
 80068ea:	b2da      	uxtb	r2, r3
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068f4:	0d5b      	lsrs	r3, r3, #21
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	f003 0307 	and.w	r3, r3, #7
 80068fc:	b2da      	uxtb	r2, r3
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006906:	0c9b      	lsrs	r3, r3, #18
 8006908:	b2db      	uxtb	r3, r3
 800690a:	f003 0307 	and.w	r3, r3, #7
 800690e:	b2da      	uxtb	r2, r3
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006918:	0bdb      	lsrs	r3, r3, #15
 800691a:	b2db      	uxtb	r3, r3
 800691c:	f003 0307 	and.w	r3, r3, #7
 8006920:	b2da      	uxtb	r2, r3
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	1c5a      	adds	r2, r3, #1
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	7e1b      	ldrb	r3, [r3, #24]
 8006934:	b2db      	uxtb	r3, r3
 8006936:	f003 0307 	and.w	r3, r3, #7
 800693a:	3302      	adds	r3, #2
 800693c:	2201      	movs	r2, #1
 800693e:	fa02 f303 	lsl.w	r3, r2, r3
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006946:	fb03 f202 	mul.w	r2, r3, r2
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	7a1b      	ldrb	r3, [r3, #8]
 8006952:	b2db      	uxtb	r3, r3
 8006954:	f003 030f 	and.w	r3, r3, #15
 8006958:	2201      	movs	r2, #1
 800695a:	409a      	lsls	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006968:	0a52      	lsrs	r2, r2, #9
 800696a:	fb03 f202 	mul.w	r2, r3, r2
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006978:	661a      	str	r2, [r3, #96]	; 0x60
 800697a:	e031      	b.n	80069e0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006980:	2b01      	cmp	r3, #1
 8006982:	d11d      	bne.n	80069c0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006988:	041b      	lsls	r3, r3, #16
 800698a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006992:	0c1b      	lsrs	r3, r3, #16
 8006994:	431a      	orrs	r2, r3
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	3301      	adds	r3, #1
 80069a0:	029a      	lsls	r2, r3, #10
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069b4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	661a      	str	r2, [r3, #96]	; 0x60
 80069be:	e00f      	b.n	80069e0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a58      	ldr	r2, [pc, #352]	; (8006b28 <HAL_SD_GetCardCSD+0x344>)
 80069c6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	e09d      	b.n	8006b1c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069e4:	0b9b      	lsrs	r3, r3, #14
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	f003 0301 	and.w	r3, r3, #1
 80069ec:	b2da      	uxtb	r2, r3
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069f6:	09db      	lsrs	r3, r3, #7
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069fe:	b2da      	uxtb	r2, r3
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a0e:	b2da      	uxtb	r2, r3
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a18:	0fdb      	lsrs	r3, r3, #31
 8006a1a:	b2da      	uxtb	r2, r3
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a24:	0f5b      	lsrs	r3, r3, #29
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	f003 0303 	and.w	r3, r3, #3
 8006a2c:	b2da      	uxtb	r2, r3
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a36:	0e9b      	lsrs	r3, r3, #26
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	f003 0307 	and.w	r3, r3, #7
 8006a3e:	b2da      	uxtb	r2, r3
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a48:	0d9b      	lsrs	r3, r3, #22
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	f003 030f 	and.w	r3, r3, #15
 8006a50:	b2da      	uxtb	r2, r3
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a5a:	0d5b      	lsrs	r3, r3, #21
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	f003 0301 	and.w	r3, r3, #1
 8006a62:	b2da      	uxtb	r2, r3
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a76:	0c1b      	lsrs	r3, r3, #16
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	f003 0301 	and.w	r3, r3, #1
 8006a7e:	b2da      	uxtb	r2, r3
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a8a:	0bdb      	lsrs	r3, r3, #15
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	f003 0301 	and.w	r3, r3, #1
 8006a92:	b2da      	uxtb	r2, r3
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a9e:	0b9b      	lsrs	r3, r3, #14
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	f003 0301 	and.w	r3, r3, #1
 8006aa6:	b2da      	uxtb	r2, r3
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ab2:	0b5b      	lsrs	r3, r3, #13
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	f003 0301 	and.w	r3, r3, #1
 8006aba:	b2da      	uxtb	r2, r3
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ac6:	0b1b      	lsrs	r3, r3, #12
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	f003 0301 	and.w	r3, r3, #1
 8006ace:	b2da      	uxtb	r2, r3
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ada:	0a9b      	lsrs	r3, r3, #10
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	f003 0303 	and.w	r3, r3, #3
 8006ae2:	b2da      	uxtb	r2, r3
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aee:	0a1b      	lsrs	r3, r3, #8
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	f003 0303 	and.w	r3, r3, #3
 8006af6:	b2da      	uxtb	r2, r3
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b02:	085b      	lsrs	r3, r3, #1
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b0a:	b2da      	uxtb	r2, r3
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	2201      	movs	r2, #1
 8006b16:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr
 8006b28:	004005ff 	.word	0x004005ff

08006b2c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006b2c:	b5b0      	push	{r4, r5, r7, lr}
 8006b2e:	b090      	sub	sp, #64	; 0x40
 8006b30:	af04      	add	r7, sp, #16
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8006b36:	2300      	movs	r3, #0
 8006b38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2203      	movs	r2, #3
 8006b40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b48:	2b03      	cmp	r3, #3
 8006b4a:	d02e      	beq.n	8006baa <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b52:	d106      	bne.n	8006b62 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b58:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	639a      	str	r2, [r3, #56]	; 0x38
 8006b60:	e029      	b.n	8006bb6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b68:	d10a      	bne.n	8006b80 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 f9f6 	bl	8006f5c <SD_WideBus_Enable>
 8006b70:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b78:	431a      	orrs	r2, r3
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	639a      	str	r2, [r3, #56]	; 0x38
 8006b7e:	e01a      	b.n	8006bb6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d10a      	bne.n	8006b9c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 fa33 	bl	8006ff2 <SD_WideBus_Disable>
 8006b8c:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b94:	431a      	orrs	r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	639a      	str	r2, [r3, #56]	; 0x38
 8006b9a:	e00c      	b.n	8006bb6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	639a      	str	r2, [r3, #56]	; 0x38
 8006ba8:	e005      	b.n	8006bb6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bae:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d007      	beq.n	8006bce <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a35      	ldr	r2, [pc, #212]	; (8006c98 <HAL_SD_ConfigWideBusOperation+0x16c>)
 8006bc4:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006bcc:	e042      	b.n	8006c54 <HAL_SD_ConfigWideBusOperation+0x128>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8006bce:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006bd2:	f7fe fb55 	bl	8005280 <HAL_RCCEx_GetPeriphCLKFreq>
 8006bd6:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8006bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d031      	beq.n	8006c42 <HAL_SD_ConfigWideBusOperation+0x116>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	695b      	ldr	r3, [r3, #20]
 8006bf8:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (hsd->Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	699b      	ldr	r3, [r3, #24]
 8006bfe:	3302      	adds	r3, #2
 8006c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c06:	4a25      	ldr	r2, [pc, #148]	; (8006c9c <HAL_SD_ConfigWideBusOperation+0x170>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d907      	bls.n	8006c1c <HAL_SD_ConfigWideBusOperation+0xf0>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 8006c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0e:	4a24      	ldr	r2, [pc, #144]	; (8006ca0 <HAL_SD_ConfigWideBusOperation+0x174>)
 8006c10:	fba2 2303 	umull	r2, r3, r2, r3
 8006c14:	0ddb      	lsrs	r3, r3, #23
 8006c16:	3b02      	subs	r3, #2
 8006c18:	623b      	str	r3, [r7, #32]
 8006c1a:	e002      	b.n	8006c22 <HAL_SD_ConfigWideBusOperation+0xf6>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	699b      	ldr	r3, [r3, #24]
 8006c20:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681d      	ldr	r5, [r3, #0]
 8006c26:	466c      	mov	r4, sp
 8006c28:	f107 0318 	add.w	r3, r7, #24
 8006c2c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006c30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006c34:	f107 030c 	add.w	r3, r7, #12
 8006c38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c3a:	4628      	mov	r0, r5
 8006c3c:	f001 fca2 	bl	8008584 <SDMMC_Init>
 8006c40:	e008      	b.n	8006c54 <HAL_SD_ConfigWideBusOperation+0x128>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c46:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f001 fd5e 	bl	800871e <SDMMC_CmdBlockLength>
 8006c62:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d00c      	beq.n	8006c84 <HAL_SD_ConfigWideBusOperation+0x158>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a0a      	ldr	r2, [pc, #40]	; (8006c98 <HAL_SD_ConfigWideBusOperation+0x16c>)
 8006c70:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c78:	431a      	orrs	r2, r3
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8006c8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3730      	adds	r7, #48	; 0x30
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bdb0      	pop	{r4, r5, r7, pc}
 8006c98:	004005ff 	.word	0x004005ff
 8006c9c:	017d7840 	.word	0x017d7840
 8006ca0:	55e63b89 	.word	0x55e63b89

08006ca4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006ca4:	b5b0      	push	{r4, r5, r7, lr}
 8006ca6:	b094      	sub	sp, #80	; 0x50
 8006ca8:	af04      	add	r7, sp, #16
 8006caa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006cac:	2301      	movs	r3, #1
 8006cae:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f001 fcae 	bl	8008616 <SDMMC_GetPowerState>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d102      	bne.n	8006cc6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006cc0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006cc4:	e0b8      	b.n	8006e38 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cca:	2b03      	cmp	r3, #3
 8006ccc:	d02f      	beq.n	8006d2e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f001 fe2d 	bl	8008932 <SDMMC_CmdSendCID>
 8006cd8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d001      	beq.n	8006ce4 <SD_InitCard+0x40>
    {
      return errorstate;
 8006ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ce2:	e0a9      	b.n	8006e38 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2100      	movs	r1, #0
 8006cea:	4618      	mov	r0, r3
 8006cec:	f001 fcd8 	bl	80086a0 <SDMMC_GetResponse>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2104      	movs	r1, #4
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f001 fccf 	bl	80086a0 <SDMMC_GetResponse>
 8006d02:	4602      	mov	r2, r0
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2108      	movs	r1, #8
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f001 fcc6 	bl	80086a0 <SDMMC_GetResponse>
 8006d14:	4602      	mov	r2, r0
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	210c      	movs	r1, #12
 8006d20:	4618      	mov	r0, r3
 8006d22:	f001 fcbd 	bl	80086a0 <SDMMC_GetResponse>
 8006d26:	4602      	mov	r2, r0
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d32:	2b03      	cmp	r3, #3
 8006d34:	d00d      	beq.n	8006d52 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f107 020e 	add.w	r2, r7, #14
 8006d3e:	4611      	mov	r1, r2
 8006d40:	4618      	mov	r0, r3
 8006d42:	f001 fe33 	bl	80089ac <SDMMC_CmdSetRelAdd>
 8006d46:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d001      	beq.n	8006d52 <SD_InitCard+0xae>
    {
      return errorstate;
 8006d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d50:	e072      	b.n	8006e38 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d56:	2b03      	cmp	r3, #3
 8006d58:	d036      	beq.n	8006dc8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006d5a:	89fb      	ldrh	r3, [r7, #14]
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d6a:	041b      	lsls	r3, r3, #16
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	4610      	mov	r0, r2
 8006d70:	f001 fdfd 	bl	800896e <SDMMC_CmdSendCSD>
 8006d74:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d001      	beq.n	8006d80 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d7e:	e05b      	b.n	8006e38 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2100      	movs	r1, #0
 8006d86:	4618      	mov	r0, r3
 8006d88:	f001 fc8a 	bl	80086a0 <SDMMC_GetResponse>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2104      	movs	r1, #4
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f001 fc81 	bl	80086a0 <SDMMC_GetResponse>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2108      	movs	r1, #8
 8006daa:	4618      	mov	r0, r3
 8006dac:	f001 fc78 	bl	80086a0 <SDMMC_GetResponse>
 8006db0:	4602      	mov	r2, r0
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	210c      	movs	r1, #12
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f001 fc6f 	bl	80086a0 <SDMMC_GetResponse>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2104      	movs	r1, #4
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f001 fc66 	bl	80086a0 <SDMMC_GetResponse>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	0d1a      	lsrs	r2, r3, #20
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006ddc:	f107 0310 	add.w	r3, r7, #16
 8006de0:	4619      	mov	r1, r3
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f7ff fcfe 	bl	80067e4 <HAL_SD_GetCardCSD>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d002      	beq.n	8006df4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006dee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006df2:	e021      	b.n	8006e38 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6819      	ldr	r1, [r3, #0]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dfc:	041b      	lsls	r3, r3, #16
 8006dfe:	2200      	movs	r2, #0
 8006e00:	461c      	mov	r4, r3
 8006e02:	4615      	mov	r5, r2
 8006e04:	4622      	mov	r2, r4
 8006e06:	462b      	mov	r3, r5
 8006e08:	4608      	mov	r0, r1
 8006e0a:	f001 fcaa 	bl	8008762 <SDMMC_CmdSelDesel>
 8006e0e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d001      	beq.n	8006e1a <SD_InitCard+0x176>
  {
    return errorstate;
 8006e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e18:	e00e      	b.n	8006e38 <SD_InitCard+0x194>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681d      	ldr	r5, [r3, #0]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	466c      	mov	r4, sp
 8006e22:	f103 0210 	add.w	r2, r3, #16
 8006e26:	ca07      	ldmia	r2, {r0, r1, r2}
 8006e28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006e2c:	3304      	adds	r3, #4
 8006e2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006e30:	4628      	mov	r0, r5
 8006e32:	f001 fba7 	bl	8008584 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006e36:	2300      	movs	r3, #0
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3740      	adds	r7, #64	; 0x40
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bdb0      	pop	{r4, r5, r7, pc}

08006e40 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b086      	sub	sp, #24
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	617b      	str	r3, [r7, #20]
 8006e50:	2300      	movs	r3, #0
 8006e52:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f001 fca5 	bl	80087a8 <SDMMC_CmdGoIdleState>
 8006e5e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d001      	beq.n	8006e6a <SD_PowerON+0x2a>
  {
    return errorstate;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	e072      	b.n	8006f50 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f001 fcb8 	bl	80087e4 <SDMMC_CmdOperCond>
 8006e74:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d00d      	beq.n	8006e98 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4618      	mov	r0, r3
 8006e88:	f001 fc8e 	bl	80087a8 <SDMMC_CmdGoIdleState>
 8006e8c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d004      	beq.n	8006e9e <SD_PowerON+0x5e>
    {
      return errorstate;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	e05b      	b.n	8006f50 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d137      	bne.n	8006f16 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2100      	movs	r1, #0
 8006eac:	4618      	mov	r0, r3
 8006eae:	f001 fcb8 	bl	8008822 <SDMMC_CmdAppCommand>
 8006eb2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d02d      	beq.n	8006f16 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006eba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006ebe:	e047      	b.n	8006f50 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2100      	movs	r1, #0
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f001 fcab 	bl	8008822 <SDMMC_CmdAppCommand>
 8006ecc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d001      	beq.n	8006ed8 <SD_PowerON+0x98>
    {
      return errorstate;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	e03b      	b.n	8006f50 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	491e      	ldr	r1, [pc, #120]	; (8006f58 <SD_PowerON+0x118>)
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f001 fcc1 	bl	8008866 <SDMMC_CmdAppOperCommand>
 8006ee4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d002      	beq.n	8006ef2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006eec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006ef0:	e02e      	b.n	8006f50 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2100      	movs	r1, #0
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f001 fbd1 	bl	80086a0 <SDMMC_GetResponse>
 8006efe:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	0fdb      	lsrs	r3, r3, #31
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d101      	bne.n	8006f0c <SD_PowerON+0xcc>
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e000      	b.n	8006f0e <SD_PowerON+0xce>
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	613b      	str	r3, [r7, #16]

    count++;
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	3301      	adds	r3, #1
 8006f14:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d802      	bhi.n	8006f26 <SD_PowerON+0xe6>
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d0cc      	beq.n	8006ec0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d902      	bls.n	8006f36 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006f30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f34:	e00c      	b.n	8006f50 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d003      	beq.n	8006f48 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	645a      	str	r2, [r3, #68]	; 0x44
 8006f46:	e002      	b.n	8006f4e <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3718      	adds	r7, #24
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	c1100000 	.word	0xc1100000

08006f5c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b086      	sub	sp, #24
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006f64:	2300      	movs	r3, #0
 8006f66:	60fb      	str	r3, [r7, #12]
 8006f68:	2300      	movs	r3, #0
 8006f6a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	2100      	movs	r1, #0
 8006f72:	4618      	mov	r0, r3
 8006f74:	f001 fb94 	bl	80086a0 <SDMMC_GetResponse>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f82:	d102      	bne.n	8006f8a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006f84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f88:	e02f      	b.n	8006fea <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006f8a:	f107 030c 	add.w	r3, r7, #12
 8006f8e:	4619      	mov	r1, r3
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 f879 	bl	8007088 <SD_FindSCR>
 8006f96:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d001      	beq.n	8006fa2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	e023      	b.n	8006fea <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d01c      	beq.n	8006fe6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fb4:	041b      	lsls	r3, r3, #16
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	4610      	mov	r0, r2
 8006fba:	f001 fc32 	bl	8008822 <SDMMC_CmdAppCommand>
 8006fbe:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d001      	beq.n	8006fca <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	e00f      	b.n	8006fea <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2102      	movs	r1, #2
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f001 fc6b 	bl	80088ac <SDMMC_CmdBusWidth>
 8006fd6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d001      	beq.n	8006fe2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	e003      	b.n	8006fea <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	e001      	b.n	8006fea <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006fe6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3718      	adds	r7, #24
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b086      	sub	sp, #24
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	60fb      	str	r3, [r7, #12]
 8006ffe:	2300      	movs	r3, #0
 8007000:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2100      	movs	r1, #0
 8007008:	4618      	mov	r0, r3
 800700a:	f001 fb49 	bl	80086a0 <SDMMC_GetResponse>
 800700e:	4603      	mov	r3, r0
 8007010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007014:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007018:	d102      	bne.n	8007020 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800701a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800701e:	e02f      	b.n	8007080 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007020:	f107 030c 	add.w	r3, r7, #12
 8007024:	4619      	mov	r1, r3
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 f82e 	bl	8007088 <SD_FindSCR>
 800702c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d001      	beq.n	8007038 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	e023      	b.n	8007080 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800703e:	2b00      	cmp	r3, #0
 8007040:	d01c      	beq.n	800707c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800704a:	041b      	lsls	r3, r3, #16
 800704c:	4619      	mov	r1, r3
 800704e:	4610      	mov	r0, r2
 8007050:	f001 fbe7 	bl	8008822 <SDMMC_CmdAppCommand>
 8007054:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d001      	beq.n	8007060 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	e00f      	b.n	8007080 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2100      	movs	r1, #0
 8007066:	4618      	mov	r0, r3
 8007068:	f001 fc20 	bl	80088ac <SDMMC_CmdBusWidth>
 800706c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d001      	beq.n	8007078 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	e003      	b.n	8007080 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007078:	2300      	movs	r3, #0
 800707a:	e001      	b.n	8007080 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800707c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007080:	4618      	mov	r0, r3
 8007082:	3718      	adds	r7, #24
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007088:	b590      	push	{r4, r7, lr}
 800708a:	b08f      	sub	sp, #60	; 0x3c
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007092:	f7f9 fa83 	bl	800059c <HAL_GetTick>
 8007096:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007098:	2300      	movs	r3, #0
 800709a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800709c:	2300      	movs	r3, #0
 800709e:	60bb      	str	r3, [r7, #8]
 80070a0:	2300      	movs	r3, #0
 80070a2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2108      	movs	r1, #8
 80070ae:	4618      	mov	r0, r3
 80070b0:	f001 fb35 	bl	800871e <SDMMC_CmdBlockLength>
 80070b4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80070b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d001      	beq.n	80070c0 <SD_FindSCR+0x38>
  {
    return errorstate;
 80070bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070be:	e0a9      	b.n	8007214 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070c8:	041b      	lsls	r3, r3, #16
 80070ca:	4619      	mov	r1, r3
 80070cc:	4610      	mov	r0, r2
 80070ce:	f001 fba8 	bl	8008822 <SDMMC_CmdAppCommand>
 80070d2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80070d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d001      	beq.n	80070de <SD_FindSCR+0x56>
  {
    return errorstate;
 80070da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070dc:	e09a      	b.n	8007214 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80070de:	f04f 33ff 	mov.w	r3, #4294967295
 80070e2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80070e4:	2308      	movs	r3, #8
 80070e6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80070e8:	2330      	movs	r3, #48	; 0x30
 80070ea:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80070ec:	2302      	movs	r3, #2
 80070ee:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80070f0:	2300      	movs	r3, #0
 80070f2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80070f4:	2301      	movs	r3, #1
 80070f6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f107 0210 	add.w	r2, r7, #16
 8007100:	4611      	mov	r1, r2
 8007102:	4618      	mov	r0, r3
 8007104:	f001 fadf 	bl	80086c6 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4618      	mov	r0, r3
 800710e:	f001 fbef 	bl	80088f0 <SDMMC_CmdSendSCR>
 8007112:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007116:	2b00      	cmp	r3, #0
 8007118:	d022      	beq.n	8007160 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800711a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711c:	e07a      	b.n	8007214 <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007124:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00e      	beq.n	800714a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6819      	ldr	r1, [r3, #0]
 8007130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	f107 0208 	add.w	r2, r7, #8
 8007138:	18d4      	adds	r4, r2, r3
 800713a:	4608      	mov	r0, r1
 800713c:	f001 fa4f 	bl	80085de <SDMMC_ReadFIFO>
 8007140:	4603      	mov	r3, r0
 8007142:	6023      	str	r3, [r4, #0]
      index++;
 8007144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007146:	3301      	adds	r3, #1
 8007148:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800714a:	f7f9 fa27 	bl	800059c <HAL_GetTick>
 800714e:	4602      	mov	r2, r0
 8007150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007152:	1ad3      	subs	r3, r2, r3
 8007154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007158:	d102      	bne.n	8007160 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800715a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800715e:	e059      	b.n	8007214 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007166:	f240 432a 	movw	r3, #1066	; 0x42a
 800716a:	4013      	ands	r3, r2
 800716c:	2b00      	cmp	r3, #0
 800716e:	d0d6      	beq.n	800711e <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007176:	f003 0308 	and.w	r3, r3, #8
 800717a:	2b00      	cmp	r3, #0
 800717c:	d005      	beq.n	800718a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2208      	movs	r2, #8
 8007184:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007186:	2308      	movs	r3, #8
 8007188:	e044      	b.n	8007214 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007190:	f003 0302 	and.w	r3, r3, #2
 8007194:	2b00      	cmp	r3, #0
 8007196:	d005      	beq.n	80071a4 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2202      	movs	r2, #2
 800719e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80071a0:	2302      	movs	r3, #2
 80071a2:	e037      	b.n	8007214 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071aa:	f003 0320 	and.w	r3, r3, #32
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d005      	beq.n	80071be <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	2220      	movs	r2, #32
 80071b8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80071ba:	2320      	movs	r3, #32
 80071bc:	e02a      	b.n	8007214 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f240 523a 	movw	r2, #1338	; 0x53a
 80071c6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	061a      	lsls	r2, r3, #24
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	021b      	lsls	r3, r3, #8
 80071d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80071d4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	0a1b      	lsrs	r3, r3, #8
 80071da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80071de:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	0e1b      	lsrs	r3, r3, #24
 80071e4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80071e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e8:	601a      	str	r2, [r3, #0]
    scr++;
 80071ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ec:	3304      	adds	r3, #4
 80071ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	061a      	lsls	r2, r3, #24
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	021b      	lsls	r3, r3, #8
 80071f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80071fc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	0a1b      	lsrs	r3, r3, #8
 8007202:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007206:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	0e1b      	lsrs	r3, r3, #24
 800720c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800720e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007210:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007212:	2300      	movs	r3, #0
}
 8007214:	4618      	mov	r0, r3
 8007216:	373c      	adds	r7, #60	; 0x3c
 8007218:	46bd      	mov	sp, r7
 800721a:	bd90      	pop	{r4, r7, pc}

0800721c <HAL_SMARTCARD_Init>:
  * @param  hsmartcard Pointer to a SMARTCARD_HandleTypeDef structure that contains
  *                    the configuration information for the specified SMARTCARD module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMARTCARD_Init(SMARTCARD_HandleTypeDef *hsmartcard)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  /* Check the SMARTCARD handle allocation */
  if (hsmartcard == NULL)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d101      	bne.n	800722e <HAL_SMARTCARD_Init+0x12>
  {
    return HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	e04d      	b.n	80072ca <HAL_SMARTCARD_Init+0xae>
  }

  /* Check the USART associated to the SMARTCARD handle */
  assert_param(IS_SMARTCARD_INSTANCE(hsmartcard->Instance));

  if (hsmartcard->gState == HAL_SMARTCARD_STATE_RESET)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007232:	2b00      	cmp	r3, #0
 8007234:	d106      	bne.n	8007244 <HAL_SMARTCARD_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hsmartcard->Lock = HAL_UNLOCKED;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    hsmartcard->MspInitCallback(hsmartcard);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_SMARTCARD_MspInit(hsmartcard);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f005 fbee 	bl	800ca20 <HAL_SMARTCARD_MspInit>
#endif /* USE_HAL_SMARTCARD_REGISTER_CALLBACKS */
  }

  hsmartcard->gState = HAL_SMARTCARD_STATE_BUSY;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2224      	movs	r2, #36	; 0x24
 8007248:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral to set smartcard mode */
  CLEAR_BIT(hsmartcard->Instance->CR1, USART_CR1_UE);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f022 0201 	bic.w	r2, r2, #1
 8007258:	601a      	str	r2, [r3, #0]

  /* In SmartCard mode, the following bits must be kept cleared:
  - LINEN in the USART_CR2 register,
  - HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(hsmartcard->Instance->CR2, USART_CR2_LINEN);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	685a      	ldr	r2, [r3, #4]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007268:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(hsmartcard->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	689a      	ldr	r2, [r3, #8]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f022 020a 	bic.w	r2, r2, #10
 8007278:	609a      	str	r2, [r3, #8]

  /* set the USART in SMARTCARD mode */
  SET_BIT(hsmartcard->Instance->CR3, USART_CR3_SCEN);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	689a      	ldr	r2, [r3, #8]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f042 0220 	orr.w	r2, r2, #32
 8007288:	609a      	str	r2, [r3, #8]

  /* Set the SMARTCARD Communication parameters */
  if (SMARTCARD_SetConfig(hsmartcard) == HAL_ERROR)
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 f822 	bl	80072d4 <SMARTCARD_SetConfig>
 8007290:	4603      	mov	r3, r0
 8007292:	2b01      	cmp	r3, #1
 8007294:	d101      	bne.n	800729a <HAL_SMARTCARD_Init+0x7e>
  {
    return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	e017      	b.n	80072ca <HAL_SMARTCARD_Init+0xae>
  }

  /* Set the SMARTCARD transmission completion indication */
  SMARTCARD_TRANSMISSION_COMPLETION_SETTING(hsmartcard);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f240 6226 	movw	r2, #1574	; 0x626
 80072a0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  if (hsmartcard->AdvancedInit.AdvFeatureInit != SMARTCARD_ADVFEATURE_NO_INIT)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d002      	beq.n	80072b2 <HAL_SMARTCARD_Init+0x96>
  {
    SMARTCARD_AdvFeatureConfig(hsmartcard);
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 f99f 	bl	80075f0 <SMARTCARD_AdvFeatureConfig>
  }

  /* Enable the Peripheral */
  SET_BIT(hsmartcard->Instance->CR1, USART_CR1_UE);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f042 0201 	orr.w	r2, r2, #1
 80072c0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving hsmartcard->gState and hsmartcard->RxState to Ready */
  return (SMARTCARD_CheckIdleState(hsmartcard));
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 fa15 	bl	80076f2 <SMARTCARD_CheckIdleState>
 80072c8:	4603      	mov	r3, r0
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3708      	adds	r7, #8
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
	...

080072d4 <SMARTCARD_SetConfig>:
  * @param  hsmartcard Pointer to a SMARTCARD_HandleTypeDef structure that contains
  *                    the configuration information for the specified SMARTCARD module.
  * @retval HAL status
  */
static HAL_StatusTypeDef SMARTCARD_SetConfig(SMARTCARD_HandleTypeDef *hsmartcard)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b086      	sub	sp, #24
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  SMARTCARD_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret = HAL_OK;
 80072dc:	2300      	movs	r3, #0
 80072de:	74bb      	strb	r3, [r7, #18]
  /* In SmartCard mode, M and PCE are forced to 1 (8 bits + parity).
   * Oversampling is forced to 16 (OVER8 = 0).
   * Configure the Parity and Mode:
   *  set PS bit according to hsmartcard->Init.Parity value
   *  set TE and RE bits according to hsmartcard->Init.Mode value */
  tmpreg = (((uint32_t)hsmartcard->Init.Parity) | ((uint32_t)hsmartcard->Init.Mode) |
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	8a1a      	ldrh	r2, [r3, #16]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	8a5b      	ldrh	r3, [r3, #18]
 80072e8:	4313      	orrs	r3, r2
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	461a      	mov	r2, r3
            ((uint32_t)hsmartcard->Init.WordLength));
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	689b      	ldr	r3, [r3, #8]
  tmpreg = (((uint32_t)hsmartcard->Init.Parity) | ((uint32_t)hsmartcard->Init.Mode) |
 80072f2:	4313      	orrs	r3, r2
 80072f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(hsmartcard->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	4ba3      	ldr	r3, [pc, #652]	; (800758c <SMARTCARD_SetConfig+0x2b8>)
 80072fe:	4013      	ands	r3, r2
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	6812      	ldr	r2, [r2, #0]
 8007304:	6979      	ldr	r1, [r7, #20]
 8007306:	430b      	orrs	r3, r1
 8007308:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = hsmartcard->Init.StopBits;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	617b      	str	r3, [r7, #20]
  /* Synchronous mode is activated by default */
  tmpreg |= (uint32_t) USART_CR2_CLKEN | hsmartcard->Init.CLKPolarity;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	8a9b      	ldrh	r3, [r3, #20]
 8007314:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007318:	b29b      	uxth	r3, r3
 800731a:	461a      	mov	r2, r3
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	4313      	orrs	r3, r2
 8007320:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t) hsmartcard->Init.CLKPhase | hsmartcard->Init.CLKLastBit;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	8ada      	ldrh	r2, [r3, #22]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	8b1b      	ldrh	r3, [r3, #24]
 800732a:	4313      	orrs	r3, r2
 800732c:	b29b      	uxth	r3, r3
 800732e:	461a      	mov	r2, r3
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	4313      	orrs	r3, r2
 8007334:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t) hsmartcard->Init.TimeOutEnable;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a1b      	ldr	r3, [r3, #32]
 800733a:	697a      	ldr	r2, [r7, #20]
 800733c:	4313      	orrs	r3, r2
 800733e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(hsmartcard->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800734a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	6812      	ldr	r2, [r2, #0]
 8007352:	6979      	ldr	r1, [r7, #20]
 8007354:	430b      	orrs	r3, r1
 8007356:	6053      	str	r3, [r2, #4]
   *   according to hsmartcard->Init.OneBitSampling
   * - NACK transmission in case of parity error according
   *   to hsmartcard->Init.NACKEnable
   * - autoretry counter according to hsmartcard->Init.AutoRetryCount */

  tmpreg = (uint32_t) hsmartcard->Init.OneBitSampling | hsmartcard->Init.NACKEnable;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	8b5a      	ldrh	r2, [r3, #26]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	8bdb      	ldrh	r3, [r3, #30]
 8007360:	4313      	orrs	r3, r2
 8007362:	b29b      	uxth	r3, r3
 8007364:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)hsmartcard->Init.AutoRetryCount << USART_CR3_SCARCNT_Pos);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800736c:	045b      	lsls	r3, r3, #17
 800736e:	697a      	ldr	r2, [r7, #20]
 8007370:	4313      	orrs	r3, r2
 8007372:	617b      	str	r3, [r7, #20]
  MODIFY_REG(hsmartcard->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 800737e:	f423 6301 	bic.w	r3, r3, #2064	; 0x810
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	6812      	ldr	r2, [r2, #0]
 8007386:	6979      	ldr	r1, [r7, #20]
 8007388:	430b      	orrs	r3, r1
 800738a:	6093      	str	r3, [r2, #8]
  * - SMARTCARD Clock Prescaler: set PRESCALER according to hsmartcard->Init.ClockPrescaler value */
  MODIFY_REG(hsmartcard->Instance->PRESC, USART_PRESC_PRESCALER, hsmartcard->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART GTPR Configuration ----------------------*/
  tmpreg = (hsmartcard->Init.Prescaler | ((uint32_t)hsmartcard->Init.GuardTime << USART_GTPR_GT_Pos));
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	7f1b      	ldrb	r3, [r3, #28]
 8007390:	461a      	mov	r2, r3
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	7f5b      	ldrb	r3, [r3, #29]
 8007396:	021b      	lsls	r3, r3, #8
 8007398:	4313      	orrs	r3, r2
 800739a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(hsmartcard->Instance->GTPR, (uint16_t)(USART_GTPR_GT | USART_GTPR_PSC), (uint16_t)tmpreg);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	8a1b      	ldrh	r3, [r3, #16]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	697a      	ldr	r2, [r7, #20]
 80073a8:	b292      	uxth	r2, r2
 80073aa:	821a      	strh	r2, [r3, #16]

  /*-------------------------- USART RTOR Configuration ----------------------*/
  tmpreg = ((uint32_t)hsmartcard->Init.BlockLength << USART_RTOR_BLEN_Pos);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073b2:	061b      	lsls	r3, r3, #24
 80073b4:	617b      	str	r3, [r7, #20]
  if (hsmartcard->Init.TimeOutEnable == SMARTCARD_TIMEOUT_ENABLE)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a1b      	ldr	r3, [r3, #32]
 80073ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80073be:	d104      	bne.n	80073ca <SMARTCARD_SetConfig+0xf6>
  {
    assert_param(IS_SMARTCARD_TIMEOUT_VALUE(hsmartcard->Init.TimeOutValue));
    tmpreg |= (uint32_t) hsmartcard->Init.TimeOutValue;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c4:	697a      	ldr	r2, [r7, #20]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	617b      	str	r3, [r7, #20]
  }
  MODIFY_REG(hsmartcard->Instance->RTOR, (USART_RTOR_RTO | USART_RTOR_BLEN), tmpreg);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	695b      	ldr	r3, [r3, #20]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	697a      	ldr	r2, [r7, #20]
 80073d6:	615a      	str	r2, [r3, #20]

  /*-------------------------- USART BRR Configuration -----------------------*/
  SMARTCARD_GETCLOCKSOURCE(hsmartcard, clocksource);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a6c      	ldr	r2, [pc, #432]	; (8007590 <SMARTCARD_SetConfig+0x2bc>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d121      	bne.n	8007426 <SMARTCARD_SetConfig+0x152>
 80073e2:	4b6c      	ldr	r3, [pc, #432]	; (8007594 <SMARTCARD_SetConfig+0x2c0>)
 80073e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073e8:	f003 0303 	and.w	r3, r3, #3
 80073ec:	2b03      	cmp	r3, #3
 80073ee:	d817      	bhi.n	8007420 <SMARTCARD_SetConfig+0x14c>
 80073f0:	a201      	add	r2, pc, #4	; (adr r2, 80073f8 <SMARTCARD_SetConfig+0x124>)
 80073f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073f6:	bf00      	nop
 80073f8:	08007409 	.word	0x08007409
 80073fc:	08007415 	.word	0x08007415
 8007400:	0800740f 	.word	0x0800740f
 8007404:	0800741b 	.word	0x0800741b
 8007408:	2301      	movs	r3, #1
 800740a:	74fb      	strb	r3, [r7, #19]
 800740c:	e06b      	b.n	80074e6 <SMARTCARD_SetConfig+0x212>
 800740e:	2302      	movs	r3, #2
 8007410:	74fb      	strb	r3, [r7, #19]
 8007412:	e068      	b.n	80074e6 <SMARTCARD_SetConfig+0x212>
 8007414:	2304      	movs	r3, #4
 8007416:	74fb      	strb	r3, [r7, #19]
 8007418:	e065      	b.n	80074e6 <SMARTCARD_SetConfig+0x212>
 800741a:	2308      	movs	r3, #8
 800741c:	74fb      	strb	r3, [r7, #19]
 800741e:	e062      	b.n	80074e6 <SMARTCARD_SetConfig+0x212>
 8007420:	2310      	movs	r3, #16
 8007422:	74fb      	strb	r3, [r7, #19]
 8007424:	e05f      	b.n	80074e6 <SMARTCARD_SetConfig+0x212>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a5b      	ldr	r2, [pc, #364]	; (8007598 <SMARTCARD_SetConfig+0x2c4>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d132      	bne.n	8007496 <SMARTCARD_SetConfig+0x1c2>
 8007430:	4b58      	ldr	r3, [pc, #352]	; (8007594 <SMARTCARD_SetConfig+0x2c0>)
 8007432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007436:	f003 030c 	and.w	r3, r3, #12
 800743a:	2b0c      	cmp	r3, #12
 800743c:	d828      	bhi.n	8007490 <SMARTCARD_SetConfig+0x1bc>
 800743e:	a201      	add	r2, pc, #4	; (adr r2, 8007444 <SMARTCARD_SetConfig+0x170>)
 8007440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007444:	08007479 	.word	0x08007479
 8007448:	08007491 	.word	0x08007491
 800744c:	08007491 	.word	0x08007491
 8007450:	08007491 	.word	0x08007491
 8007454:	08007485 	.word	0x08007485
 8007458:	08007491 	.word	0x08007491
 800745c:	08007491 	.word	0x08007491
 8007460:	08007491 	.word	0x08007491
 8007464:	0800747f 	.word	0x0800747f
 8007468:	08007491 	.word	0x08007491
 800746c:	08007491 	.word	0x08007491
 8007470:	08007491 	.word	0x08007491
 8007474:	0800748b 	.word	0x0800748b
 8007478:	2300      	movs	r3, #0
 800747a:	74fb      	strb	r3, [r7, #19]
 800747c:	e033      	b.n	80074e6 <SMARTCARD_SetConfig+0x212>
 800747e:	2302      	movs	r3, #2
 8007480:	74fb      	strb	r3, [r7, #19]
 8007482:	e030      	b.n	80074e6 <SMARTCARD_SetConfig+0x212>
 8007484:	2304      	movs	r3, #4
 8007486:	74fb      	strb	r3, [r7, #19]
 8007488:	e02d      	b.n	80074e6 <SMARTCARD_SetConfig+0x212>
 800748a:	2308      	movs	r3, #8
 800748c:	74fb      	strb	r3, [r7, #19]
 800748e:	e02a      	b.n	80074e6 <SMARTCARD_SetConfig+0x212>
 8007490:	2310      	movs	r3, #16
 8007492:	74fb      	strb	r3, [r7, #19]
 8007494:	e027      	b.n	80074e6 <SMARTCARD_SetConfig+0x212>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a40      	ldr	r2, [pc, #256]	; (800759c <SMARTCARD_SetConfig+0x2c8>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d120      	bne.n	80074e2 <SMARTCARD_SetConfig+0x20e>
 80074a0:	4b3c      	ldr	r3, [pc, #240]	; (8007594 <SMARTCARD_SetConfig+0x2c0>)
 80074a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074a6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80074aa:	2b30      	cmp	r3, #48	; 0x30
 80074ac:	d013      	beq.n	80074d6 <SMARTCARD_SetConfig+0x202>
 80074ae:	2b30      	cmp	r3, #48	; 0x30
 80074b0:	d814      	bhi.n	80074dc <SMARTCARD_SetConfig+0x208>
 80074b2:	2b20      	cmp	r3, #32
 80074b4:	d009      	beq.n	80074ca <SMARTCARD_SetConfig+0x1f6>
 80074b6:	2b20      	cmp	r3, #32
 80074b8:	d810      	bhi.n	80074dc <SMARTCARD_SetConfig+0x208>
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d002      	beq.n	80074c4 <SMARTCARD_SetConfig+0x1f0>
 80074be:	2b10      	cmp	r3, #16
 80074c0:	d006      	beq.n	80074d0 <SMARTCARD_SetConfig+0x1fc>
 80074c2:	e00b      	b.n	80074dc <SMARTCARD_SetConfig+0x208>
 80074c4:	2300      	movs	r3, #0
 80074c6:	74fb      	strb	r3, [r7, #19]
 80074c8:	e00d      	b.n	80074e6 <SMARTCARD_SetConfig+0x212>
 80074ca:	2302      	movs	r3, #2
 80074cc:	74fb      	strb	r3, [r7, #19]
 80074ce:	e00a      	b.n	80074e6 <SMARTCARD_SetConfig+0x212>
 80074d0:	2304      	movs	r3, #4
 80074d2:	74fb      	strb	r3, [r7, #19]
 80074d4:	e007      	b.n	80074e6 <SMARTCARD_SetConfig+0x212>
 80074d6:	2308      	movs	r3, #8
 80074d8:	74fb      	strb	r3, [r7, #19]
 80074da:	e004      	b.n	80074e6 <SMARTCARD_SetConfig+0x212>
 80074dc:	2310      	movs	r3, #16
 80074de:	74fb      	strb	r3, [r7, #19]
 80074e0:	e001      	b.n	80074e6 <SMARTCARD_SetConfig+0x212>
 80074e2:	2310      	movs	r3, #16
 80074e4:	74fb      	strb	r3, [r7, #19]
  tmpreg =   0U;
 80074e6:	2300      	movs	r3, #0
 80074e8:	617b      	str	r3, [r7, #20]
  switch (clocksource)
 80074ea:	7cfb      	ldrb	r3, [r7, #19]
 80074ec:	2b08      	cmp	r3, #8
 80074ee:	d862      	bhi.n	80075b6 <SMARTCARD_SetConfig+0x2e2>
 80074f0:	a201      	add	r2, pc, #4	; (adr r2, 80074f8 <SMARTCARD_SetConfig+0x224>)
 80074f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f6:	bf00      	nop
 80074f8:	0800751d 	.word	0x0800751d
 80074fc:	08007539 	.word	0x08007539
 8007500:	08007555 	.word	0x08007555
 8007504:	080075b7 	.word	0x080075b7
 8007508:	0800756f 	.word	0x0800756f
 800750c:	080075b7 	.word	0x080075b7
 8007510:	080075b7 	.word	0x080075b7
 8007514:	080075b7 	.word	0x080075b7
 8007518:	080075a1 	.word	0x080075a1
  {
    case SMARTCARD_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800751c:	f7fd fb3a 	bl	8004b94 <HAL_RCC_GetPCLK1Freq>
 8007520:	60f8      	str	r0, [r7, #12]
#if defined(USART_PRESC_PRESCALER)
      tmpreg = (uint32_t)(((pclk / SMARTCARDPrescTable[hsmartcard->Init.ClockPrescaler]) +
                           (hsmartcard->Init.BaudRate / 2U)) / hsmartcard->Init.BaudRate);
#else
      tmpreg = (uint32_t)((pclk + (hsmartcard->Init.BaudRate / 2U)) / hsmartcard->Init.BaudRate);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	085a      	lsrs	r2, r3, #1
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	441a      	add	r2, r3
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	fbb2 f3f3 	udiv	r3, r2, r3
 8007534:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
      break;
 8007536:	e041      	b.n	80075bc <SMARTCARD_SetConfig+0x2e8>
    case SMARTCARD_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8007538:	f7fd fb42 	bl	8004bc0 <HAL_RCC_GetPCLK2Freq>
 800753c:	60f8      	str	r0, [r7, #12]
#if defined(USART_PRESC_PRESCALER)
      tmpreg = (uint32_t)(((pclk / SMARTCARDPrescTable[hsmartcard->Init.ClockPrescaler]) +
                           (hsmartcard->Init.BaudRate / 2U)) / hsmartcard->Init.BaudRate);
#else
      tmpreg = (uint32_t)((pclk + (hsmartcard->Init.BaudRate / 2U)) / hsmartcard->Init.BaudRate);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	085a      	lsrs	r2, r3, #1
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	441a      	add	r2, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007550:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
      break;
 8007552:	e033      	b.n	80075bc <SMARTCARD_SetConfig+0x2e8>
    case SMARTCARD_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
      tmpreg = (uint32_t)(((HSI_VALUE / SMARTCARDPrescTable[hsmartcard->Init.ClockPrescaler]) +
                           (hsmartcard->Init.BaudRate / 2U)) / hsmartcard->Init.BaudRate);
#else
      tmpreg = (uint32_t)((HSI_VALUE + (hsmartcard->Init.BaudRate / 2U)) / hsmartcard->Init.BaudRate);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	085b      	lsrs	r3, r3, #1
 800755a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800755e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	6852      	ldr	r2, [r2, #4]
 8007566:	fbb3 f3f2 	udiv	r3, r3, r2
 800756a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
      break;
 800756c:	e026      	b.n	80075bc <SMARTCARD_SetConfig+0x2e8>
    case SMARTCARD_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 800756e:	f7fd fa79 	bl	8004a64 <HAL_RCC_GetSysClockFreq>
 8007572:	60f8      	str	r0, [r7, #12]
#if defined(USART_PRESC_PRESCALER)
      tmpreg = (uint32_t)(((pclk / SMARTCARDPrescTable[hsmartcard->Init.ClockPrescaler]) +
                           (hsmartcard->Init.BaudRate / 2U)) / hsmartcard->Init.BaudRate);
#else
      tmpreg = (uint32_t)((pclk + (hsmartcard->Init.BaudRate / 2U)) / hsmartcard->Init.BaudRate);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	085a      	lsrs	r2, r3, #1
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	441a      	add	r2, r3
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	fbb2 f3f3 	udiv	r3, r2, r3
 8007586:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
      break;
 8007588:	e018      	b.n	80075bc <SMARTCARD_SetConfig+0x2e8>
 800758a:	bf00      	nop
 800758c:	efff69f3 	.word	0xefff69f3
 8007590:	40013800 	.word	0x40013800
 8007594:	40021000 	.word	0x40021000
 8007598:	40004400 	.word	0x40004400
 800759c:	40004800 	.word	0x40004800
    case SMARTCARD_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      tmpreg = (uint32_t)(((uint16_t)(LSE_VALUE / SMARTCARDPrescTable[hsmartcard->Init.ClockPrescaler]) +
                           (hsmartcard->Init.BaudRate / 2U)) / hsmartcard->Init.BaudRate);
#else
      tmpreg = (uint32_t)((LSE_VALUE + (hsmartcard->Init.BaudRate / 2U)) / hsmartcard->Init.BaudRate);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	085b      	lsrs	r3, r3, #1
 80075a6:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80075b2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
      break;
 80075b4:	e002      	b.n	80075bc <SMARTCARD_SetConfig+0x2e8>
    default:
      ret = HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	74bb      	strb	r3, [r7, #18]
      break;
 80075ba:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 */
  if ((tmpreg >= USART_BRR_MIN) && (tmpreg <= USART_BRR_MAX))
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	2b0f      	cmp	r3, #15
 80075c0:	d909      	bls.n	80075d6 <SMARTCARD_SetConfig+0x302>
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075c8:	d205      	bcs.n	80075d6 <SMARTCARD_SetConfig+0x302>
  {
    hsmartcard->Instance->BRR = (uint16_t)tmpreg;
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	b29a      	uxth	r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	60da      	str	r2, [r3, #12]
 80075d4:	e001      	b.n	80075da <SMARTCARD_SetConfig+0x306>
  }
  else
  {
    ret = HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	74bb      	strb	r3, [r7, #18]
  hsmartcard->NbTxDataToProcess = 1U;
  hsmartcard->NbRxDataToProcess = 1U;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  hsmartcard->RxISR   = NULL;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2200      	movs	r2, #0
 80075de:	661a      	str	r2, [r3, #96]	; 0x60
  hsmartcard->TxISR   = NULL;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80075e6:	7cbb      	ldrb	r3, [r7, #18]
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3718      	adds	r7, #24
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <SMARTCARD_AdvFeatureConfig>:
  * @param hsmartcard Pointer to a SMARTCARD_HandleTypeDef structure that contains
  *                   the configuration information for the specified SMARTCARD module.
  * @retval None
  */
static void SMARTCARD_AdvFeatureConfig(SMARTCARD_HandleTypeDef *hsmartcard)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_SMARTCARD_ADVFEATURE_INIT(hsmartcard->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(hsmartcard->AdvancedInit.AdvFeatureInit, SMARTCARD_ADVFEATURE_TXINVERT_INIT))
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075fc:	f003 0301 	and.w	r3, r3, #1
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00a      	beq.n	800761a <SMARTCARD_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_SMARTCARD_ADVFEATURE_TXINV(hsmartcard->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(hsmartcard->Instance->CR2, USART_CR2_TXINV, hsmartcard->AdvancedInit.TxPinLevelInvert);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	430a      	orrs	r2, r1
 8007618:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(hsmartcard->AdvancedInit.AdvFeatureInit, SMARTCARD_ADVFEATURE_RXINVERT_INIT))
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800761e:	f003 0302 	and.w	r3, r3, #2
 8007622:	2b00      	cmp	r3, #0
 8007624:	d00a      	beq.n	800763c <SMARTCARD_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_SMARTCARD_ADVFEATURE_RXINV(hsmartcard->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(hsmartcard->Instance->CR2, USART_CR2_RXINV, hsmartcard->AdvancedInit.RxPinLevelInvert);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	430a      	orrs	r2, r1
 800763a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(hsmartcard->AdvancedInit.AdvFeatureInit, SMARTCARD_ADVFEATURE_DATAINVERT_INIT))
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007640:	f003 0304 	and.w	r3, r3, #4
 8007644:	2b00      	cmp	r3, #0
 8007646:	d00a      	beq.n	800765e <SMARTCARD_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_SMARTCARD_ADVFEATURE_DATAINV(hsmartcard->AdvancedInit.DataInvert));
    MODIFY_REG(hsmartcard->Instance->CR2, USART_CR2_DATAINV, hsmartcard->AdvancedInit.DataInvert);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	430a      	orrs	r2, r1
 800765c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(hsmartcard->AdvancedInit.AdvFeatureInit, SMARTCARD_ADVFEATURE_SWAP_INIT))
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007662:	f003 0308 	and.w	r3, r3, #8
 8007666:	2b00      	cmp	r3, #0
 8007668:	d00a      	beq.n	8007680 <SMARTCARD_AdvFeatureConfig+0x90>
  {
    assert_param(IS_SMARTCARD_ADVFEATURE_SWAP(hsmartcard->AdvancedInit.Swap));
    MODIFY_REG(hsmartcard->Instance->CR2, USART_CR2_SWAP, hsmartcard->AdvancedInit.Swap);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	430a      	orrs	r2, r1
 800767e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(hsmartcard->AdvancedInit.AdvFeatureInit, SMARTCARD_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007684:	f003 0310 	and.w	r3, r3, #16
 8007688:	2b00      	cmp	r3, #0
 800768a:	d00a      	beq.n	80076a2 <SMARTCARD_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_SMARTCARD_OVERRUN(hsmartcard->AdvancedInit.OverrunDisable));
    MODIFY_REG(hsmartcard->Instance->CR3, USART_CR3_OVRDIS, hsmartcard->AdvancedInit.OverrunDisable);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	430a      	orrs	r2, r1
 80076a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(hsmartcard->AdvancedInit.AdvFeatureInit, SMARTCARD_ADVFEATURE_DMADISABLEONERROR_INIT))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a6:	f003 0320 	and.w	r3, r3, #32
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00a      	beq.n	80076c4 <SMARTCARD_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_SMARTCARD_ADVFEATURE_DMAONRXERROR(hsmartcard->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(hsmartcard->Instance->CR3, USART_CR3_DDRE, hsmartcard->AdvancedInit.DMADisableonRxError);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	430a      	orrs	r2, r1
 80076c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(hsmartcard->AdvancedInit.AdvFeatureInit, SMARTCARD_ADVFEATURE_MSBFIRST_INIT))
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00a      	beq.n	80076e6 <SMARTCARD_AdvFeatureConfig+0xf6>
  {
    assert_param(IS_SMARTCARD_ADVFEATURE_MSBFIRST(hsmartcard->AdvancedInit.MSBFirst));
    MODIFY_REG(hsmartcard->Instance->CR2, USART_CR2_MSBFIRST, hsmartcard->AdvancedInit.MSBFirst);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	430a      	orrs	r2, r1
 80076e4:	605a      	str	r2, [r3, #4]
  }

}
 80076e6:	bf00      	nop
 80076e8:	370c      	adds	r7, #12
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr

080076f2 <SMARTCARD_CheckIdleState>:
  * @param hsmartcard Pointer to a SMARTCARD_HandleTypeDef structure that contains
  *                   the configuration information for the specified SMARTCARD module.
  * @retval HAL status
  */
static HAL_StatusTypeDef SMARTCARD_CheckIdleState(SMARTCARD_HandleTypeDef *hsmartcard)
{
 80076f2:	b580      	push	{r7, lr}
 80076f4:	b086      	sub	sp, #24
 80076f6:	af02      	add	r7, sp, #8
 80076f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the SMARTCARD ErrorCode */
  hsmartcard->ErrorCode = HAL_SMARTCARD_ERROR_NONE;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007700:	f7f8 ff4c 	bl	800059c <HAL_GetTick>
 8007704:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((hsmartcard->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f003 0308 	and.w	r3, r3, #8
 8007710:	2b08      	cmp	r3, #8
 8007712:	d10e      	bne.n	8007732 <SMARTCARD_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (SMARTCARD_WaitOnFlagUntilTimeout(hsmartcard, USART_ISR_TEACK, RESET, tickstart,
 8007714:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007718:	9300      	str	r3, [sp, #0]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2200      	movs	r2, #0
 800771e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 f82a 	bl	800777c <SMARTCARD_WaitOnFlagUntilTimeout>
 8007728:	4603      	mov	r3, r0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d001      	beq.n	8007732 <SMARTCARD_CheckIdleState+0x40>
                                         SMARTCARD_TEACK_REACK_TIMEOUT) != HAL_OK)
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800772e:	2303      	movs	r3, #3
 8007730:	e020      	b.n	8007774 <SMARTCARD_CheckIdleState+0x82>
    }
  }
  /* Check if the Receiver is enabled */
  if ((hsmartcard->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 0304 	and.w	r3, r3, #4
 800773c:	2b04      	cmp	r3, #4
 800773e:	d10e      	bne.n	800775e <SMARTCARD_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (SMARTCARD_WaitOnFlagUntilTimeout(hsmartcard, USART_ISR_REACK, RESET, tickstart,
 8007740:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007744:	9300      	str	r3, [sp, #0]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2200      	movs	r2, #0
 800774a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 f814 	bl	800777c <SMARTCARD_WaitOnFlagUntilTimeout>
 8007754:	4603      	mov	r3, r0
 8007756:	2b00      	cmp	r3, #0
 8007758:	d001      	beq.n	800775e <SMARTCARD_CheckIdleState+0x6c>
                                         SMARTCARD_TEACK_REACK_TIMEOUT) != HAL_OK)
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800775a:	2303      	movs	r3, #3
 800775c:	e00a      	b.n	8007774 <SMARTCARD_CheckIdleState+0x82>
    }
  }

  /* Initialize the SMARTCARD states */
  hsmartcard->gState  = HAL_SMARTCARD_STATE_READY;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2220      	movs	r2, #32
 8007762:	675a      	str	r2, [r3, #116]	; 0x74
  hsmartcard->RxState = HAL_SMARTCARD_STATE_READY;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2220      	movs	r2, #32
 8007768:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(hsmartcard);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007772:	2300      	movs	r3, #0
}
 8007774:	4618      	mov	r0, r3
 8007776:	3710      	adds	r7, #16
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}

0800777c <SMARTCARD_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef SMARTCARD_WaitOnFlagUntilTimeout(SMARTCARD_HandleTypeDef *hsmartcard, uint32_t Flag,
                                                          FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	60b9      	str	r1, [r7, #8]
 8007786:	603b      	str	r3, [r7, #0]
 8007788:	4613      	mov	r3, r2
 800778a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SMARTCARD_GET_FLAG(hsmartcard, Flag) ? SET : RESET) == Status)
 800778c:	e02a      	b.n	80077e4 <SMARTCARD_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800778e:	69bb      	ldr	r3, [r7, #24]
 8007790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007794:	d026      	beq.n	80077e4 <SMARTCARD_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007796:	f7f8 ff01 	bl	800059c <HAL_GetTick>
 800779a:	4602      	mov	r2, r0
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	1ad3      	subs	r3, r2, r3
 80077a0:	69ba      	ldr	r2, [r7, #24]
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d302      	bcc.n	80077ac <SMARTCARD_WaitOnFlagUntilTimeout+0x30>
 80077a6:	69bb      	ldr	r3, [r7, #24]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d11b      	bne.n	80077e4 <SMARTCARD_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(hsmartcard->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(hsmartcard->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80077ba:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(hsmartcard->Instance->CR3, USART_CR3_EIE);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	689a      	ldr	r2, [r3, #8]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f022 0201 	bic.w	r2, r2, #1
 80077ca:	609a      	str	r2, [r3, #8]

        hsmartcard->gState  = HAL_SMARTCARD_STATE_READY;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2220      	movs	r2, #32
 80077d0:	675a      	str	r2, [r3, #116]	; 0x74
        hsmartcard->RxState = HAL_SMARTCARD_STATE_READY;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2220      	movs	r2, #32
 80077d6:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(hsmartcard);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2200      	movs	r2, #0
 80077dc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        return HAL_TIMEOUT;
 80077e0:	2303      	movs	r3, #3
 80077e2:	e00f      	b.n	8007804 <SMARTCARD_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_SMARTCARD_GET_FLAG(hsmartcard, Flag) ? SET : RESET) == Status)
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	69da      	ldr	r2, [r3, #28]
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	4013      	ands	r3, r2
 80077ee:	68ba      	ldr	r2, [r7, #8]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	bf0c      	ite	eq
 80077f4:	2301      	moveq	r3, #1
 80077f6:	2300      	movne	r3, #0
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	461a      	mov	r2, r3
 80077fc:	79fb      	ldrb	r3, [r7, #7]
 80077fe:	429a      	cmp	r2, r3
 8007800:	d0c5      	beq.n	800778e <SMARTCARD_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	3710      	adds	r7, #16
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d101      	bne.n	800781e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	e095      	b.n	800794a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007822:	2b00      	cmp	r3, #0
 8007824:	d108      	bne.n	8007838 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800782e:	d009      	beq.n	8007844 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2200      	movs	r2, #0
 8007834:	61da      	str	r2, [r3, #28]
 8007836:	e005      	b.n	8007844 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007850:	b2db      	uxtb	r3, r3
 8007852:	2b00      	cmp	r3, #0
 8007854:	d106      	bne.n	8007864 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f005 fa20 	bl	800cca4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2202      	movs	r2, #2
 8007868:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800787a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007884:	d902      	bls.n	800788c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007886:	2300      	movs	r3, #0
 8007888:	60fb      	str	r3, [r7, #12]
 800788a:	e002      	b.n	8007892 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800788c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007890:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	68db      	ldr	r3, [r3, #12]
 8007896:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800789a:	d007      	beq.n	80078ac <HAL_SPI_Init+0xa0>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80078a4:	d002      	beq.n	80078ac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80078bc:	431a      	orrs	r2, r3
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	691b      	ldr	r3, [r3, #16]
 80078c2:	f003 0302 	and.w	r3, r3, #2
 80078c6:	431a      	orrs	r2, r3
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	695b      	ldr	r3, [r3, #20]
 80078cc:	f003 0301 	and.w	r3, r3, #1
 80078d0:	431a      	orrs	r2, r3
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	699b      	ldr	r3, [r3, #24]
 80078d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078da:	431a      	orrs	r2, r3
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	69db      	ldr	r3, [r3, #28]
 80078e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80078e4:	431a      	orrs	r2, r3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6a1b      	ldr	r3, [r3, #32]
 80078ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078ee:	ea42 0103 	orr.w	r1, r2, r3
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	430a      	orrs	r2, r1
 8007900:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	699b      	ldr	r3, [r3, #24]
 8007906:	0c1b      	lsrs	r3, r3, #16
 8007908:	f003 0204 	and.w	r2, r3, #4
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007910:	f003 0310 	and.w	r3, r3, #16
 8007914:	431a      	orrs	r2, r3
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800791a:	f003 0308 	and.w	r3, r3, #8
 800791e:	431a      	orrs	r2, r3
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007928:	ea42 0103 	orr.w	r1, r2, r3
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	430a      	orrs	r2, r1
 8007938:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007948:	2300      	movs	r3, #0
}
 800794a:	4618      	mov	r0, r3
 800794c:	3710      	adds	r7, #16
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8007952:	b580      	push	{r7, lr}
 8007954:	b084      	sub	sp, #16
 8007956:	af00      	add	r7, sp, #0
 8007958:	60f8      	str	r0, [r7, #12]
 800795a:	60b9      	str	r1, [r7, #8]
 800795c:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d101      	bne.n	8007968 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8007964:	2301      	movs	r3, #1
 8007966:	e038      	b.n	80079da <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800796e:	b2db      	uxtb	r3, r3
 8007970:	2b00      	cmp	r3, #0
 8007972:	d106      	bne.n	8007982 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2200      	movs	r2, #0
 8007978:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800797c:	68f8      	ldr	r0, [r7, #12]
 800797e:	f005 fa4d 	bl	800ce1c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	3308      	adds	r3, #8
 800798a:	4619      	mov	r1, r3
 800798c:	4610      	mov	r0, r2
 800798e:	f000 fcdf 	bl	8008350 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	6818      	ldr	r0, [r3, #0]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	461a      	mov	r2, r3
 800799c:	68b9      	ldr	r1, [r7, #8]
 800799e:	f000 fd53 	bl	8008448 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	6858      	ldr	r0, [r3, #4]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	689a      	ldr	r2, [r3, #8]
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ae:	6879      	ldr	r1, [r7, #4]
 80079b0:	f000 fd9a 	bl	80084e8 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	68fa      	ldr	r2, [r7, #12]
 80079ba:	6892      	ldr	r2, [r2, #8]
 80079bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	68fa      	ldr	r2, [r7, #12]
 80079c6:	6892      	ldr	r2, [r2, #8]
 80079c8:	f041 0101 	orr.w	r1, r1, #1
 80079cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3710      	adds	r7, #16
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}

080079e2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b082      	sub	sp, #8
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d101      	bne.n	80079f4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	e040      	b.n	8007a76 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d106      	bne.n	8007a0a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f004 ff41 	bl	800c88c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2224      	movs	r2, #36	; 0x24
 8007a0e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f022 0201 	bic.w	r2, r2, #1
 8007a1e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 f82d 	bl	8007a80 <UART_SetConfig>
 8007a26:	4603      	mov	r3, r0
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d101      	bne.n	8007a30 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	e022      	b.n	8007a76 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d002      	beq.n	8007a3e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 fad9 	bl	8007ff0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	685a      	ldr	r2, [r3, #4]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007a4c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	689a      	ldr	r2, [r3, #8]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007a5c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f042 0201 	orr.w	r2, r2, #1
 8007a6c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 fb60 	bl	8008134 <UART_CheckIdleState>
 8007a74:	4603      	mov	r3, r0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3708      	adds	r7, #8
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
	...

08007a80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a84:	b08a      	sub	sp, #40	; 0x28
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	689a      	ldr	r2, [r3, #8]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	691b      	ldr	r3, [r3, #16]
 8007a98:	431a      	orrs	r2, r3
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	695b      	ldr	r3, [r3, #20]
 8007a9e:	431a      	orrs	r2, r3
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	69db      	ldr	r3, [r3, #28]
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	4ba4      	ldr	r3, [pc, #656]	; (8007d40 <UART_SetConfig+0x2c0>)
 8007ab0:	4013      	ands	r3, r2
 8007ab2:	68fa      	ldr	r2, [r7, #12]
 8007ab4:	6812      	ldr	r2, [r2, #0]
 8007ab6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ab8:	430b      	orrs	r3, r1
 8007aba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	68da      	ldr	r2, [r3, #12]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	430a      	orrs	r2, r1
 8007ad0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	699b      	ldr	r3, [r3, #24]
 8007ad6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a99      	ldr	r2, [pc, #612]	; (8007d44 <UART_SetConfig+0x2c4>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d004      	beq.n	8007aec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6a1b      	ldr	r3, [r3, #32]
 8007ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007afc:	430a      	orrs	r2, r1
 8007afe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a90      	ldr	r2, [pc, #576]	; (8007d48 <UART_SetConfig+0x2c8>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d126      	bne.n	8007b58 <UART_SetConfig+0xd8>
 8007b0a:	4b90      	ldr	r3, [pc, #576]	; (8007d4c <UART_SetConfig+0x2cc>)
 8007b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b10:	f003 0303 	and.w	r3, r3, #3
 8007b14:	2b03      	cmp	r3, #3
 8007b16:	d81b      	bhi.n	8007b50 <UART_SetConfig+0xd0>
 8007b18:	a201      	add	r2, pc, #4	; (adr r2, 8007b20 <UART_SetConfig+0xa0>)
 8007b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b1e:	bf00      	nop
 8007b20:	08007b31 	.word	0x08007b31
 8007b24:	08007b41 	.word	0x08007b41
 8007b28:	08007b39 	.word	0x08007b39
 8007b2c:	08007b49 	.word	0x08007b49
 8007b30:	2301      	movs	r3, #1
 8007b32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b36:	e116      	b.n	8007d66 <UART_SetConfig+0x2e6>
 8007b38:	2302      	movs	r3, #2
 8007b3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b3e:	e112      	b.n	8007d66 <UART_SetConfig+0x2e6>
 8007b40:	2304      	movs	r3, #4
 8007b42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b46:	e10e      	b.n	8007d66 <UART_SetConfig+0x2e6>
 8007b48:	2308      	movs	r3, #8
 8007b4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b4e:	e10a      	b.n	8007d66 <UART_SetConfig+0x2e6>
 8007b50:	2310      	movs	r3, #16
 8007b52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b56:	e106      	b.n	8007d66 <UART_SetConfig+0x2e6>
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a7c      	ldr	r2, [pc, #496]	; (8007d50 <UART_SetConfig+0x2d0>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d138      	bne.n	8007bd4 <UART_SetConfig+0x154>
 8007b62:	4b7a      	ldr	r3, [pc, #488]	; (8007d4c <UART_SetConfig+0x2cc>)
 8007b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b68:	f003 030c 	and.w	r3, r3, #12
 8007b6c:	2b0c      	cmp	r3, #12
 8007b6e:	d82d      	bhi.n	8007bcc <UART_SetConfig+0x14c>
 8007b70:	a201      	add	r2, pc, #4	; (adr r2, 8007b78 <UART_SetConfig+0xf8>)
 8007b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b76:	bf00      	nop
 8007b78:	08007bad 	.word	0x08007bad
 8007b7c:	08007bcd 	.word	0x08007bcd
 8007b80:	08007bcd 	.word	0x08007bcd
 8007b84:	08007bcd 	.word	0x08007bcd
 8007b88:	08007bbd 	.word	0x08007bbd
 8007b8c:	08007bcd 	.word	0x08007bcd
 8007b90:	08007bcd 	.word	0x08007bcd
 8007b94:	08007bcd 	.word	0x08007bcd
 8007b98:	08007bb5 	.word	0x08007bb5
 8007b9c:	08007bcd 	.word	0x08007bcd
 8007ba0:	08007bcd 	.word	0x08007bcd
 8007ba4:	08007bcd 	.word	0x08007bcd
 8007ba8:	08007bc5 	.word	0x08007bc5
 8007bac:	2300      	movs	r3, #0
 8007bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bb2:	e0d8      	b.n	8007d66 <UART_SetConfig+0x2e6>
 8007bb4:	2302      	movs	r3, #2
 8007bb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bba:	e0d4      	b.n	8007d66 <UART_SetConfig+0x2e6>
 8007bbc:	2304      	movs	r3, #4
 8007bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bc2:	e0d0      	b.n	8007d66 <UART_SetConfig+0x2e6>
 8007bc4:	2308      	movs	r3, #8
 8007bc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bca:	e0cc      	b.n	8007d66 <UART_SetConfig+0x2e6>
 8007bcc:	2310      	movs	r3, #16
 8007bce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bd2:	e0c8      	b.n	8007d66 <UART_SetConfig+0x2e6>
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a5e      	ldr	r2, [pc, #376]	; (8007d54 <UART_SetConfig+0x2d4>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d125      	bne.n	8007c2a <UART_SetConfig+0x1aa>
 8007bde:	4b5b      	ldr	r3, [pc, #364]	; (8007d4c <UART_SetConfig+0x2cc>)
 8007be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007be4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007be8:	2b30      	cmp	r3, #48	; 0x30
 8007bea:	d016      	beq.n	8007c1a <UART_SetConfig+0x19a>
 8007bec:	2b30      	cmp	r3, #48	; 0x30
 8007bee:	d818      	bhi.n	8007c22 <UART_SetConfig+0x1a2>
 8007bf0:	2b20      	cmp	r3, #32
 8007bf2:	d00a      	beq.n	8007c0a <UART_SetConfig+0x18a>
 8007bf4:	2b20      	cmp	r3, #32
 8007bf6:	d814      	bhi.n	8007c22 <UART_SetConfig+0x1a2>
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d002      	beq.n	8007c02 <UART_SetConfig+0x182>
 8007bfc:	2b10      	cmp	r3, #16
 8007bfe:	d008      	beq.n	8007c12 <UART_SetConfig+0x192>
 8007c00:	e00f      	b.n	8007c22 <UART_SetConfig+0x1a2>
 8007c02:	2300      	movs	r3, #0
 8007c04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c08:	e0ad      	b.n	8007d66 <UART_SetConfig+0x2e6>
 8007c0a:	2302      	movs	r3, #2
 8007c0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c10:	e0a9      	b.n	8007d66 <UART_SetConfig+0x2e6>
 8007c12:	2304      	movs	r3, #4
 8007c14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c18:	e0a5      	b.n	8007d66 <UART_SetConfig+0x2e6>
 8007c1a:	2308      	movs	r3, #8
 8007c1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c20:	e0a1      	b.n	8007d66 <UART_SetConfig+0x2e6>
 8007c22:	2310      	movs	r3, #16
 8007c24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c28:	e09d      	b.n	8007d66 <UART_SetConfig+0x2e6>
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a4a      	ldr	r2, [pc, #296]	; (8007d58 <UART_SetConfig+0x2d8>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d125      	bne.n	8007c80 <UART_SetConfig+0x200>
 8007c34:	4b45      	ldr	r3, [pc, #276]	; (8007d4c <UART_SetConfig+0x2cc>)
 8007c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007c3e:	2bc0      	cmp	r3, #192	; 0xc0
 8007c40:	d016      	beq.n	8007c70 <UART_SetConfig+0x1f0>
 8007c42:	2bc0      	cmp	r3, #192	; 0xc0
 8007c44:	d818      	bhi.n	8007c78 <UART_SetConfig+0x1f8>
 8007c46:	2b80      	cmp	r3, #128	; 0x80
 8007c48:	d00a      	beq.n	8007c60 <UART_SetConfig+0x1e0>
 8007c4a:	2b80      	cmp	r3, #128	; 0x80
 8007c4c:	d814      	bhi.n	8007c78 <UART_SetConfig+0x1f8>
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d002      	beq.n	8007c58 <UART_SetConfig+0x1d8>
 8007c52:	2b40      	cmp	r3, #64	; 0x40
 8007c54:	d008      	beq.n	8007c68 <UART_SetConfig+0x1e8>
 8007c56:	e00f      	b.n	8007c78 <UART_SetConfig+0x1f8>
 8007c58:	2300      	movs	r3, #0
 8007c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c5e:	e082      	b.n	8007d66 <UART_SetConfig+0x2e6>
 8007c60:	2302      	movs	r3, #2
 8007c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c66:	e07e      	b.n	8007d66 <UART_SetConfig+0x2e6>
 8007c68:	2304      	movs	r3, #4
 8007c6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c6e:	e07a      	b.n	8007d66 <UART_SetConfig+0x2e6>
 8007c70:	2308      	movs	r3, #8
 8007c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c76:	e076      	b.n	8007d66 <UART_SetConfig+0x2e6>
 8007c78:	2310      	movs	r3, #16
 8007c7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c7e:	e072      	b.n	8007d66 <UART_SetConfig+0x2e6>
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a35      	ldr	r2, [pc, #212]	; (8007d5c <UART_SetConfig+0x2dc>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d12a      	bne.n	8007ce0 <UART_SetConfig+0x260>
 8007c8a:	4b30      	ldr	r3, [pc, #192]	; (8007d4c <UART_SetConfig+0x2cc>)
 8007c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c98:	d01a      	beq.n	8007cd0 <UART_SetConfig+0x250>
 8007c9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c9e:	d81b      	bhi.n	8007cd8 <UART_SetConfig+0x258>
 8007ca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ca4:	d00c      	beq.n	8007cc0 <UART_SetConfig+0x240>
 8007ca6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007caa:	d815      	bhi.n	8007cd8 <UART_SetConfig+0x258>
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d003      	beq.n	8007cb8 <UART_SetConfig+0x238>
 8007cb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cb4:	d008      	beq.n	8007cc8 <UART_SetConfig+0x248>
 8007cb6:	e00f      	b.n	8007cd8 <UART_SetConfig+0x258>
 8007cb8:	2300      	movs	r3, #0
 8007cba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cbe:	e052      	b.n	8007d66 <UART_SetConfig+0x2e6>
 8007cc0:	2302      	movs	r3, #2
 8007cc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cc6:	e04e      	b.n	8007d66 <UART_SetConfig+0x2e6>
 8007cc8:	2304      	movs	r3, #4
 8007cca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cce:	e04a      	b.n	8007d66 <UART_SetConfig+0x2e6>
 8007cd0:	2308      	movs	r3, #8
 8007cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cd6:	e046      	b.n	8007d66 <UART_SetConfig+0x2e6>
 8007cd8:	2310      	movs	r3, #16
 8007cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cde:	e042      	b.n	8007d66 <UART_SetConfig+0x2e6>
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a17      	ldr	r2, [pc, #92]	; (8007d44 <UART_SetConfig+0x2c4>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d13a      	bne.n	8007d60 <UART_SetConfig+0x2e0>
 8007cea:	4b18      	ldr	r3, [pc, #96]	; (8007d4c <UART_SetConfig+0x2cc>)
 8007cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cf0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007cf4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007cf8:	d01a      	beq.n	8007d30 <UART_SetConfig+0x2b0>
 8007cfa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007cfe:	d81b      	bhi.n	8007d38 <UART_SetConfig+0x2b8>
 8007d00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d04:	d00c      	beq.n	8007d20 <UART_SetConfig+0x2a0>
 8007d06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d0a:	d815      	bhi.n	8007d38 <UART_SetConfig+0x2b8>
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d003      	beq.n	8007d18 <UART_SetConfig+0x298>
 8007d10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d14:	d008      	beq.n	8007d28 <UART_SetConfig+0x2a8>
 8007d16:	e00f      	b.n	8007d38 <UART_SetConfig+0x2b8>
 8007d18:	2300      	movs	r3, #0
 8007d1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d1e:	e022      	b.n	8007d66 <UART_SetConfig+0x2e6>
 8007d20:	2302      	movs	r3, #2
 8007d22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d26:	e01e      	b.n	8007d66 <UART_SetConfig+0x2e6>
 8007d28:	2304      	movs	r3, #4
 8007d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d2e:	e01a      	b.n	8007d66 <UART_SetConfig+0x2e6>
 8007d30:	2308      	movs	r3, #8
 8007d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d36:	e016      	b.n	8007d66 <UART_SetConfig+0x2e6>
 8007d38:	2310      	movs	r3, #16
 8007d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d3e:	e012      	b.n	8007d66 <UART_SetConfig+0x2e6>
 8007d40:	efff69f3 	.word	0xefff69f3
 8007d44:	40008000 	.word	0x40008000
 8007d48:	40013800 	.word	0x40013800
 8007d4c:	40021000 	.word	0x40021000
 8007d50:	40004400 	.word	0x40004400
 8007d54:	40004800 	.word	0x40004800
 8007d58:	40004c00 	.word	0x40004c00
 8007d5c:	40005000 	.word	0x40005000
 8007d60:	2310      	movs	r3, #16
 8007d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a9f      	ldr	r2, [pc, #636]	; (8007fe8 <UART_SetConfig+0x568>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d17a      	bne.n	8007e66 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007d70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d74:	2b08      	cmp	r3, #8
 8007d76:	d824      	bhi.n	8007dc2 <UART_SetConfig+0x342>
 8007d78:	a201      	add	r2, pc, #4	; (adr r2, 8007d80 <UART_SetConfig+0x300>)
 8007d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d7e:	bf00      	nop
 8007d80:	08007da5 	.word	0x08007da5
 8007d84:	08007dc3 	.word	0x08007dc3
 8007d88:	08007dad 	.word	0x08007dad
 8007d8c:	08007dc3 	.word	0x08007dc3
 8007d90:	08007db3 	.word	0x08007db3
 8007d94:	08007dc3 	.word	0x08007dc3
 8007d98:	08007dc3 	.word	0x08007dc3
 8007d9c:	08007dc3 	.word	0x08007dc3
 8007da0:	08007dbb 	.word	0x08007dbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007da4:	f7fc fef6 	bl	8004b94 <HAL_RCC_GetPCLK1Freq>
 8007da8:	61f8      	str	r0, [r7, #28]
        break;
 8007daa:	e010      	b.n	8007dce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007dac:	4b8f      	ldr	r3, [pc, #572]	; (8007fec <UART_SetConfig+0x56c>)
 8007dae:	61fb      	str	r3, [r7, #28]
        break;
 8007db0:	e00d      	b.n	8007dce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007db2:	f7fc fe57 	bl	8004a64 <HAL_RCC_GetSysClockFreq>
 8007db6:	61f8      	str	r0, [r7, #28]
        break;
 8007db8:	e009      	b.n	8007dce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007dba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007dbe:	61fb      	str	r3, [r7, #28]
        break;
 8007dc0:	e005      	b.n	8007dce <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007dcc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007dce:	69fb      	ldr	r3, [r7, #28]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	f000 80fb 	beq.w	8007fcc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	685a      	ldr	r2, [r3, #4]
 8007dda:	4613      	mov	r3, r2
 8007ddc:	005b      	lsls	r3, r3, #1
 8007dde:	4413      	add	r3, r2
 8007de0:	69fa      	ldr	r2, [r7, #28]
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d305      	bcc.n	8007df2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007dec:	69fa      	ldr	r2, [r7, #28]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d903      	bls.n	8007dfa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007df8:	e0e8      	b.n	8007fcc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007dfa:	69fb      	ldr	r3, [r7, #28]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	461c      	mov	r4, r3
 8007e00:	4615      	mov	r5, r2
 8007e02:	f04f 0200 	mov.w	r2, #0
 8007e06:	f04f 0300 	mov.w	r3, #0
 8007e0a:	022b      	lsls	r3, r5, #8
 8007e0c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007e10:	0222      	lsls	r2, r4, #8
 8007e12:	68f9      	ldr	r1, [r7, #12]
 8007e14:	6849      	ldr	r1, [r1, #4]
 8007e16:	0849      	lsrs	r1, r1, #1
 8007e18:	2000      	movs	r0, #0
 8007e1a:	4688      	mov	r8, r1
 8007e1c:	4681      	mov	r9, r0
 8007e1e:	eb12 0a08 	adds.w	sl, r2, r8
 8007e22:	eb43 0b09 	adc.w	fp, r3, r9
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	603b      	str	r3, [r7, #0]
 8007e2e:	607a      	str	r2, [r7, #4]
 8007e30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e34:	4650      	mov	r0, sl
 8007e36:	4659      	mov	r1, fp
 8007e38:	f7f8 f9c6 	bl	80001c8 <__aeabi_uldivmod>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	460b      	mov	r3, r1
 8007e40:	4613      	mov	r3, r2
 8007e42:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007e44:	69bb      	ldr	r3, [r7, #24]
 8007e46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e4a:	d308      	bcc.n	8007e5e <UART_SetConfig+0x3de>
 8007e4c:	69bb      	ldr	r3, [r7, #24]
 8007e4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e52:	d204      	bcs.n	8007e5e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	69ba      	ldr	r2, [r7, #24]
 8007e5a:	60da      	str	r2, [r3, #12]
 8007e5c:	e0b6      	b.n	8007fcc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007e64:	e0b2      	b.n	8007fcc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	69db      	ldr	r3, [r3, #28]
 8007e6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e6e:	d15e      	bne.n	8007f2e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007e70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e74:	2b08      	cmp	r3, #8
 8007e76:	d828      	bhi.n	8007eca <UART_SetConfig+0x44a>
 8007e78:	a201      	add	r2, pc, #4	; (adr r2, 8007e80 <UART_SetConfig+0x400>)
 8007e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e7e:	bf00      	nop
 8007e80:	08007ea5 	.word	0x08007ea5
 8007e84:	08007ead 	.word	0x08007ead
 8007e88:	08007eb5 	.word	0x08007eb5
 8007e8c:	08007ecb 	.word	0x08007ecb
 8007e90:	08007ebb 	.word	0x08007ebb
 8007e94:	08007ecb 	.word	0x08007ecb
 8007e98:	08007ecb 	.word	0x08007ecb
 8007e9c:	08007ecb 	.word	0x08007ecb
 8007ea0:	08007ec3 	.word	0x08007ec3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ea4:	f7fc fe76 	bl	8004b94 <HAL_RCC_GetPCLK1Freq>
 8007ea8:	61f8      	str	r0, [r7, #28]
        break;
 8007eaa:	e014      	b.n	8007ed6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007eac:	f7fc fe88 	bl	8004bc0 <HAL_RCC_GetPCLK2Freq>
 8007eb0:	61f8      	str	r0, [r7, #28]
        break;
 8007eb2:	e010      	b.n	8007ed6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007eb4:	4b4d      	ldr	r3, [pc, #308]	; (8007fec <UART_SetConfig+0x56c>)
 8007eb6:	61fb      	str	r3, [r7, #28]
        break;
 8007eb8:	e00d      	b.n	8007ed6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007eba:	f7fc fdd3 	bl	8004a64 <HAL_RCC_GetSysClockFreq>
 8007ebe:	61f8      	str	r0, [r7, #28]
        break;
 8007ec0:	e009      	b.n	8007ed6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ec2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ec6:	61fb      	str	r3, [r7, #28]
        break;
 8007ec8:	e005      	b.n	8007ed6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007ed4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007ed6:	69fb      	ldr	r3, [r7, #28]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d077      	beq.n	8007fcc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007edc:	69fb      	ldr	r3, [r7, #28]
 8007ede:	005a      	lsls	r2, r3, #1
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	085b      	lsrs	r3, r3, #1
 8007ee6:	441a      	add	r2, r3
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ef0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	2b0f      	cmp	r3, #15
 8007ef6:	d916      	bls.n	8007f26 <UART_SetConfig+0x4a6>
 8007ef8:	69bb      	ldr	r3, [r7, #24]
 8007efa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007efe:	d212      	bcs.n	8007f26 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f00:	69bb      	ldr	r3, [r7, #24]
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	f023 030f 	bic.w	r3, r3, #15
 8007f08:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f0a:	69bb      	ldr	r3, [r7, #24]
 8007f0c:	085b      	lsrs	r3, r3, #1
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	f003 0307 	and.w	r3, r3, #7
 8007f14:	b29a      	uxth	r2, r3
 8007f16:	8afb      	ldrh	r3, [r7, #22]
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	8afa      	ldrh	r2, [r7, #22]
 8007f22:	60da      	str	r2, [r3, #12]
 8007f24:	e052      	b.n	8007fcc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007f26:	2301      	movs	r3, #1
 8007f28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007f2c:	e04e      	b.n	8007fcc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f32:	2b08      	cmp	r3, #8
 8007f34:	d827      	bhi.n	8007f86 <UART_SetConfig+0x506>
 8007f36:	a201      	add	r2, pc, #4	; (adr r2, 8007f3c <UART_SetConfig+0x4bc>)
 8007f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f3c:	08007f61 	.word	0x08007f61
 8007f40:	08007f69 	.word	0x08007f69
 8007f44:	08007f71 	.word	0x08007f71
 8007f48:	08007f87 	.word	0x08007f87
 8007f4c:	08007f77 	.word	0x08007f77
 8007f50:	08007f87 	.word	0x08007f87
 8007f54:	08007f87 	.word	0x08007f87
 8007f58:	08007f87 	.word	0x08007f87
 8007f5c:	08007f7f 	.word	0x08007f7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f60:	f7fc fe18 	bl	8004b94 <HAL_RCC_GetPCLK1Freq>
 8007f64:	61f8      	str	r0, [r7, #28]
        break;
 8007f66:	e014      	b.n	8007f92 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f68:	f7fc fe2a 	bl	8004bc0 <HAL_RCC_GetPCLK2Freq>
 8007f6c:	61f8      	str	r0, [r7, #28]
        break;
 8007f6e:	e010      	b.n	8007f92 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f70:	4b1e      	ldr	r3, [pc, #120]	; (8007fec <UART_SetConfig+0x56c>)
 8007f72:	61fb      	str	r3, [r7, #28]
        break;
 8007f74:	e00d      	b.n	8007f92 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f76:	f7fc fd75 	bl	8004a64 <HAL_RCC_GetSysClockFreq>
 8007f7a:	61f8      	str	r0, [r7, #28]
        break;
 8007f7c:	e009      	b.n	8007f92 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f82:	61fb      	str	r3, [r7, #28]
        break;
 8007f84:	e005      	b.n	8007f92 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007f86:	2300      	movs	r3, #0
 8007f88:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007f90:	bf00      	nop
    }

    if (pclk != 0U)
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d019      	beq.n	8007fcc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	085a      	lsrs	r2, r3, #1
 8007f9e:	69fb      	ldr	r3, [r7, #28]
 8007fa0:	441a      	add	r2, r3
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007faa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fac:	69bb      	ldr	r3, [r7, #24]
 8007fae:	2b0f      	cmp	r3, #15
 8007fb0:	d909      	bls.n	8007fc6 <UART_SetConfig+0x546>
 8007fb2:	69bb      	ldr	r3, [r7, #24]
 8007fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fb8:	d205      	bcs.n	8007fc6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007fba:	69bb      	ldr	r3, [r7, #24]
 8007fbc:	b29a      	uxth	r2, r3
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	60da      	str	r2, [r3, #12]
 8007fc4:	e002      	b.n	8007fcc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007fd8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3728      	adds	r7, #40	; 0x28
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007fe6:	bf00      	nop
 8007fe8:	40008000 	.word	0x40008000
 8007fec:	00f42400 	.word	0x00f42400

08007ff0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b083      	sub	sp, #12
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffc:	f003 0301 	and.w	r3, r3, #1
 8008000:	2b00      	cmp	r3, #0
 8008002:	d00a      	beq.n	800801a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	430a      	orrs	r2, r1
 8008018:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800801e:	f003 0302 	and.w	r3, r3, #2
 8008022:	2b00      	cmp	r3, #0
 8008024:	d00a      	beq.n	800803c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	430a      	orrs	r2, r1
 800803a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008040:	f003 0304 	and.w	r3, r3, #4
 8008044:	2b00      	cmp	r3, #0
 8008046:	d00a      	beq.n	800805e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	430a      	orrs	r2, r1
 800805c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008062:	f003 0308 	and.w	r3, r3, #8
 8008066:	2b00      	cmp	r3, #0
 8008068:	d00a      	beq.n	8008080 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	430a      	orrs	r2, r1
 800807e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008084:	f003 0310 	and.w	r3, r3, #16
 8008088:	2b00      	cmp	r3, #0
 800808a:	d00a      	beq.n	80080a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	430a      	orrs	r2, r1
 80080a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a6:	f003 0320 	and.w	r3, r3, #32
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d00a      	beq.n	80080c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	430a      	orrs	r2, r1
 80080c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d01a      	beq.n	8008106 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	430a      	orrs	r2, r1
 80080e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080ee:	d10a      	bne.n	8008106 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	430a      	orrs	r2, r1
 8008104:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00a      	beq.n	8008128 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	430a      	orrs	r2, r1
 8008126:	605a      	str	r2, [r3, #4]
  }
}
 8008128:	bf00      	nop
 800812a:	370c      	adds	r7, #12
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr

08008134 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b086      	sub	sp, #24
 8008138:	af02      	add	r7, sp, #8
 800813a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2200      	movs	r2, #0
 8008140:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008144:	f7f8 fa2a 	bl	800059c <HAL_GetTick>
 8008148:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f003 0308 	and.w	r3, r3, #8
 8008154:	2b08      	cmp	r3, #8
 8008156:	d10e      	bne.n	8008176 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008158:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800815c:	9300      	str	r3, [sp, #0]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2200      	movs	r2, #0
 8008162:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 f82d 	bl	80081c6 <UART_WaitOnFlagUntilTimeout>
 800816c:	4603      	mov	r3, r0
 800816e:	2b00      	cmp	r3, #0
 8008170:	d001      	beq.n	8008176 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008172:	2303      	movs	r3, #3
 8008174:	e023      	b.n	80081be <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f003 0304 	and.w	r3, r3, #4
 8008180:	2b04      	cmp	r3, #4
 8008182:	d10e      	bne.n	80081a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008184:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008188:	9300      	str	r3, [sp, #0]
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2200      	movs	r2, #0
 800818e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 f817 	bl	80081c6 <UART_WaitOnFlagUntilTimeout>
 8008198:	4603      	mov	r3, r0
 800819a:	2b00      	cmp	r3, #0
 800819c:	d001      	beq.n	80081a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800819e:	2303      	movs	r3, #3
 80081a0:	e00d      	b.n	80081be <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2220      	movs	r2, #32
 80081a6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2220      	movs	r2, #32
 80081ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80081bc:	2300      	movs	r3, #0
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3710      	adds	r7, #16
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}

080081c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80081c6:	b580      	push	{r7, lr}
 80081c8:	b09c      	sub	sp, #112	; 0x70
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	60f8      	str	r0, [r7, #12]
 80081ce:	60b9      	str	r1, [r7, #8]
 80081d0:	603b      	str	r3, [r7, #0]
 80081d2:	4613      	mov	r3, r2
 80081d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081d6:	e0a5      	b.n	8008324 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081de:	f000 80a1 	beq.w	8008324 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081e2:	f7f8 f9db 	bl	800059c <HAL_GetTick>
 80081e6:	4602      	mov	r2, r0
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	1ad3      	subs	r3, r2, r3
 80081ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d302      	bcc.n	80081f8 <UART_WaitOnFlagUntilTimeout+0x32>
 80081f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d13e      	bne.n	8008276 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008200:	e853 3f00 	ldrex	r3, [r3]
 8008204:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008208:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800820c:	667b      	str	r3, [r7, #100]	; 0x64
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	461a      	mov	r2, r3
 8008214:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008216:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008218:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800821a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800821c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800821e:	e841 2300 	strex	r3, r2, [r1]
 8008222:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008224:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008226:	2b00      	cmp	r3, #0
 8008228:	d1e6      	bne.n	80081f8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	3308      	adds	r3, #8
 8008230:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008234:	e853 3f00 	ldrex	r3, [r3]
 8008238:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800823a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823c:	f023 0301 	bic.w	r3, r3, #1
 8008240:	663b      	str	r3, [r7, #96]	; 0x60
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	3308      	adds	r3, #8
 8008248:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800824a:	64ba      	str	r2, [r7, #72]	; 0x48
 800824c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800824e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008250:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008252:	e841 2300 	strex	r3, r2, [r1]
 8008256:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008258:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800825a:	2b00      	cmp	r3, #0
 800825c:	d1e5      	bne.n	800822a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2220      	movs	r2, #32
 8008262:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2220      	movs	r2, #32
 8008268:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2200      	movs	r2, #0
 800826e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008272:	2303      	movs	r3, #3
 8008274:	e067      	b.n	8008346 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f003 0304 	and.w	r3, r3, #4
 8008280:	2b00      	cmp	r3, #0
 8008282:	d04f      	beq.n	8008324 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	69db      	ldr	r3, [r3, #28]
 800828a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800828e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008292:	d147      	bne.n	8008324 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800829c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a6:	e853 3f00 	ldrex	r3, [r3]
 80082aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80082b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	461a      	mov	r2, r3
 80082ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082bc:	637b      	str	r3, [r7, #52]	; 0x34
 80082be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80082c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082c4:	e841 2300 	strex	r3, r2, [r1]
 80082c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80082ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d1e6      	bne.n	800829e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	3308      	adds	r3, #8
 80082d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	e853 3f00 	ldrex	r3, [r3]
 80082de:	613b      	str	r3, [r7, #16]
   return(result);
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	f023 0301 	bic.w	r3, r3, #1
 80082e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	3308      	adds	r3, #8
 80082ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80082f0:	623a      	str	r2, [r7, #32]
 80082f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f4:	69f9      	ldr	r1, [r7, #28]
 80082f6:	6a3a      	ldr	r2, [r7, #32]
 80082f8:	e841 2300 	strex	r3, r2, [r1]
 80082fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80082fe:	69bb      	ldr	r3, [r7, #24]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d1e5      	bne.n	80082d0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2220      	movs	r2, #32
 8008308:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2220      	movs	r2, #32
 800830e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2220      	movs	r2, #32
 8008314:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2200      	movs	r2, #0
 800831c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008320:	2303      	movs	r3, #3
 8008322:	e010      	b.n	8008346 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	69da      	ldr	r2, [r3, #28]
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	4013      	ands	r3, r2
 800832e:	68ba      	ldr	r2, [r7, #8]
 8008330:	429a      	cmp	r2, r3
 8008332:	bf0c      	ite	eq
 8008334:	2301      	moveq	r3, #1
 8008336:	2300      	movne	r3, #0
 8008338:	b2db      	uxtb	r3, r3
 800833a:	461a      	mov	r2, r3
 800833c:	79fb      	ldrb	r3, [r7, #7]
 800833e:	429a      	cmp	r2, r3
 8008340:	f43f af4a 	beq.w	80081d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008344:	2300      	movs	r3, #0
}
 8008346:	4618      	mov	r0, r3
 8008348:	3770      	adds	r7, #112	; 0x70
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
	...

08008350 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8008350:	b480      	push	{r7}
 8008352:	b087      	sub	sp, #28
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008364:	683a      	ldr	r2, [r7, #0]
 8008366:	6812      	ldr	r2, [r2, #0]
 8008368:	f023 0101 	bic.w	r1, r3, #1
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	2b08      	cmp	r3, #8
 8008378:	d102      	bne.n	8008380 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800837a:	2340      	movs	r3, #64	; 0x40
 800837c:	617b      	str	r3, [r7, #20]
 800837e:	e001      	b.n	8008384 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8008380:	2300      	movs	r3, #0
 8008382:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8008390:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8008396:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800839c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80083a2:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 80083a8:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 80083ae:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 80083b4:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 80083ba:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 80083c0:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 80083c6:	4313      	orrs	r3, r2
 80083c8:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ce:	693a      	ldr	r2, [r7, #16]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d8:	693a      	ldr	r2, [r7, #16]
 80083da:	4313      	orrs	r3, r2
 80083dc:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 80083de:	4b19      	ldr	r3, [pc, #100]	; (8008444 <FMC_NORSRAM_Init+0xf4>)
 80083e0:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80083e8:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80083f0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	43db      	mvns	r3, r3
 8008400:	ea02 0103 	and.w	r1, r2, r3
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	681a      	ldr	r2, [r3, #0]
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	4319      	orrs	r1, r3
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008416:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800841a:	d10c      	bne.n	8008436 <FMC_NORSRAM_Init+0xe6>
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d008      	beq.n	8008436 <FMC_NORSRAM_Init+0xe6>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008430:	431a      	orrs	r2, r3
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 8008436:	2300      	movs	r3, #0
}
 8008438:	4618      	mov	r0, r3
 800843a:	371c      	adds	r7, #28
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr
 8008444:	0008fb7f 	.word	0x0008fb7f

08008448 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008448:	b480      	push	{r7}
 800844a:	b087      	sub	sp, #28
 800844c:	af00      	add	r7, sp, #0
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	60b9      	str	r1, [r7, #8]
 8008452:	607a      	str	r2, [r7, #4]
                                                       ((Timing->BusTurnAroundDuration)  << FMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#else /* FMC_BTRx_DATAHLD */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	1c5a      	adds	r2, r3, #1
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800845e:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	011b      	lsls	r3, r3, #4
 800846c:	431a      	orrs	r2, r3
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	689b      	ldr	r3, [r3, #8]
 8008472:	021b      	lsls	r3, r3, #8
 8008474:	431a      	orrs	r2, r3
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	691b      	ldr	r3, [r3, #16]
 800847a:	041b      	lsls	r3, r3, #16
 800847c:	431a      	orrs	r2, r3
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	695b      	ldr	r3, [r3, #20]
 8008482:	3b01      	subs	r3, #1
 8008484:	051b      	lsls	r3, r3, #20
 8008486:	431a      	orrs	r2, r3
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	699b      	ldr	r3, [r3, #24]
 800848c:	3b02      	subs	r3, #2
 800848e:	061b      	lsls	r3, r3, #24
 8008490:	431a      	orrs	r2, r3
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	69db      	ldr	r3, [r3, #28]
 8008496:	4313      	orrs	r3, r2
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	3201      	adds	r2, #1
 800849c:	4319      	orrs	r1, r3
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084b0:	d113      	bne.n	80084da <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80084ba:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	695b      	ldr	r3, [r3, #20]
 80084c0:	3b01      	subs	r3, #1
 80084c2:	051b      	lsls	r3, r3, #20
 80084c4:	697a      	ldr	r2, [r7, #20]
 80084c6:	4313      	orrs	r3, r2
 80084c8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	431a      	orrs	r2, r3
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80084da:	2300      	movs	r3, #0
}
 80084dc:	4618      	mov	r0, r3
 80084de:	371c      	adds	r7, #28
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr

080084e8 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b085      	sub	sp, #20
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	60f8      	str	r0, [r7, #12]
 80084f0:	60b9      	str	r1, [r7, #8]
 80084f2:	607a      	str	r2, [r7, #4]
 80084f4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80084fc:	d11d      	bne.n	800853a <FMC_NORSRAM_Extended_Timing_Init+0x52>
                                                     ((Timing->DataSetupTime)          << FMC_BWTRx_DATAST_Pos)  |
                                                     ((Timing->DataHoldTime)           << FMC_BWTRx_DATAHLD_Pos) |
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#else /* FMC_BTRx_DATAHLD */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008506:	4b13      	ldr	r3, [pc, #76]	; (8008554 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8008508:	4013      	ands	r3, r2
 800850a:	68ba      	ldr	r2, [r7, #8]
 800850c:	6811      	ldr	r1, [r2, #0]
 800850e:	68ba      	ldr	r2, [r7, #8]
 8008510:	6852      	ldr	r2, [r2, #4]
 8008512:	0112      	lsls	r2, r2, #4
 8008514:	4311      	orrs	r1, r2
 8008516:	68ba      	ldr	r2, [r7, #8]
 8008518:	6892      	ldr	r2, [r2, #8]
 800851a:	0212      	lsls	r2, r2, #8
 800851c:	4311      	orrs	r1, r2
 800851e:	68ba      	ldr	r2, [r7, #8]
 8008520:	69d2      	ldr	r2, [r2, #28]
 8008522:	4311      	orrs	r1, r2
 8008524:	68ba      	ldr	r2, [r7, #8]
 8008526:	6912      	ldr	r2, [r2, #16]
 8008528:	0412      	lsls	r2, r2, #16
 800852a:	430a      	orrs	r2, r1
 800852c:	ea43 0102 	orr.w	r1, r3, r2
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008538:	e005      	b.n	8008546 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008542:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8008546:	2300      	movs	r3, #0
}
 8008548:	4618      	mov	r0, r3
 800854a:	3714      	adds	r7, #20
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr
 8008554:	cff00000 	.word	0xcff00000

08008558 <FMC_NORSRAM_WriteOperation_Disable>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_WriteOperation_Disable(FMC_NORSRAM_TypeDef *Device, uint32_t Bank)
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_NORSRAM_DEVICE(Device));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Disable write operation */
  CLEAR_BIT(Device->BTCR[Bank], FMC_WRITE_OPERATION_ENABLE);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	683a      	ldr	r2, [r7, #0]
 8008566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800856a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	683a      	ldr	r2, [r7, #0]
 8008572:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  return HAL_OK;
 8008576:	2300      	movs	r3, #0
}
 8008578:	4618      	mov	r0, r3
 800857a:	370c      	adds	r7, #12
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr

08008584 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8008584:	b084      	sub	sp, #16
 8008586:	b480      	push	{r7}
 8008588:	b085      	sub	sp, #20
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
 800858e:	f107 001c 	add.w	r0, r7, #28
 8008592:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008596:	2300      	movs	r3, #0
 8008598:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 800859a:	6a3b      	ldr	r3, [r7, #32]
 800859c:	68fa      	ldr	r2, [r7, #12]
 800859e:	4313      	orrs	r3, r2
 80085a0:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 80085a2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 80085a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 80085a6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80085a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80085aa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80085ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80085ae:	431a      	orrs	r2, r3
             Init.ClockDiv
 80085b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80085b2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80085b4:	68fa      	ldr	r2, [r7, #12]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80085c2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80085c6:	68fa      	ldr	r2, [r7, #12]
 80085c8:	431a      	orrs	r2, r3
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80085ce:	2300      	movs	r3, #0
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3714      	adds	r7, #20
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	b004      	add	sp, #16
 80085dc:	4770      	bx	lr

080085de <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80085de:	b480      	push	{r7}
 80085e0:	b083      	sub	sp, #12
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	370c      	adds	r7, #12
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr

080085f8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2203      	movs	r2, #3
 8008604:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008606:	2002      	movs	r0, #2
 8008608:	f7f7 ffd4 	bl	80005b4 <HAL_Delay>

  return HAL_OK;
 800860c:	2300      	movs	r3, #0
}
 800860e:	4618      	mov	r0, r3
 8008610:	3708      	adds	r7, #8
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}

08008616 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8008616:	b480      	push	{r7}
 8008618:	b083      	sub	sp, #12
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f003 0303 	and.w	r3, r3, #3
}
 8008626:	4618      	mov	r0, r3
 8008628:	370c      	adds	r7, #12
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr

08008632 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008632:	b480      	push	{r7}
 8008634:	b085      	sub	sp, #20
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
 800863a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800863c:	2300      	movs	r3, #0
 800863e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008650:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008656:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800865c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800865e:	68fa      	ldr	r2, [r7, #12]
 8008660:	4313      	orrs	r3, r2
 8008662:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	68db      	ldr	r3, [r3, #12]
 8008668:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800866c:	f023 030f 	bic.w	r3, r3, #15
 8008670:	68fa      	ldr	r2, [r7, #12]
 8008672:	431a      	orrs	r2, r3
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008678:	2300      	movs	r3, #0
}
 800867a:	4618      	mov	r0, r3
 800867c:	3714      	adds	r7, #20
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr

08008686 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008686:	b480      	push	{r7}
 8008688:	b083      	sub	sp, #12
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	691b      	ldr	r3, [r3, #16]
 8008692:	b2db      	uxtb	r3, r3
}
 8008694:	4618      	mov	r0, r3
 8008696:	370c      	adds	r7, #12
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b085      	sub	sp, #20
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	3314      	adds	r3, #20
 80086ae:	461a      	mov	r2, r3
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	4413      	add	r3, r2
 80086b4:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3714      	adds	r7, #20
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr

080086c6 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80086c6:	b480      	push	{r7}
 80086c8:	b085      	sub	sp, #20
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
 80086ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80086d0:	2300      	movs	r3, #0
 80086d2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	685a      	ldr	r2, [r3, #4]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80086ec:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80086f2:	431a      	orrs	r2, r3
                       Data->DPSM);
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80086f8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80086fa:	68fa      	ldr	r2, [r7, #12]
 80086fc:	4313      	orrs	r3, r2
 80086fe:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008704:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	431a      	orrs	r2, r3
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008710:	2300      	movs	r3, #0

}
 8008712:	4618      	mov	r0, r3
 8008714:	3714      	adds	r7, #20
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr

0800871e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800871e:	b580      	push	{r7, lr}
 8008720:	b088      	sub	sp, #32
 8008722:	af00      	add	r7, sp, #0
 8008724:	6078      	str	r0, [r7, #4]
 8008726:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800872c:	2310      	movs	r3, #16
 800872e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008730:	2340      	movs	r3, #64	; 0x40
 8008732:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008734:	2300      	movs	r3, #0
 8008736:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008738:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800873c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800873e:	f107 0308 	add.w	r3, r7, #8
 8008742:	4619      	mov	r1, r3
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f7ff ff74 	bl	8008632 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800874a:	f241 3288 	movw	r2, #5000	; 0x1388
 800874e:	2110      	movs	r1, #16
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f000 f94d 	bl	80089f0 <SDMMC_GetCmdResp1>
 8008756:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008758:	69fb      	ldr	r3, [r7, #28]
}
 800875a:	4618      	mov	r0, r3
 800875c:	3720      	adds	r7, #32
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8008762:	b580      	push	{r7, lr}
 8008764:	b08a      	sub	sp, #40	; 0x28
 8008766:	af00      	add	r7, sp, #0
 8008768:	60f8      	str	r0, [r7, #12]
 800876a:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008772:	2307      	movs	r3, #7
 8008774:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008776:	2340      	movs	r3, #64	; 0x40
 8008778:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800877a:	2300      	movs	r3, #0
 800877c:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800877e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008782:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008784:	f107 0310 	add.w	r3, r7, #16
 8008788:	4619      	mov	r1, r3
 800878a:	68f8      	ldr	r0, [r7, #12]
 800878c:	f7ff ff51 	bl	8008632 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008790:	f241 3288 	movw	r2, #5000	; 0x1388
 8008794:	2107      	movs	r1, #7
 8008796:	68f8      	ldr	r0, [r7, #12]
 8008798:	f000 f92a 	bl	80089f0 <SDMMC_GetCmdResp1>
 800879c:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800879e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3728      	adds	r7, #40	; 0x28
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b088      	sub	sp, #32
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80087b0:	2300      	movs	r3, #0
 80087b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80087b4:	2300      	movs	r3, #0
 80087b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80087b8:	2300      	movs	r3, #0
 80087ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80087bc:	2300      	movs	r3, #0
 80087be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80087c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80087c6:	f107 0308 	add.w	r3, r7, #8
 80087ca:	4619      	mov	r1, r3
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f7ff ff30 	bl	8008632 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 fb44 	bl	8008e60 <SDMMC_GetCmdError>
 80087d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80087da:	69fb      	ldr	r3, [r7, #28]
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3720      	adds	r7, #32
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b088      	sub	sp, #32
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80087ec:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80087f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80087f2:	2308      	movs	r3, #8
 80087f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80087f6:	2340      	movs	r3, #64	; 0x40
 80087f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80087fa:	2300      	movs	r3, #0
 80087fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80087fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008802:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008804:	f107 0308 	add.w	r3, r7, #8
 8008808:	4619      	mov	r1, r3
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f7ff ff11 	bl	8008632 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 fad7 	bl	8008dc4 <SDMMC_GetCmdResp7>
 8008816:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008818:	69fb      	ldr	r3, [r7, #28]
}
 800881a:	4618      	mov	r0, r3
 800881c:	3720      	adds	r7, #32
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}

08008822 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008822:	b580      	push	{r7, lr}
 8008824:	b088      	sub	sp, #32
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
 800882a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008830:	2337      	movs	r3, #55	; 0x37
 8008832:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008834:	2340      	movs	r3, #64	; 0x40
 8008836:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008838:	2300      	movs	r3, #0
 800883a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800883c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008840:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008842:	f107 0308 	add.w	r3, r7, #8
 8008846:	4619      	mov	r1, r3
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f7ff fef2 	bl	8008632 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800884e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008852:	2137      	movs	r1, #55	; 0x37
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 f8cb 	bl	80089f0 <SDMMC_GetCmdResp1>
 800885a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800885c:	69fb      	ldr	r3, [r7, #28]
}
 800885e:	4618      	mov	r0, r3
 8008860:	3720      	adds	r7, #32
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}

08008866 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008866:	b580      	push	{r7, lr}
 8008868:	b088      	sub	sp, #32
 800886a:	af00      	add	r7, sp, #0
 800886c:	6078      	str	r0, [r7, #4]
 800886e:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008876:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800887a:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800887c:	2329      	movs	r3, #41	; 0x29
 800887e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008880:	2340      	movs	r3, #64	; 0x40
 8008882:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008884:	2300      	movs	r3, #0
 8008886:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008888:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800888c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800888e:	f107 0308 	add.w	r3, r7, #8
 8008892:	4619      	mov	r1, r3
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f7ff fecc 	bl	8008632 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 f9de 	bl	8008c5c <SDMMC_GetCmdResp3>
 80088a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80088a2:	69fb      	ldr	r3, [r7, #28]
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3720      	adds	r7, #32
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}

080088ac <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b088      	sub	sp, #32
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80088ba:	2306      	movs	r3, #6
 80088bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80088be:	2340      	movs	r3, #64	; 0x40
 80088c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80088c2:	2300      	movs	r3, #0
 80088c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80088c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80088cc:	f107 0308 	add.w	r3, r7, #8
 80088d0:	4619      	mov	r1, r3
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f7ff fead 	bl	8008632 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80088d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80088dc:	2106      	movs	r1, #6
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 f886 	bl	80089f0 <SDMMC_GetCmdResp1>
 80088e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80088e6:	69fb      	ldr	r3, [r7, #28]
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3720      	adds	r7, #32
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b088      	sub	sp, #32
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80088f8:	2300      	movs	r3, #0
 80088fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80088fc:	2333      	movs	r3, #51	; 0x33
 80088fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008900:	2340      	movs	r3, #64	; 0x40
 8008902:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008904:	2300      	movs	r3, #0
 8008906:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008908:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800890c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800890e:	f107 0308 	add.w	r3, r7, #8
 8008912:	4619      	mov	r1, r3
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f7ff fe8c 	bl	8008632 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800891a:	f241 3288 	movw	r2, #5000	; 0x1388
 800891e:	2133      	movs	r1, #51	; 0x33
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 f865 	bl	80089f0 <SDMMC_GetCmdResp1>
 8008926:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008928:	69fb      	ldr	r3, [r7, #28]
}
 800892a:	4618      	mov	r0, r3
 800892c:	3720      	adds	r7, #32
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}

08008932 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8008932:	b580      	push	{r7, lr}
 8008934:	b088      	sub	sp, #32
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800893a:	2300      	movs	r3, #0
 800893c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800893e:	2302      	movs	r3, #2
 8008940:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008942:	23c0      	movs	r3, #192	; 0xc0
 8008944:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008946:	2300      	movs	r3, #0
 8008948:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800894a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800894e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008950:	f107 0308 	add.w	r3, r7, #8
 8008954:	4619      	mov	r1, r3
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f7ff fe6b 	bl	8008632 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 f935 	bl	8008bcc <SDMMC_GetCmdResp2>
 8008962:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008964:	69fb      	ldr	r3, [r7, #28]
}
 8008966:	4618      	mov	r0, r3
 8008968:	3720      	adds	r7, #32
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}

0800896e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800896e:	b580      	push	{r7, lr}
 8008970:	b088      	sub	sp, #32
 8008972:	af00      	add	r7, sp, #0
 8008974:	6078      	str	r0, [r7, #4]
 8008976:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800897c:	2309      	movs	r3, #9
 800897e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008980:	23c0      	movs	r3, #192	; 0xc0
 8008982:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008984:	2300      	movs	r3, #0
 8008986:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008988:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800898c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800898e:	f107 0308 	add.w	r3, r7, #8
 8008992:	4619      	mov	r1, r3
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f7ff fe4c 	bl	8008632 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 f916 	bl	8008bcc <SDMMC_GetCmdResp2>
 80089a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80089a2:	69fb      	ldr	r3, [r7, #28]
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3720      	adds	r7, #32
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b088      	sub	sp, #32
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80089b6:	2300      	movs	r3, #0
 80089b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80089ba:	2303      	movs	r3, #3
 80089bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80089be:	2340      	movs	r3, #64	; 0x40
 80089c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80089c2:	2300      	movs	r3, #0
 80089c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80089c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80089cc:	f107 0308 	add.w	r3, r7, #8
 80089d0:	4619      	mov	r1, r3
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f7ff fe2d 	bl	8008632 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80089d8:	683a      	ldr	r2, [r7, #0]
 80089da:	2103      	movs	r1, #3
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 f97b 	bl	8008cd8 <SDMMC_GetCmdResp6>
 80089e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80089e4:	69fb      	ldr	r3, [r7, #28]
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3720      	adds	r7, #32
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
	...

080089f0 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b088      	sub	sp, #32
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	460b      	mov	r3, r1
 80089fa:	607a      	str	r2, [r7, #4]
 80089fc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80089fe:	4b70      	ldr	r3, [pc, #448]	; (8008bc0 <SDMMC_GetCmdResp1+0x1d0>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a70      	ldr	r2, [pc, #448]	; (8008bc4 <SDMMC_GetCmdResp1+0x1d4>)
 8008a04:	fba2 2303 	umull	r2, r3, r2, r3
 8008a08:	0a5a      	lsrs	r2, r3, #9
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	fb02 f303 	mul.w	r3, r2, r3
 8008a10:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8008a12:	69fb      	ldr	r3, [r7, #28]
 8008a14:	1e5a      	subs	r2, r3, #1
 8008a16:	61fa      	str	r2, [r7, #28]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d102      	bne.n	8008a22 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008a1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008a20:	e0c9      	b.n	8008bb6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a26:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008a28:	69bb      	ldr	r3, [r7, #24]
 8008a2a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d0ef      	beq.n	8008a12 <SDMMC_GetCmdResp1+0x22>
 8008a32:	69bb      	ldr	r3, [r7, #24]
 8008a34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d1ea      	bne.n	8008a12 <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a40:	f003 0304 	and.w	r3, r3, #4
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d004      	beq.n	8008a52 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2204      	movs	r2, #4
 8008a4c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008a4e:	2304      	movs	r3, #4
 8008a50:	e0b1      	b.n	8008bb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a56:	f003 0301 	and.w	r3, r3, #1
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d004      	beq.n	8008a68 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2201      	movs	r2, #1
 8008a62:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008a64:	2301      	movs	r3, #1
 8008a66:	e0a6      	b.n	8008bb6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	22c5      	movs	r2, #197	; 0xc5
 8008a6c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008a6e:	68f8      	ldr	r0, [r7, #12]
 8008a70:	f7ff fe09 	bl	8008686 <SDMMC_GetCommandResponse>
 8008a74:	4603      	mov	r3, r0
 8008a76:	461a      	mov	r2, r3
 8008a78:	7afb      	ldrb	r3, [r7, #11]
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d001      	beq.n	8008a82 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e099      	b.n	8008bb6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008a82:	2100      	movs	r1, #0
 8008a84:	68f8      	ldr	r0, [r7, #12]
 8008a86:	f7ff fe0b 	bl	80086a0 <SDMMC_GetResponse>
 8008a8a:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008a8c:	697a      	ldr	r2, [r7, #20]
 8008a8e:	4b4e      	ldr	r3, [pc, #312]	; (8008bc8 <SDMMC_GetCmdResp1+0x1d8>)
 8008a90:	4013      	ands	r3, r2
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d101      	bne.n	8008a9a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008a96:	2300      	movs	r3, #0
 8008a98:	e08d      	b.n	8008bb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	da02      	bge.n	8008aa6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008aa0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008aa4:	e087      	b.n	8008bb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d001      	beq.n	8008ab4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008ab0:	2340      	movs	r3, #64	; 0x40
 8008ab2:	e080      	b.n	8008bb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d001      	beq.n	8008ac2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008abe:	2380      	movs	r3, #128	; 0x80
 8008ac0:	e079      	b.n	8008bb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d002      	beq.n	8008ad2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008acc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ad0:	e071      	b.n	8008bb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d002      	beq.n	8008ae2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008adc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ae0:	e069      	b.n	8008bb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d002      	beq.n	8008af2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008aec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008af0:	e061      	b.n	8008bb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d002      	beq.n	8008b02 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008afc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b00:	e059      	b.n	8008bb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d002      	beq.n	8008b12 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008b0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b10:	e051      	b.n	8008bb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d002      	beq.n	8008b22 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008b1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008b20:	e049      	b.n	8008bb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d002      	beq.n	8008b32 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008b2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008b30:	e041      	b.n	8008bb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d002      	beq.n	8008b42 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008b3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b40:	e039      	b.n	8008bb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d002      	beq.n	8008b52 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008b4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008b50:	e031      	b.n	8008bb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d002      	beq.n	8008b62 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008b5c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008b60:	e029      	b.n	8008bb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d002      	beq.n	8008b72 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008b6c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008b70:	e021      	b.n	8008bb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d002      	beq.n	8008b82 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008b7c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008b80:	e019      	b.n	8008bb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d002      	beq.n	8008b92 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008b8c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008b90:	e011      	b.n	8008bb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d002      	beq.n	8008ba2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008b9c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008ba0:	e009      	b.n	8008bb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	f003 0308 	and.w	r3, r3, #8
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d002      	beq.n	8008bb2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008bac:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008bb0:	e001      	b.n	8008bb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008bb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3720      	adds	r7, #32
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	20000028 	.word	0x20000028
 8008bc4:	10624dd3 	.word	0x10624dd3
 8008bc8:	fdffe008 	.word	0xfdffe008

08008bcc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b085      	sub	sp, #20
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008bd4:	4b1f      	ldr	r3, [pc, #124]	; (8008c54 <SDMMC_GetCmdResp2+0x88>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a1f      	ldr	r2, [pc, #124]	; (8008c58 <SDMMC_GetCmdResp2+0x8c>)
 8008bda:	fba2 2303 	umull	r2, r3, r2, r3
 8008bde:	0a5b      	lsrs	r3, r3, #9
 8008be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008be4:	fb02 f303 	mul.w	r3, r2, r3
 8008be8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	1e5a      	subs	r2, r3, #1
 8008bee:	60fa      	str	r2, [r7, #12]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d102      	bne.n	8008bfa <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008bf4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008bf8:	e026      	b.n	8008c48 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bfe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d0ef      	beq.n	8008bea <SDMMC_GetCmdResp2+0x1e>
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d1ea      	bne.n	8008bea <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c18:	f003 0304 	and.w	r3, r3, #4
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d004      	beq.n	8008c2a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2204      	movs	r2, #4
 8008c24:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008c26:	2304      	movs	r3, #4
 8008c28:	e00e      	b.n	8008c48 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c2e:	f003 0301 	and.w	r3, r3, #1
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d004      	beq.n	8008c40 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2201      	movs	r2, #1
 8008c3a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	e003      	b.n	8008c48 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	22c5      	movs	r2, #197	; 0xc5
 8008c44:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008c46:	2300      	movs	r3, #0
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3714      	adds	r7, #20
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr
 8008c54:	20000028 	.word	0x20000028
 8008c58:	10624dd3 	.word	0x10624dd3

08008c5c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b085      	sub	sp, #20
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008c64:	4b1a      	ldr	r3, [pc, #104]	; (8008cd0 <SDMMC_GetCmdResp3+0x74>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a1a      	ldr	r2, [pc, #104]	; (8008cd4 <SDMMC_GetCmdResp3+0x78>)
 8008c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8008c6e:	0a5b      	lsrs	r3, r3, #9
 8008c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c74:	fb02 f303 	mul.w	r3, r2, r3
 8008c78:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	1e5a      	subs	r2, r3, #1
 8008c7e:	60fa      	str	r2, [r7, #12]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d102      	bne.n	8008c8a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008c84:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008c88:	e01b      	b.n	8008cc2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c8e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d0ef      	beq.n	8008c7a <SDMMC_GetCmdResp3+0x1e>
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d1ea      	bne.n	8008c7a <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ca8:	f003 0304 	and.w	r3, r3, #4
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d004      	beq.n	8008cba <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2204      	movs	r2, #4
 8008cb4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008cb6:	2304      	movs	r3, #4
 8008cb8:	e003      	b.n	8008cc2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	22c5      	movs	r2, #197	; 0xc5
 8008cbe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008cc0:	2300      	movs	r3, #0
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3714      	adds	r7, #20
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr
 8008cce:	bf00      	nop
 8008cd0:	20000028 	.word	0x20000028
 8008cd4:	10624dd3 	.word	0x10624dd3

08008cd8 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b088      	sub	sp, #32
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	60f8      	str	r0, [r7, #12]
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	607a      	str	r2, [r7, #4]
 8008ce4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008ce6:	4b35      	ldr	r3, [pc, #212]	; (8008dbc <SDMMC_GetCmdResp6+0xe4>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a35      	ldr	r2, [pc, #212]	; (8008dc0 <SDMMC_GetCmdResp6+0xe8>)
 8008cec:	fba2 2303 	umull	r2, r3, r2, r3
 8008cf0:	0a5b      	lsrs	r3, r3, #9
 8008cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cf6:	fb02 f303 	mul.w	r3, r2, r3
 8008cfa:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8008cfc:	69fb      	ldr	r3, [r7, #28]
 8008cfe:	1e5a      	subs	r2, r3, #1
 8008d00:	61fa      	str	r2, [r7, #28]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d102      	bne.n	8008d0c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008d06:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008d0a:	e052      	b.n	8008db2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d10:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008d12:	69bb      	ldr	r3, [r7, #24]
 8008d14:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d0ef      	beq.n	8008cfc <SDMMC_GetCmdResp6+0x24>
 8008d1c:	69bb      	ldr	r3, [r7, #24]
 8008d1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d1ea      	bne.n	8008cfc <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d2a:	f003 0304 	and.w	r3, r3, #4
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d004      	beq.n	8008d3c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2204      	movs	r2, #4
 8008d36:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008d38:	2304      	movs	r3, #4
 8008d3a:	e03a      	b.n	8008db2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d40:	f003 0301 	and.w	r3, r3, #1
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d004      	beq.n	8008d52 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e02f      	b.n	8008db2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008d52:	68f8      	ldr	r0, [r7, #12]
 8008d54:	f7ff fc97 	bl	8008686 <SDMMC_GetCommandResponse>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	461a      	mov	r2, r3
 8008d5c:	7afb      	ldrb	r3, [r7, #11]
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d001      	beq.n	8008d66 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008d62:	2301      	movs	r3, #1
 8008d64:	e025      	b.n	8008db2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	22c5      	movs	r2, #197	; 0xc5
 8008d6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008d6c:	2100      	movs	r1, #0
 8008d6e:	68f8      	ldr	r0, [r7, #12]
 8008d70:	f7ff fc96 	bl	80086a0 <SDMMC_GetResponse>
 8008d74:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d106      	bne.n	8008d8e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	0c1b      	lsrs	r3, r3, #16
 8008d84:	b29a      	uxth	r2, r3
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	e011      	b.n	8008db2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d002      	beq.n	8008d9e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008d98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008d9c:	e009      	b.n	8008db2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d002      	beq.n	8008dae <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008da8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008dac:	e001      	b.n	8008db2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008dae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3720      	adds	r7, #32
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}
 8008dba:	bf00      	nop
 8008dbc:	20000028 	.word	0x20000028
 8008dc0:	10624dd3 	.word	0x10624dd3

08008dc4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b085      	sub	sp, #20
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008dcc:	4b22      	ldr	r3, [pc, #136]	; (8008e58 <SDMMC_GetCmdResp7+0x94>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a22      	ldr	r2, [pc, #136]	; (8008e5c <SDMMC_GetCmdResp7+0x98>)
 8008dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8008dd6:	0a5b      	lsrs	r3, r3, #9
 8008dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ddc:	fb02 f303 	mul.w	r3, r2, r3
 8008de0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	1e5a      	subs	r2, r3, #1
 8008de6:	60fa      	str	r2, [r7, #12]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d102      	bne.n	8008df2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008dec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008df0:	e02c      	b.n	8008e4c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008df6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d0ef      	beq.n	8008de2 <SDMMC_GetCmdResp7+0x1e>
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d1ea      	bne.n	8008de2 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e10:	f003 0304 	and.w	r3, r3, #4
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d004      	beq.n	8008e22 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2204      	movs	r2, #4
 8008e1c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008e1e:	2304      	movs	r3, #4
 8008e20:	e014      	b.n	8008e4c <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e26:	f003 0301 	and.w	r3, r3, #1
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d004      	beq.n	8008e38 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2201      	movs	r2, #1
 8008e32:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008e34:	2301      	movs	r3, #1
 8008e36:	e009      	b.n	8008e4c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d002      	beq.n	8008e4a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2240      	movs	r2, #64	; 0x40
 8008e48:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008e4a:	2300      	movs	r3, #0

}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3714      	adds	r7, #20
 8008e50:	46bd      	mov	sp, r7
 8008e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e56:	4770      	bx	lr
 8008e58:	20000028 	.word	0x20000028
 8008e5c:	10624dd3 	.word	0x10624dd3

08008e60 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b085      	sub	sp, #20
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008e68:	4b11      	ldr	r3, [pc, #68]	; (8008eb0 <SDMMC_GetCmdError+0x50>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a11      	ldr	r2, [pc, #68]	; (8008eb4 <SDMMC_GetCmdError+0x54>)
 8008e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8008e72:	0a5b      	lsrs	r3, r3, #9
 8008e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e78:	fb02 f303 	mul.w	r3, r2, r3
 8008e7c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	1e5a      	subs	r2, r3, #1
 8008e82:	60fa      	str	r2, [r7, #12]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d102      	bne.n	8008e8e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008e88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008e8c:	e009      	b.n	8008ea2 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d0f1      	beq.n	8008e7e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	22c5      	movs	r2, #197	; 0xc5
 8008e9e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8008ea0:	2300      	movs	r3, #0
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3714      	adds	r7, #20
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr
 8008eae:	bf00      	nop
 8008eb0:	20000028 	.word	0x20000028
 8008eb4:	10624dd3 	.word	0x10624dd3

08008eb8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008eb8:	b084      	sub	sp, #16
 8008eba:	b580      	push	{r7, lr}
 8008ebc:	b084      	sub	sp, #16
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
 8008ec2:	f107 001c 	add.w	r0, r7, #28
 8008ec6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	68db      	ldr	r3, [r3, #12]
 8008ece:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 f9a0 	bl	800921c <USB_CoreReset>
 8008edc:	4603      	mov	r3, r0
 8008ede:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8008ee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d106      	bne.n	8008ef4 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	639a      	str	r2, [r3, #56]	; 0x38
 8008ef2:	e005      	b.n	8008f00 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8008f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3710      	adds	r7, #16
 8008f06:	46bd      	mov	sp, r7
 8008f08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f0c:	b004      	add	sp, #16
 8008f0e:	4770      	bx	lr

08008f10 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	f043 0201 	orr.w	r2, r3, #1
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008f24:	2300      	movs	r3, #0
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	370c      	adds	r7, #12
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f30:	4770      	bx	lr

08008f32 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f32:	b480      	push	{r7}
 8008f34:	b083      	sub	sp, #12
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	f023 0201 	bic.w	r2, r3, #1
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008f46:	2300      	movs	r3, #0
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	370c      	adds	r7, #12
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr

08008f54 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b084      	sub	sp, #16
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008f60:	2300      	movs	r3, #0
 8008f62:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	68db      	ldr	r3, [r3, #12]
 8008f68:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008f70:	78fb      	ldrb	r3, [r7, #3]
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d115      	bne.n	8008fa2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008f82:	2001      	movs	r0, #1
 8008f84:	f7f7 fb16 	bl	80005b4 <HAL_Delay>
      ms++;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 f935 	bl	80091fe <USB_GetMode>
 8008f94:	4603      	mov	r3, r0
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d01e      	beq.n	8008fd8 <USB_SetCurrentMode+0x84>
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2b31      	cmp	r3, #49	; 0x31
 8008f9e:	d9f0      	bls.n	8008f82 <USB_SetCurrentMode+0x2e>
 8008fa0:	e01a      	b.n	8008fd8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008fa2:	78fb      	ldrb	r3, [r7, #3]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d115      	bne.n	8008fd4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	68db      	ldr	r3, [r3, #12]
 8008fac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008fb4:	2001      	movs	r0, #1
 8008fb6:	f7f7 fafd 	bl	80005b4 <HAL_Delay>
      ms++;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 f91c 	bl	80091fe <USB_GetMode>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d005      	beq.n	8008fd8 <USB_SetCurrentMode+0x84>
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2b31      	cmp	r3, #49	; 0x31
 8008fd0:	d9f0      	bls.n	8008fb4 <USB_SetCurrentMode+0x60>
 8008fd2:	e001      	b.n	8008fd8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	e005      	b.n	8008fe4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2b32      	cmp	r3, #50	; 0x32
 8008fdc:	d101      	bne.n	8008fe2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	e000      	b.n	8008fe4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008fe2:	2300      	movs	r3, #0
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3710      	adds	r7, #16
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b085      	sub	sp, #20
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	3301      	adds	r3, #1
 8008ffe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	4a13      	ldr	r2, [pc, #76]	; (8009050 <USB_FlushTxFifo+0x64>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d901      	bls.n	800900c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009008:	2303      	movs	r3, #3
 800900a:	e01b      	b.n	8009044 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	691b      	ldr	r3, [r3, #16]
 8009010:	2b00      	cmp	r3, #0
 8009012:	daf2      	bge.n	8008ffa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009014:	2300      	movs	r3, #0
 8009016:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	019b      	lsls	r3, r3, #6
 800901c:	f043 0220 	orr.w	r2, r3, #32
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	3301      	adds	r3, #1
 8009028:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	4a08      	ldr	r2, [pc, #32]	; (8009050 <USB_FlushTxFifo+0x64>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d901      	bls.n	8009036 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009032:	2303      	movs	r3, #3
 8009034:	e006      	b.n	8009044 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	691b      	ldr	r3, [r3, #16]
 800903a:	f003 0320 	and.w	r3, r3, #32
 800903e:	2b20      	cmp	r3, #32
 8009040:	d0f0      	beq.n	8009024 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009042:	2300      	movs	r3, #0
}
 8009044:	4618      	mov	r0, r3
 8009046:	3714      	adds	r7, #20
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr
 8009050:	00030d40 	.word	0x00030d40

08009054 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009054:	b480      	push	{r7}
 8009056:	b085      	sub	sp, #20
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800905c:	2300      	movs	r3, #0
 800905e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	3301      	adds	r3, #1
 8009064:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	4a11      	ldr	r2, [pc, #68]	; (80090b0 <USB_FlushRxFifo+0x5c>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d901      	bls.n	8009072 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800906e:	2303      	movs	r3, #3
 8009070:	e018      	b.n	80090a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	691b      	ldr	r3, [r3, #16]
 8009076:	2b00      	cmp	r3, #0
 8009078:	daf2      	bge.n	8009060 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800907a:	2300      	movs	r3, #0
 800907c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2210      	movs	r2, #16
 8009082:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	3301      	adds	r3, #1
 8009088:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	4a08      	ldr	r2, [pc, #32]	; (80090b0 <USB_FlushRxFifo+0x5c>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d901      	bls.n	8009096 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009092:	2303      	movs	r3, #3
 8009094:	e006      	b.n	80090a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	691b      	ldr	r3, [r3, #16]
 800909a:	f003 0310 	and.w	r3, r3, #16
 800909e:	2b10      	cmp	r3, #16
 80090a0:	d0f0      	beq.n	8009084 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80090a2:	2300      	movs	r3, #0
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3714      	adds	r7, #20
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr
 80090b0:	00030d40 	.word	0x00030d40

080090b4 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b089      	sub	sp, #36	; 0x24
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	60f8      	str	r0, [r7, #12]
 80090bc:	60b9      	str	r1, [r7, #8]
 80090be:	4611      	mov	r1, r2
 80090c0:	461a      	mov	r2, r3
 80090c2:	460b      	mov	r3, r1
 80090c4:	71fb      	strb	r3, [r7, #7]
 80090c6:	4613      	mov	r3, r2
 80090c8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80090d2:	88bb      	ldrh	r3, [r7, #4]
 80090d4:	3303      	adds	r3, #3
 80090d6:	089b      	lsrs	r3, r3, #2
 80090d8:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80090da:	2300      	movs	r3, #0
 80090dc:	61bb      	str	r3, [r7, #24]
 80090de:	e018      	b.n	8009112 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80090e0:	79fb      	ldrb	r3, [r7, #7]
 80090e2:	031a      	lsls	r2, r3, #12
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	4413      	add	r3, r2
 80090e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090ec:	461a      	mov	r2, r3
 80090ee:	69fb      	ldr	r3, [r7, #28]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	6013      	str	r3, [r2, #0]
    pSrc++;
 80090f4:	69fb      	ldr	r3, [r7, #28]
 80090f6:	3301      	adds	r3, #1
 80090f8:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80090fa:	69fb      	ldr	r3, [r7, #28]
 80090fc:	3301      	adds	r3, #1
 80090fe:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8009100:	69fb      	ldr	r3, [r7, #28]
 8009102:	3301      	adds	r3, #1
 8009104:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8009106:	69fb      	ldr	r3, [r7, #28]
 8009108:	3301      	adds	r3, #1
 800910a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800910c:	69bb      	ldr	r3, [r7, #24]
 800910e:	3301      	adds	r3, #1
 8009110:	61bb      	str	r3, [r7, #24]
 8009112:	69ba      	ldr	r2, [r7, #24]
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	429a      	cmp	r2, r3
 8009118:	d3e2      	bcc.n	80090e0 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800911a:	2300      	movs	r3, #0
}
 800911c:	4618      	mov	r0, r3
 800911e:	3724      	adds	r7, #36	; 0x24
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr

08009128 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009128:	b480      	push	{r7}
 800912a:	b08b      	sub	sp, #44	; 0x2c
 800912c:	af00      	add	r7, sp, #0
 800912e:	60f8      	str	r0, [r7, #12]
 8009130:	60b9      	str	r1, [r7, #8]
 8009132:	4613      	mov	r3, r2
 8009134:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800913e:	88fb      	ldrh	r3, [r7, #6]
 8009140:	089b      	lsrs	r3, r3, #2
 8009142:	b29b      	uxth	r3, r3
 8009144:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009146:	88fb      	ldrh	r3, [r7, #6]
 8009148:	f003 0303 	and.w	r3, r3, #3
 800914c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800914e:	2300      	movs	r3, #0
 8009150:	623b      	str	r3, [r7, #32]
 8009152:	e014      	b.n	800917e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009154:	69bb      	ldr	r3, [r7, #24]
 8009156:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800915a:	681a      	ldr	r2, [r3, #0]
 800915c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800915e:	601a      	str	r2, [r3, #0]
    pDest++;
 8009160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009162:	3301      	adds	r3, #1
 8009164:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009168:	3301      	adds	r3, #1
 800916a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800916c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800916e:	3301      	adds	r3, #1
 8009170:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009174:	3301      	adds	r3, #1
 8009176:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009178:	6a3b      	ldr	r3, [r7, #32]
 800917a:	3301      	adds	r3, #1
 800917c:	623b      	str	r3, [r7, #32]
 800917e:	6a3a      	ldr	r2, [r7, #32]
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	429a      	cmp	r2, r3
 8009184:	d3e6      	bcc.n	8009154 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009186:	8bfb      	ldrh	r3, [r7, #30]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d01e      	beq.n	80091ca <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800918c:	2300      	movs	r3, #0
 800918e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009190:	69bb      	ldr	r3, [r7, #24]
 8009192:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009196:	461a      	mov	r2, r3
 8009198:	f107 0310 	add.w	r3, r7, #16
 800919c:	6812      	ldr	r2, [r2, #0]
 800919e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80091a0:	693a      	ldr	r2, [r7, #16]
 80091a2:	6a3b      	ldr	r3, [r7, #32]
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	00db      	lsls	r3, r3, #3
 80091a8:	fa22 f303 	lsr.w	r3, r2, r3
 80091ac:	b2da      	uxtb	r2, r3
 80091ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b0:	701a      	strb	r2, [r3, #0]
      i++;
 80091b2:	6a3b      	ldr	r3, [r7, #32]
 80091b4:	3301      	adds	r3, #1
 80091b6:	623b      	str	r3, [r7, #32]
      pDest++;
 80091b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ba:	3301      	adds	r3, #1
 80091bc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80091be:	8bfb      	ldrh	r3, [r7, #30]
 80091c0:	3b01      	subs	r3, #1
 80091c2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80091c4:	8bfb      	ldrh	r3, [r7, #30]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d1ea      	bne.n	80091a0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80091ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	372c      	adds	r7, #44	; 0x2c
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr

080091d8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80091d8:	b480      	push	{r7}
 80091da:	b085      	sub	sp, #20
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	695b      	ldr	r3, [r3, #20]
 80091e4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	699b      	ldr	r3, [r3, #24]
 80091ea:	68fa      	ldr	r2, [r7, #12]
 80091ec:	4013      	ands	r3, r2
 80091ee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80091f0:	68fb      	ldr	r3, [r7, #12]
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3714      	adds	r7, #20
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr

080091fe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80091fe:	b480      	push	{r7}
 8009200:	b083      	sub	sp, #12
 8009202:	af00      	add	r7, sp, #0
 8009204:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	695b      	ldr	r3, [r3, #20]
 800920a:	f003 0301 	and.w	r3, r3, #1
}
 800920e:	4618      	mov	r0, r3
 8009210:	370c      	adds	r7, #12
 8009212:	46bd      	mov	sp, r7
 8009214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009218:	4770      	bx	lr
	...

0800921c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800921c:	b480      	push	{r7}
 800921e:	b085      	sub	sp, #20
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009224:	2300      	movs	r3, #0
 8009226:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	3301      	adds	r3, #1
 800922c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	4a13      	ldr	r2, [pc, #76]	; (8009280 <USB_CoreReset+0x64>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d901      	bls.n	800923a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009236:	2303      	movs	r3, #3
 8009238:	e01b      	b.n	8009272 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	691b      	ldr	r3, [r3, #16]
 800923e:	2b00      	cmp	r3, #0
 8009240:	daf2      	bge.n	8009228 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009242:	2300      	movs	r3, #0
 8009244:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	691b      	ldr	r3, [r3, #16]
 800924a:	f043 0201 	orr.w	r2, r3, #1
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	3301      	adds	r3, #1
 8009256:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	4a09      	ldr	r2, [pc, #36]	; (8009280 <USB_CoreReset+0x64>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d901      	bls.n	8009264 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009260:	2303      	movs	r3, #3
 8009262:	e006      	b.n	8009272 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	691b      	ldr	r3, [r3, #16]
 8009268:	f003 0301 	and.w	r3, r3, #1
 800926c:	2b01      	cmp	r3, #1
 800926e:	d0f0      	beq.n	8009252 <USB_CoreReset+0x36>

  return HAL_OK;
 8009270:	2300      	movs	r3, #0
}
 8009272:	4618      	mov	r0, r3
 8009274:	3714      	adds	r7, #20
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr
 800927e:	bf00      	nop
 8009280:	00030d40 	.word	0x00030d40

08009284 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009284:	b084      	sub	sp, #16
 8009286:	b580      	push	{r7, lr}
 8009288:	b086      	sub	sp, #24
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
 800928e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009292:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009296:	2300      	movs	r3, #0
 8009298:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80092a4:	461a      	mov	r2, r3
 80092a6:	2300      	movs	r3, #0
 80092a8:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	68fa      	ldr	r2, [r7, #12]
 80092cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80092d0:	f023 0304 	bic.w	r3, r3, #4
 80092d4:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80092d6:	2110      	movs	r1, #16
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f7ff fe87 	bl	8008fec <USB_FlushTxFifo>
 80092de:	4603      	mov	r3, r0
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d001      	beq.n	80092e8 <USB_HostInit+0x64>
  {
    ret = HAL_ERROR;
 80092e4:	2301      	movs	r3, #1
 80092e6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f7ff feb3 	bl	8009054 <USB_FlushRxFifo>
 80092ee:	4603      	mov	r3, r0
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d001      	beq.n	80092f8 <USB_HostInit+0x74>
  {
    ret = HAL_ERROR;
 80092f4:	2301      	movs	r3, #1
 80092f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80092f8:	2300      	movs	r3, #0
 80092fa:	613b      	str	r3, [r7, #16]
 80092fc:	e015      	b.n	800932a <USB_HostInit+0xa6>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	015a      	lsls	r2, r3, #5
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	4413      	add	r3, r2
 8009306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800930a:	461a      	mov	r2, r3
 800930c:	f04f 33ff 	mov.w	r3, #4294967295
 8009310:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	015a      	lsls	r2, r3, #5
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	4413      	add	r3, r2
 800931a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800931e:	461a      	mov	r2, r3
 8009320:	2300      	movs	r3, #0
 8009322:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	3301      	adds	r3, #1
 8009328:	613b      	str	r3, [r7, #16]
 800932a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800932c:	693a      	ldr	r2, [r7, #16]
 800932e:	429a      	cmp	r2, r3
 8009330:	d3e5      	bcc.n	80092fe <USB_HostInit+0x7a>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2200      	movs	r2, #0
 8009336:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f04f 32ff 	mov.w	r2, #4294967295
 800933e:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2280      	movs	r2, #128	; 0x80
 8009344:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	4a0c      	ldr	r2, [pc, #48]	; (800937c <USB_HostInit+0xf8>)
 800934a:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	4a0c      	ldr	r2, [pc, #48]	; (8009380 <USB_HostInit+0xfc>)
 8009350:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	699b      	ldr	r3, [r3, #24]
 8009358:	f043 0210 	orr.w	r2, r3, #16
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	699a      	ldr	r2, [r3, #24]
 8009364:	4b07      	ldr	r3, [pc, #28]	; (8009384 <USB_HostInit+0x100>)
 8009366:	4313      	orrs	r3, r2
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800936c:	7dfb      	ldrb	r3, [r7, #23]
}
 800936e:	4618      	mov	r0, r3
 8009370:	3718      	adds	r7, #24
 8009372:	46bd      	mov	sp, r7
 8009374:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009378:	b004      	add	sp, #16
 800937a:	4770      	bx	lr
 800937c:	00600080 	.word	0x00600080
 8009380:	004000e0 	.word	0x004000e0
 8009384:	a3200008 	.word	0xa3200008

08009388 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009388:	b480      	push	{r7}
 800938a:	b085      	sub	sp, #20
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	460b      	mov	r3, r1
 8009392:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	68fa      	ldr	r2, [r7, #12]
 80093a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80093a6:	f023 0303 	bic.w	r3, r3, #3
 80093aa:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	78fb      	ldrb	r3, [r7, #3]
 80093b6:	f003 0303 	and.w	r3, r3, #3
 80093ba:	68f9      	ldr	r1, [r7, #12]
 80093bc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80093c0:	4313      	orrs	r3, r2
 80093c2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80093c4:	78fb      	ldrb	r3, [r7, #3]
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	d107      	bne.n	80093da <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80093d0:	461a      	mov	r2, r3
 80093d2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80093d6:	6053      	str	r3, [r2, #4]
 80093d8:	e009      	b.n	80093ee <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80093da:	78fb      	ldrb	r3, [r7, #3]
 80093dc:	2b02      	cmp	r3, #2
 80093de:	d106      	bne.n	80093ee <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80093e6:	461a      	mov	r2, r3
 80093e8:	f241 7370 	movw	r3, #6000	; 0x1770
 80093ec:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80093ee:	2300      	movs	r3, #0
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3714      	adds	r7, #20
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr

080093fc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b084      	sub	sp, #16
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009408:	2300      	movs	r3, #0
 800940a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800941c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	68fa      	ldr	r2, [r7, #12]
 8009422:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800942a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800942c:	2064      	movs	r0, #100	; 0x64
 800942e:	f7f7 f8c1 	bl	80005b4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	68fa      	ldr	r2, [r7, #12]
 8009436:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800943a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800943e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009440:	200a      	movs	r0, #10
 8009442:	f7f7 f8b7 	bl	80005b4 <HAL_Delay>

  return HAL_OK;
 8009446:	2300      	movs	r3, #0
}
 8009448:	4618      	mov	r0, r3
 800944a:	3710      	adds	r7, #16
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009450:	b480      	push	{r7}
 8009452:	b085      	sub	sp, #20
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	460b      	mov	r3, r1
 800945a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009460:	2300      	movs	r3, #0
 8009462:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009474:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800947c:	2b00      	cmp	r3, #0
 800947e:	d109      	bne.n	8009494 <USB_DriveVbus+0x44>
 8009480:	78fb      	ldrb	r3, [r7, #3]
 8009482:	2b01      	cmp	r3, #1
 8009484:	d106      	bne.n	8009494 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	68fa      	ldr	r2, [r7, #12]
 800948a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800948e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009492:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800949a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800949e:	d109      	bne.n	80094b4 <USB_DriveVbus+0x64>
 80094a0:	78fb      	ldrb	r3, [r7, #3]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d106      	bne.n	80094b4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	68fa      	ldr	r2, [r7, #12]
 80094aa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80094ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094b2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80094b4:	2300      	movs	r3, #0
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3714      	adds	r7, #20
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr

080094c2 <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80094c2:	b480      	push	{r7}
 80094c4:	b085      	sub	sp, #20
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80094ce:	2300      	movs	r3, #0
 80094d0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	0c5b      	lsrs	r3, r3, #17
 80094e0:	f003 0303 	and.w	r3, r3, #3
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3714      	adds	r7, #20
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr

080094f0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b085      	sub	sp, #20
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009502:	689b      	ldr	r3, [r3, #8]
 8009504:	b29b      	uxth	r3, r3
}
 8009506:	4618      	mov	r0, r3
 8009508:	3714      	adds	r7, #20
 800950a:	46bd      	mov	sp, r7
 800950c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009510:	4770      	bx	lr
	...

08009514 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b088      	sub	sp, #32
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	4608      	mov	r0, r1
 800951e:	4611      	mov	r1, r2
 8009520:	461a      	mov	r2, r3
 8009522:	4603      	mov	r3, r0
 8009524:	70fb      	strb	r3, [r7, #3]
 8009526:	460b      	mov	r3, r1
 8009528:	70bb      	strb	r3, [r7, #2]
 800952a:	4613      	mov	r3, r2
 800952c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800952e:	2300      	movs	r3, #0
 8009530:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8009536:	78fb      	ldrb	r3, [r7, #3]
 8009538:	015a      	lsls	r2, r3, #5
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	4413      	add	r3, r2
 800953e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009542:	461a      	mov	r2, r3
 8009544:	f04f 33ff 	mov.w	r3, #4294967295
 8009548:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800954a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800954e:	2b03      	cmp	r3, #3
 8009550:	d867      	bhi.n	8009622 <USB_HC_Init+0x10e>
 8009552:	a201      	add	r2, pc, #4	; (adr r2, 8009558 <USB_HC_Init+0x44>)
 8009554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009558:	08009569 	.word	0x08009569
 800955c:	080095e5 	.word	0x080095e5
 8009560:	08009569 	.word	0x08009569
 8009564:	080095a7 	.word	0x080095a7
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009568:	78fb      	ldrb	r3, [r7, #3]
 800956a:	015a      	lsls	r2, r3, #5
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	4413      	add	r3, r2
 8009570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009574:	461a      	mov	r2, r3
 8009576:	f240 439d 	movw	r3, #1181	; 0x49d
 800957a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800957c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009580:	2b00      	cmp	r3, #0
 8009582:	da51      	bge.n	8009628 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009584:	78fb      	ldrb	r3, [r7, #3]
 8009586:	015a      	lsls	r2, r3, #5
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	4413      	add	r3, r2
 800958c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009590:	68db      	ldr	r3, [r3, #12]
 8009592:	78fa      	ldrb	r2, [r7, #3]
 8009594:	0151      	lsls	r1, r2, #5
 8009596:	693a      	ldr	r2, [r7, #16]
 8009598:	440a      	add	r2, r1
 800959a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800959e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095a2:	60d3      	str	r3, [r2, #12]
      }
      break;
 80095a4:	e040      	b.n	8009628 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80095a6:	78fb      	ldrb	r3, [r7, #3]
 80095a8:	015a      	lsls	r2, r3, #5
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	4413      	add	r3, r2
 80095ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095b2:	461a      	mov	r2, r3
 80095b4:	f240 639d 	movw	r3, #1693	; 0x69d
 80095b8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80095ba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	da34      	bge.n	800962c <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80095c2:	78fb      	ldrb	r3, [r7, #3]
 80095c4:	015a      	lsls	r2, r3, #5
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	4413      	add	r3, r2
 80095ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095ce:	68db      	ldr	r3, [r3, #12]
 80095d0:	78fa      	ldrb	r2, [r7, #3]
 80095d2:	0151      	lsls	r1, r2, #5
 80095d4:	693a      	ldr	r2, [r7, #16]
 80095d6:	440a      	add	r2, r1
 80095d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80095dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095e0:	60d3      	str	r3, [r2, #12]
      }

      break;
 80095e2:	e023      	b.n	800962c <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80095e4:	78fb      	ldrb	r3, [r7, #3]
 80095e6:	015a      	lsls	r2, r3, #5
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	4413      	add	r3, r2
 80095ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095f0:	461a      	mov	r2, r3
 80095f2:	f240 2325 	movw	r3, #549	; 0x225
 80095f6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80095f8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	da17      	bge.n	8009630 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009600:	78fb      	ldrb	r3, [r7, #3]
 8009602:	015a      	lsls	r2, r3, #5
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	4413      	add	r3, r2
 8009608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800960c:	68db      	ldr	r3, [r3, #12]
 800960e:	78fa      	ldrb	r2, [r7, #3]
 8009610:	0151      	lsls	r1, r2, #5
 8009612:	693a      	ldr	r2, [r7, #16]
 8009614:	440a      	add	r2, r1
 8009616:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800961a:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800961e:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009620:	e006      	b.n	8009630 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8009622:	2301      	movs	r3, #1
 8009624:	77fb      	strb	r3, [r7, #31]
      break;
 8009626:	e004      	b.n	8009632 <USB_HC_Init+0x11e>
      break;
 8009628:	bf00      	nop
 800962a:	e002      	b.n	8009632 <USB_HC_Init+0x11e>
      break;
 800962c:	bf00      	nop
 800962e:	e000      	b.n	8009632 <USB_HC_Init+0x11e>
      break;
 8009630:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8009632:	78fb      	ldrb	r3, [r7, #3]
 8009634:	015a      	lsls	r2, r3, #5
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	4413      	add	r3, r2
 800963a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	78fa      	ldrb	r2, [r7, #3]
 8009642:	0151      	lsls	r1, r2, #5
 8009644:	693a      	ldr	r2, [r7, #16]
 8009646:	440a      	add	r2, r1
 8009648:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800964c:	f043 0302 	orr.w	r3, r3, #2
 8009650:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009658:	699a      	ldr	r2, [r3, #24]
 800965a:	78fb      	ldrb	r3, [r7, #3]
 800965c:	f003 030f 	and.w	r3, r3, #15
 8009660:	2101      	movs	r1, #1
 8009662:	fa01 f303 	lsl.w	r3, r1, r3
 8009666:	6939      	ldr	r1, [r7, #16]
 8009668:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800966c:	4313      	orrs	r3, r2
 800966e:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	699b      	ldr	r3, [r3, #24]
 8009674:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800967c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009680:	2b00      	cmp	r3, #0
 8009682:	da03      	bge.n	800968c <USB_HC_Init+0x178>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009684:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009688:	61bb      	str	r3, [r7, #24]
 800968a:	e001      	b.n	8009690 <USB_HC_Init+0x17c>
  }
  else
  {
    HCcharEpDir = 0U;
 800968c:	2300      	movs	r3, #0
 800968e:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f7ff ff16 	bl	80094c2 <USB_GetHostSpeed>
 8009696:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009698:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800969c:	2b02      	cmp	r3, #2
 800969e:	d106      	bne.n	80096ae <USB_HC_Init+0x19a>
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2b02      	cmp	r3, #2
 80096a4:	d003      	beq.n	80096ae <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80096a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80096aa:	617b      	str	r3, [r7, #20]
 80096ac:	e001      	b.n	80096b2 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80096ae:	2300      	movs	r3, #0
 80096b0:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80096b2:	787b      	ldrb	r3, [r7, #1]
 80096b4:	059b      	lsls	r3, r3, #22
 80096b6:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80096ba:	78bb      	ldrb	r3, [r7, #2]
 80096bc:	02db      	lsls	r3, r3, #11
 80096be:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80096c2:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80096c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80096c8:	049b      	lsls	r3, r3, #18
 80096ca:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80096ce:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80096d0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80096d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80096d6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80096d8:	69bb      	ldr	r3, [r7, #24]
 80096da:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80096dc:	78fb      	ldrb	r3, [r7, #3]
 80096de:	0159      	lsls	r1, r3, #5
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	440b      	add	r3, r1
 80096e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096e8:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80096ee:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80096f0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80096f4:	2b03      	cmp	r3, #3
 80096f6:	d003      	beq.n	8009700 <USB_HC_Init+0x1ec>
 80096f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d10f      	bne.n	8009720 <USB_HC_Init+0x20c>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8009700:	78fb      	ldrb	r3, [r7, #3]
 8009702:	015a      	lsls	r2, r3, #5
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	4413      	add	r3, r2
 8009708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	78fa      	ldrb	r2, [r7, #3]
 8009710:	0151      	lsls	r1, r2, #5
 8009712:	693a      	ldr	r2, [r7, #16]
 8009714:	440a      	add	r2, r1
 8009716:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800971a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800971e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009720:	7ffb      	ldrb	r3, [r7, #31]
}
 8009722:	4618      	mov	r0, r3
 8009724:	3720      	adds	r7, #32
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}
 800972a:	bf00      	nop

0800972c <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b088      	sub	sp, #32
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	785b      	ldrb	r3, [r3, #1]
 800973e:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009740:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009744:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	695b      	ldr	r3, [r3, #20]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d018      	beq.n	8009780 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	695b      	ldr	r3, [r3, #20]
 8009752:	683a      	ldr	r2, [r7, #0]
 8009754:	8912      	ldrh	r2, [r2, #8]
 8009756:	4413      	add	r3, r2
 8009758:	3b01      	subs	r3, #1
 800975a:	683a      	ldr	r2, [r7, #0]
 800975c:	8912      	ldrh	r2, [r2, #8]
 800975e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009762:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8009764:	8bfa      	ldrh	r2, [r7, #30]
 8009766:	8a7b      	ldrh	r3, [r7, #18]
 8009768:	429a      	cmp	r2, r3
 800976a:	d90b      	bls.n	8009784 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 800976c:	8a7b      	ldrh	r3, [r7, #18]
 800976e:	83fb      	strh	r3, [r7, #30]
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009770:	8bfb      	ldrh	r3, [r7, #30]
 8009772:	683a      	ldr	r2, [r7, #0]
 8009774:	8912      	ldrh	r2, [r2, #8]
 8009776:	fb03 f202 	mul.w	r2, r3, r2
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	611a      	str	r2, [r3, #16]
 800977e:	e001      	b.n	8009784 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 8009780:	2301      	movs	r3, #1
 8009782:	83fb      	strh	r3, [r7, #30]

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	78db      	ldrb	r3, [r3, #3]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d007      	beq.n	800979c <USB_HC_StartXfer+0x70>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800978c:	8bfb      	ldrh	r3, [r7, #30]
 800978e:	683a      	ldr	r2, [r7, #0]
 8009790:	8912      	ldrh	r2, [r2, #8]
 8009792:	fb03 f202 	mul.w	r2, r3, r2
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	611a      	str	r2, [r3, #16]
 800979a:	e003      	b.n	80097a4 <USB_HC_StartXfer+0x78>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	695a      	ldr	r2, [r3, #20]
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	691b      	ldr	r3, [r3, #16]
 80097a8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80097ac:	8bfb      	ldrh	r3, [r7, #30]
 80097ae:	04d9      	lsls	r1, r3, #19
 80097b0:	4b59      	ldr	r3, [pc, #356]	; (8009918 <USB_HC_StartXfer+0x1ec>)
 80097b2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80097b4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	7a9b      	ldrb	r3, [r3, #10]
 80097ba:	075b      	lsls	r3, r3, #29
 80097bc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80097c0:	6979      	ldr	r1, [r7, #20]
 80097c2:	0148      	lsls	r0, r1, #5
 80097c4:	69b9      	ldr	r1, [r7, #24]
 80097c6:	4401      	add	r1, r0
 80097c8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80097cc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80097ce:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80097d0:	69bb      	ldr	r3, [r7, #24]
 80097d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097d6:	689b      	ldr	r3, [r3, #8]
 80097d8:	f003 0301 	and.w	r3, r3, #1
 80097dc:	2b00      	cmp	r3, #0
 80097de:	bf0c      	ite	eq
 80097e0:	2301      	moveq	r3, #1
 80097e2:	2300      	movne	r3, #0
 80097e4:	b2db      	uxtb	r3, r3
 80097e6:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	015a      	lsls	r2, r3, #5
 80097ec:	69bb      	ldr	r3, [r7, #24]
 80097ee:	4413      	add	r3, r2
 80097f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	697a      	ldr	r2, [r7, #20]
 80097f8:	0151      	lsls	r1, r2, #5
 80097fa:	69ba      	ldr	r2, [r7, #24]
 80097fc:	440a      	add	r2, r1
 80097fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009802:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009806:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	015a      	lsls	r2, r3, #5
 800980c:	69bb      	ldr	r3, [r7, #24]
 800980e:	4413      	add	r3, r2
 8009810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009814:	681a      	ldr	r2, [r3, #0]
 8009816:	7c7b      	ldrb	r3, [r7, #17]
 8009818:	075b      	lsls	r3, r3, #29
 800981a:	6979      	ldr	r1, [r7, #20]
 800981c:	0148      	lsls	r0, r1, #5
 800981e:	69b9      	ldr	r1, [r7, #24]
 8009820:	4401      	add	r1, r0
 8009822:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009826:	4313      	orrs	r3, r2
 8009828:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	015a      	lsls	r2, r3, #5
 800982e:	69bb      	ldr	r3, [r7, #24]
 8009830:	4413      	add	r3, r2
 8009832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009840:	60bb      	str	r3, [r7, #8]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	78db      	ldrb	r3, [r3, #3]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d004      	beq.n	8009854 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009850:	60bb      	str	r3, [r7, #8]
 8009852:	e003      	b.n	800985c <USB_HC_StartXfer+0x130>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800985a:	60bb      	str	r3, [r7, #8]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009862:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	015a      	lsls	r2, r3, #5
 8009868:	69bb      	ldr	r3, [r7, #24]
 800986a:	4413      	add	r3, r2
 800986c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009870:	461a      	mov	r2, r3
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	6013      	str	r3, [r2, #0]

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	78db      	ldrb	r3, [r3, #3]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d147      	bne.n	800990e <USB_HC_StartXfer+0x1e2>
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	695b      	ldr	r3, [r3, #20]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d043      	beq.n	800990e <USB_HC_StartXfer+0x1e2>
  {
    switch (hc->ep_type)
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	79db      	ldrb	r3, [r3, #7]
 800988a:	2b03      	cmp	r3, #3
 800988c:	d830      	bhi.n	80098f0 <USB_HC_StartXfer+0x1c4>
 800988e:	a201      	add	r2, pc, #4	; (adr r2, 8009894 <USB_HC_StartXfer+0x168>)
 8009890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009894:	080098a5 	.word	0x080098a5
 8009898:	080098c9 	.word	0x080098c9
 800989c:	080098a5 	.word	0x080098a5
 80098a0:	080098c9 	.word	0x080098c9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	695b      	ldr	r3, [r3, #20]
 80098a8:	3303      	adds	r3, #3
 80098aa:	089b      	lsrs	r3, r3, #2
 80098ac:	81fb      	strh	r3, [r7, #14]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80098ae:	89fa      	ldrh	r2, [r7, #14]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	429a      	cmp	r2, r3
 80098b8:	d91c      	bls.n	80098f4 <USB_HC_StartXfer+0x1c8>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	699b      	ldr	r3, [r3, #24]
 80098be:	f043 0220 	orr.w	r2, r3, #32
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	619a      	str	r2, [r3, #24]
        }
        break;
 80098c6:	e015      	b.n	80098f4 <USB_HC_StartXfer+0x1c8>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	695b      	ldr	r3, [r3, #20]
 80098cc:	3303      	adds	r3, #3
 80098ce:	089b      	lsrs	r3, r3, #2
 80098d0:	81fb      	strh	r3, [r7, #14]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80098d2:	89fa      	ldrh	r2, [r7, #14]
 80098d4:	69bb      	ldr	r3, [r7, #24]
 80098d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80098da:	691b      	ldr	r3, [r3, #16]
 80098dc:	b29b      	uxth	r3, r3
 80098de:	429a      	cmp	r2, r3
 80098e0:	d90a      	bls.n	80098f8 <USB_HC_StartXfer+0x1cc>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	699b      	ldr	r3, [r3, #24]
 80098e6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	619a      	str	r2, [r3, #24]
        }
        break;
 80098ee:	e003      	b.n	80098f8 <USB_HC_StartXfer+0x1cc>

      default:
        break;
 80098f0:	bf00      	nop
 80098f2:	e002      	b.n	80098fa <USB_HC_StartXfer+0x1ce>
        break;
 80098f4:	bf00      	nop
 80098f6:	e000      	b.n	80098fa <USB_HC_StartXfer+0x1ce>
        break;
 80098f8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	68d9      	ldr	r1, [r3, #12]
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	785a      	ldrb	r2, [r3, #1]
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	695b      	ldr	r3, [r3, #20]
 8009906:	b29b      	uxth	r3, r3
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f7ff fbd3 	bl	80090b4 <USB_WritePacket>
  }

  return HAL_OK;
 800990e:	2300      	movs	r3, #0
}
 8009910:	4618      	mov	r0, r3
 8009912:	3720      	adds	r7, #32
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}
 8009918:	1ff80000 	.word	0x1ff80000

0800991c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800991c:	b480      	push	{r7}
 800991e:	b085      	sub	sp, #20
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800992e:	695b      	ldr	r3, [r3, #20]
 8009930:	b29b      	uxth	r3, r3
}
 8009932:	4618      	mov	r0, r3
 8009934:	3714      	adds	r7, #20
 8009936:	46bd      	mov	sp, r7
 8009938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993c:	4770      	bx	lr

0800993e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800993e:	b480      	push	{r7}
 8009940:	b089      	sub	sp, #36	; 0x24
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
 8009946:	460b      	mov	r3, r1
 8009948:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800994e:	78fb      	ldrb	r3, [r7, #3]
 8009950:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8009952:	2300      	movs	r3, #0
 8009954:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009956:	69bb      	ldr	r3, [r7, #24]
 8009958:	015a      	lsls	r2, r3, #5
 800995a:	69fb      	ldr	r3, [r7, #28]
 800995c:	4413      	add	r3, r2
 800995e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	0c9b      	lsrs	r3, r3, #18
 8009966:	f003 0303 	and.w	r3, r3, #3
 800996a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800996c:	69bb      	ldr	r3, [r7, #24]
 800996e:	015a      	lsls	r2, r3, #5
 8009970:	69fb      	ldr	r3, [r7, #28]
 8009972:	4413      	add	r3, r2
 8009974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	0fdb      	lsrs	r3, r3, #31
 800997c:	f003 0301 	and.w	r3, r3, #1
 8009980:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	689b      	ldr	r3, [r3, #8]
 8009986:	f003 0320 	and.w	r3, r3, #32
 800998a:	2b20      	cmp	r3, #32
 800998c:	d104      	bne.n	8009998 <USB_HC_Halt+0x5a>
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d101      	bne.n	8009998 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8009994:	2300      	movs	r3, #0
 8009996:	e0c8      	b.n	8009b2a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d002      	beq.n	80099a4 <USB_HC_Halt+0x66>
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	2b02      	cmp	r3, #2
 80099a2:	d163      	bne.n	8009a6c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80099a4:	69bb      	ldr	r3, [r7, #24]
 80099a6:	015a      	lsls	r2, r3, #5
 80099a8:	69fb      	ldr	r3, [r7, #28]
 80099aa:	4413      	add	r3, r2
 80099ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	69ba      	ldr	r2, [r7, #24]
 80099b4:	0151      	lsls	r1, r2, #5
 80099b6:	69fa      	ldr	r2, [r7, #28]
 80099b8:	440a      	add	r2, r1
 80099ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80099be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80099c2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	689b      	ldr	r3, [r3, #8]
 80099c8:	f003 0320 	and.w	r3, r3, #32
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	f040 80ab 	bne.w	8009b28 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d133      	bne.n	8009a46 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80099de:	69bb      	ldr	r3, [r7, #24]
 80099e0:	015a      	lsls	r2, r3, #5
 80099e2:	69fb      	ldr	r3, [r7, #28]
 80099e4:	4413      	add	r3, r2
 80099e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	69ba      	ldr	r2, [r7, #24]
 80099ee:	0151      	lsls	r1, r2, #5
 80099f0:	69fa      	ldr	r2, [r7, #28]
 80099f2:	440a      	add	r2, r1
 80099f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80099f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80099fc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80099fe:	69bb      	ldr	r3, [r7, #24]
 8009a00:	015a      	lsls	r2, r3, #5
 8009a02:	69fb      	ldr	r3, [r7, #28]
 8009a04:	4413      	add	r3, r2
 8009a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	69ba      	ldr	r2, [r7, #24]
 8009a0e:	0151      	lsls	r1, r2, #5
 8009a10:	69fa      	ldr	r2, [r7, #28]
 8009a12:	440a      	add	r2, r1
 8009a14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009a1c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	3301      	adds	r3, #1
 8009a22:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a2a:	d81d      	bhi.n	8009a68 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009a2c:	69bb      	ldr	r3, [r7, #24]
 8009a2e:	015a      	lsls	r2, r3, #5
 8009a30:	69fb      	ldr	r3, [r7, #28]
 8009a32:	4413      	add	r3, r2
 8009a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a42:	d0ec      	beq.n	8009a1e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009a44:	e070      	b.n	8009b28 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009a46:	69bb      	ldr	r3, [r7, #24]
 8009a48:	015a      	lsls	r2, r3, #5
 8009a4a:	69fb      	ldr	r3, [r7, #28]
 8009a4c:	4413      	add	r3, r2
 8009a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	69ba      	ldr	r2, [r7, #24]
 8009a56:	0151      	lsls	r1, r2, #5
 8009a58:	69fa      	ldr	r2, [r7, #28]
 8009a5a:	440a      	add	r2, r1
 8009a5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009a64:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009a66:	e05f      	b.n	8009b28 <USB_HC_Halt+0x1ea>
            break;
 8009a68:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009a6a:	e05d      	b.n	8009b28 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009a6c:	69bb      	ldr	r3, [r7, #24]
 8009a6e:	015a      	lsls	r2, r3, #5
 8009a70:	69fb      	ldr	r3, [r7, #28]
 8009a72:	4413      	add	r3, r2
 8009a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	69ba      	ldr	r2, [r7, #24]
 8009a7c:	0151      	lsls	r1, r2, #5
 8009a7e:	69fa      	ldr	r2, [r7, #28]
 8009a80:	440a      	add	r2, r1
 8009a82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a8a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009a8c:	69fb      	ldr	r3, [r7, #28]
 8009a8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a92:	691b      	ldr	r3, [r3, #16]
 8009a94:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d133      	bne.n	8009b04 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009a9c:	69bb      	ldr	r3, [r7, #24]
 8009a9e:	015a      	lsls	r2, r3, #5
 8009aa0:	69fb      	ldr	r3, [r7, #28]
 8009aa2:	4413      	add	r3, r2
 8009aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	69ba      	ldr	r2, [r7, #24]
 8009aac:	0151      	lsls	r1, r2, #5
 8009aae:	69fa      	ldr	r2, [r7, #28]
 8009ab0:	440a      	add	r2, r1
 8009ab2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ab6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009aba:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009abc:	69bb      	ldr	r3, [r7, #24]
 8009abe:	015a      	lsls	r2, r3, #5
 8009ac0:	69fb      	ldr	r3, [r7, #28]
 8009ac2:	4413      	add	r3, r2
 8009ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	69ba      	ldr	r2, [r7, #24]
 8009acc:	0151      	lsls	r1, r2, #5
 8009ace:	69fa      	ldr	r2, [r7, #28]
 8009ad0:	440a      	add	r2, r1
 8009ad2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ad6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009ada:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	3301      	adds	r3, #1
 8009ae0:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ae8:	d81d      	bhi.n	8009b26 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009aea:	69bb      	ldr	r3, [r7, #24]
 8009aec:	015a      	lsls	r2, r3, #5
 8009aee:	69fb      	ldr	r3, [r7, #28]
 8009af0:	4413      	add	r3, r2
 8009af2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009afc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b00:	d0ec      	beq.n	8009adc <USB_HC_Halt+0x19e>
 8009b02:	e011      	b.n	8009b28 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009b04:	69bb      	ldr	r3, [r7, #24]
 8009b06:	015a      	lsls	r2, r3, #5
 8009b08:	69fb      	ldr	r3, [r7, #28]
 8009b0a:	4413      	add	r3, r2
 8009b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	69ba      	ldr	r2, [r7, #24]
 8009b14:	0151      	lsls	r1, r2, #5
 8009b16:	69fa      	ldr	r2, [r7, #28]
 8009b18:	440a      	add	r2, r1
 8009b1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009b22:	6013      	str	r3, [r2, #0]
 8009b24:	e000      	b.n	8009b28 <USB_HC_Halt+0x1ea>
          break;
 8009b26:	bf00      	nop
    }
  }

  return HAL_OK;
 8009b28:	2300      	movs	r3, #0
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3724      	adds	r7, #36	; 0x24
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b34:	4770      	bx	lr

08009b36 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009b36:	b580      	push	{r7, lr}
 8009b38:	b088      	sub	sp, #32
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8009b46:	2300      	movs	r3, #0
 8009b48:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f7ff f9f1 	bl	8008f32 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009b50:	2110      	movs	r1, #16
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f7ff fa4a 	bl	8008fec <USB_FlushTxFifo>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d001      	beq.n	8009b62 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8009b5e:	2301      	movs	r3, #1
 8009b60:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f7ff fa76 	bl	8009054 <USB_FlushRxFifo>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d001      	beq.n	8009b72 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009b72:	2300      	movs	r3, #0
 8009b74:	61bb      	str	r3, [r7, #24]
 8009b76:	e01f      	b.n	8009bb8 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8009b78:	69bb      	ldr	r3, [r7, #24]
 8009b7a:	015a      	lsls	r2, r3, #5
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	4413      	add	r3, r2
 8009b80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b8e:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009b96:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009b9e:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009ba0:	69bb      	ldr	r3, [r7, #24]
 8009ba2:	015a      	lsls	r2, r3, #5
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	4413      	add	r3, r2
 8009ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bac:	461a      	mov	r2, r3
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009bb2:	69bb      	ldr	r3, [r7, #24]
 8009bb4:	3301      	adds	r3, #1
 8009bb6:	61bb      	str	r3, [r7, #24]
 8009bb8:	69bb      	ldr	r3, [r7, #24]
 8009bba:	2b0f      	cmp	r3, #15
 8009bbc:	d9dc      	bls.n	8009b78 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	61bb      	str	r3, [r7, #24]
 8009bc2:	e034      	b.n	8009c2e <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8009bc4:	69bb      	ldr	r3, [r7, #24]
 8009bc6:	015a      	lsls	r2, r3, #5
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	4413      	add	r3, r2
 8009bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009bda:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8009bdc:	693b      	ldr	r3, [r7, #16]
 8009bde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009be2:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009bea:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009bec:	69bb      	ldr	r3, [r7, #24]
 8009bee:	015a      	lsls	r2, r3, #5
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	4413      	add	r3, r2
 8009bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	3301      	adds	r3, #1
 8009c02:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009c0a:	d80c      	bhi.n	8009c26 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009c0c:	69bb      	ldr	r3, [r7, #24]
 8009c0e:	015a      	lsls	r2, r3, #5
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	4413      	add	r3, r2
 8009c14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c22:	d0ec      	beq.n	8009bfe <USB_StopHost+0xc8>
 8009c24:	e000      	b.n	8009c28 <USB_StopHost+0xf2>
        break;
 8009c26:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009c28:	69bb      	ldr	r3, [r7, #24]
 8009c2a:	3301      	adds	r3, #1
 8009c2c:	61bb      	str	r3, [r7, #24]
 8009c2e:	69bb      	ldr	r3, [r7, #24]
 8009c30:	2b0f      	cmp	r3, #15
 8009c32:	d9c7      	bls.n	8009bc4 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c3a:	461a      	mov	r2, r3
 8009c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8009c40:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f04f 32ff 	mov.w	r2, #4294967295
 8009c48:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f7ff f960 	bl	8008f10 <USB_EnableGlobalInt>

  return ret;
 8009c50:	7ffb      	ldrb	r3, [r7, #31]
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3720      	adds	r7, #32
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}

08009c5a <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009c5a:	b590      	push	{r4, r7, lr}
 8009c5c:	b089      	sub	sp, #36	; 0x24
 8009c5e:	af04      	add	r7, sp, #16
 8009c60:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009c62:	2301      	movs	r3, #1
 8009c64:	2202      	movs	r2, #2
 8009c66:	2102      	movs	r1, #2
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 fc67 	bl	800a53c <USBH_FindInterface>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009c72:	7bfb      	ldrb	r3, [r7, #15]
 8009c74:	2bff      	cmp	r3, #255	; 0xff
 8009c76:	d002      	beq.n	8009c7e <USBH_CDC_InterfaceInit+0x24>
 8009c78:	7bfb      	ldrb	r3, [r7, #15]
 8009c7a:	2b01      	cmp	r3, #1
 8009c7c:	d901      	bls.n	8009c82 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009c7e:	2302      	movs	r3, #2
 8009c80:	e13d      	b.n	8009efe <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009c82:	7bfb      	ldrb	r3, [r7, #15]
 8009c84:	4619      	mov	r1, r3
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f000 fc3c 	bl	800a504 <USBH_SelectInterface>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009c90:	7bbb      	ldrb	r3, [r7, #14]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d001      	beq.n	8009c9a <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009c96:	2302      	movs	r3, #2
 8009c98:	e131      	b.n	8009efe <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009ca0:	2050      	movs	r0, #80	; 0x50
 8009ca2:	f003 fd39 	bl	800d718 <malloc>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009cb0:	69db      	ldr	r3, [r3, #28]
 8009cb2:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d101      	bne.n	8009cbe <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009cba:	2302      	movs	r3, #2
 8009cbc:	e11f      	b.n	8009efe <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009cbe:	2250      	movs	r2, #80	; 0x50
 8009cc0:	2100      	movs	r1, #0
 8009cc2:	68b8      	ldr	r0, [r7, #8]
 8009cc4:	f003 fd38 	bl	800d738 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8009cc8:	7bfb      	ldrb	r3, [r7, #15]
 8009cca:	687a      	ldr	r2, [r7, #4]
 8009ccc:	211a      	movs	r1, #26
 8009cce:	fb01 f303 	mul.w	r3, r1, r3
 8009cd2:	4413      	add	r3, r2
 8009cd4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009cd8:	781b      	ldrb	r3, [r3, #0]
 8009cda:	b25b      	sxtb	r3, r3
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	da15      	bge.n	8009d0c <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009ce0:	7bfb      	ldrb	r3, [r7, #15]
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	211a      	movs	r1, #26
 8009ce6:	fb01 f303 	mul.w	r3, r1, r3
 8009cea:	4413      	add	r3, r2
 8009cec:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009cf0:	781a      	ldrb	r2, [r3, #0]
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009cf6:	7bfb      	ldrb	r3, [r7, #15]
 8009cf8:	687a      	ldr	r2, [r7, #4]
 8009cfa:	211a      	movs	r1, #26
 8009cfc:	fb01 f303 	mul.w	r3, r1, r3
 8009d00:	4413      	add	r3, r2
 8009d02:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009d06:	881a      	ldrh	r2, [r3, #0]
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	785b      	ldrb	r3, [r3, #1]
 8009d10:	4619      	mov	r1, r3
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f001 fe33 	bl	800b97e <USBH_AllocPipe>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	461a      	mov	r2, r3
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	7819      	ldrb	r1, [r3, #0]
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	7858      	ldrb	r0, [r3, #1]
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009d34:	68ba      	ldr	r2, [r7, #8]
 8009d36:	8952      	ldrh	r2, [r2, #10]
 8009d38:	9202      	str	r2, [sp, #8]
 8009d3a:	2203      	movs	r2, #3
 8009d3c:	9201      	str	r2, [sp, #4]
 8009d3e:	9300      	str	r3, [sp, #0]
 8009d40:	4623      	mov	r3, r4
 8009d42:	4602      	mov	r2, r0
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f001 fdeb 	bl	800b920 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	781b      	ldrb	r3, [r3, #0]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	4619      	mov	r1, r3
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f003 fc08 	bl	800d568 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009d58:	2300      	movs	r3, #0
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	210a      	movs	r1, #10
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f000 fbec 	bl	800a53c <USBH_FindInterface>
 8009d64:	4603      	mov	r3, r0
 8009d66:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009d68:	7bfb      	ldrb	r3, [r7, #15]
 8009d6a:	2bff      	cmp	r3, #255	; 0xff
 8009d6c:	d002      	beq.n	8009d74 <USBH_CDC_InterfaceInit+0x11a>
 8009d6e:	7bfb      	ldrb	r3, [r7, #15]
 8009d70:	2b01      	cmp	r3, #1
 8009d72:	d901      	bls.n	8009d78 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009d74:	2302      	movs	r3, #2
 8009d76:	e0c2      	b.n	8009efe <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8009d78:	7bfb      	ldrb	r3, [r7, #15]
 8009d7a:	687a      	ldr	r2, [r7, #4]
 8009d7c:	211a      	movs	r1, #26
 8009d7e:	fb01 f303 	mul.w	r3, r1, r3
 8009d82:	4413      	add	r3, r2
 8009d84:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	b25b      	sxtb	r3, r3
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	da16      	bge.n	8009dbe <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009d90:	7bfb      	ldrb	r3, [r7, #15]
 8009d92:	687a      	ldr	r2, [r7, #4]
 8009d94:	211a      	movs	r1, #26
 8009d96:	fb01 f303 	mul.w	r3, r1, r3
 8009d9a:	4413      	add	r3, r2
 8009d9c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009da0:	781a      	ldrb	r2, [r3, #0]
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009da6:	7bfb      	ldrb	r3, [r7, #15]
 8009da8:	687a      	ldr	r2, [r7, #4]
 8009daa:	211a      	movs	r1, #26
 8009dac:	fb01 f303 	mul.w	r3, r1, r3
 8009db0:	4413      	add	r3, r2
 8009db2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009db6:	881a      	ldrh	r2, [r3, #0]
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	835a      	strh	r2, [r3, #26]
 8009dbc:	e015      	b.n	8009dea <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009dbe:	7bfb      	ldrb	r3, [r7, #15]
 8009dc0:	687a      	ldr	r2, [r7, #4]
 8009dc2:	211a      	movs	r1, #26
 8009dc4:	fb01 f303 	mul.w	r3, r1, r3
 8009dc8:	4413      	add	r3, r2
 8009dca:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009dce:	781a      	ldrb	r2, [r3, #0]
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009dd4:	7bfb      	ldrb	r3, [r7, #15]
 8009dd6:	687a      	ldr	r2, [r7, #4]
 8009dd8:	211a      	movs	r1, #26
 8009dda:	fb01 f303 	mul.w	r3, r1, r3
 8009dde:	4413      	add	r3, r2
 8009de0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009de4:	881a      	ldrh	r2, [r3, #0]
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8009dea:	7bfb      	ldrb	r3, [r7, #15]
 8009dec:	687a      	ldr	r2, [r7, #4]
 8009dee:	211a      	movs	r1, #26
 8009df0:	fb01 f303 	mul.w	r3, r1, r3
 8009df4:	4413      	add	r3, r2
 8009df6:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009dfa:	781b      	ldrb	r3, [r3, #0]
 8009dfc:	b25b      	sxtb	r3, r3
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	da16      	bge.n	8009e30 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009e02:	7bfb      	ldrb	r3, [r7, #15]
 8009e04:	687a      	ldr	r2, [r7, #4]
 8009e06:	211a      	movs	r1, #26
 8009e08:	fb01 f303 	mul.w	r3, r1, r3
 8009e0c:	4413      	add	r3, r2
 8009e0e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009e12:	781a      	ldrb	r2, [r3, #0]
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009e18:	7bfb      	ldrb	r3, [r7, #15]
 8009e1a:	687a      	ldr	r2, [r7, #4]
 8009e1c:	211a      	movs	r1, #26
 8009e1e:	fb01 f303 	mul.w	r3, r1, r3
 8009e22:	4413      	add	r3, r2
 8009e24:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009e28:	881a      	ldrh	r2, [r3, #0]
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	835a      	strh	r2, [r3, #26]
 8009e2e:	e015      	b.n	8009e5c <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009e30:	7bfb      	ldrb	r3, [r7, #15]
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	211a      	movs	r1, #26
 8009e36:	fb01 f303 	mul.w	r3, r1, r3
 8009e3a:	4413      	add	r3, r2
 8009e3c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009e40:	781a      	ldrb	r2, [r3, #0]
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009e46:	7bfb      	ldrb	r3, [r7, #15]
 8009e48:	687a      	ldr	r2, [r7, #4]
 8009e4a:	211a      	movs	r1, #26
 8009e4c:	fb01 f303 	mul.w	r3, r1, r3
 8009e50:	4413      	add	r3, r2
 8009e52:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009e56:	881a      	ldrh	r2, [r3, #0]
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	7b9b      	ldrb	r3, [r3, #14]
 8009e60:	4619      	mov	r1, r3
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f001 fd8b 	bl	800b97e <USBH_AllocPipe>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	7bdb      	ldrb	r3, [r3, #15]
 8009e74:	4619      	mov	r1, r3
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f001 fd81 	bl	800b97e <USBH_AllocPipe>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	461a      	mov	r2, r3
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	7b59      	ldrb	r1, [r3, #13]
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	7b98      	ldrb	r0, [r3, #14]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009e98:	68ba      	ldr	r2, [r7, #8]
 8009e9a:	8b12      	ldrh	r2, [r2, #24]
 8009e9c:	9202      	str	r2, [sp, #8]
 8009e9e:	2202      	movs	r2, #2
 8009ea0:	9201      	str	r2, [sp, #4]
 8009ea2:	9300      	str	r3, [sp, #0]
 8009ea4:	4623      	mov	r3, r4
 8009ea6:	4602      	mov	r2, r0
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f001 fd39 	bl	800b920 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	7b19      	ldrb	r1, [r3, #12]
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	7bd8      	ldrb	r0, [r3, #15]
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009ec2:	68ba      	ldr	r2, [r7, #8]
 8009ec4:	8b52      	ldrh	r2, [r2, #26]
 8009ec6:	9202      	str	r2, [sp, #8]
 8009ec8:	2202      	movs	r2, #2
 8009eca:	9201      	str	r2, [sp, #4]
 8009ecc:	9300      	str	r3, [sp, #0]
 8009ece:	4623      	mov	r3, r4
 8009ed0:	4602      	mov	r2, r0
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f001 fd24 	bl	800b920 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	2200      	movs	r2, #0
 8009edc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	7b5b      	ldrb	r3, [r3, #13]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	4619      	mov	r1, r3
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f003 fb3d 	bl	800d568 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	7b1b      	ldrb	r3, [r3, #12]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f003 fb36 	bl	800d568 <USBH_LL_SetToggle>

  return USBH_OK;
 8009efc:	2300      	movs	r3, #0
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3714      	adds	r7, #20
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd90      	pop	{r4, r7, pc}

08009f06 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009f06:	b580      	push	{r7, lr}
 8009f08:	b084      	sub	sp, #16
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f14:	69db      	ldr	r3, [r3, #28]
 8009f16:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	781b      	ldrb	r3, [r3, #0]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d00e      	beq.n	8009f3e <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	781b      	ldrb	r3, [r3, #0]
 8009f24:	4619      	mov	r1, r3
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f001 fd19 	bl	800b95e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	781b      	ldrb	r3, [r3, #0]
 8009f30:	4619      	mov	r1, r3
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f001 fd44 	bl	800b9c0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	7b1b      	ldrb	r3, [r3, #12]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d00e      	beq.n	8009f64 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	7b1b      	ldrb	r3, [r3, #12]
 8009f4a:	4619      	mov	r1, r3
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f001 fd06 	bl	800b95e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	7b1b      	ldrb	r3, [r3, #12]
 8009f56:	4619      	mov	r1, r3
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f001 fd31 	bl	800b9c0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	2200      	movs	r2, #0
 8009f62:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	7b5b      	ldrb	r3, [r3, #13]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d00e      	beq.n	8009f8a <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	7b5b      	ldrb	r3, [r3, #13]
 8009f70:	4619      	mov	r1, r3
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f001 fcf3 	bl	800b95e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	7b5b      	ldrb	r3, [r3, #13]
 8009f7c:	4619      	mov	r1, r3
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f001 fd1e 	bl	800b9c0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	2200      	movs	r2, #0
 8009f88:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f90:	69db      	ldr	r3, [r3, #28]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d00b      	beq.n	8009fae <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f9c:	69db      	ldr	r3, [r3, #28]
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f003 fbc2 	bl	800d728 <free>
    phost->pActiveClass->pData = 0U;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009faa:	2200      	movs	r2, #0
 8009fac:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009fae:	2300      	movs	r3, #0
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3710      	adds	r7, #16
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b084      	sub	sp, #16
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009fc6:	69db      	ldr	r3, [r3, #28]
 8009fc8:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	3340      	adds	r3, #64	; 0x40
 8009fce:	4619      	mov	r1, r3
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f000 f8b2 	bl	800a13a <GetLineCoding>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009fda:	7afb      	ldrb	r3, [r7, #11]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d105      	bne.n	8009fec <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009fe6:	2102      	movs	r1, #2
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009fec:	7afb      	ldrb	r3, [r7, #11]
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3710      	adds	r7, #16
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}
	...

08009ff8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b084      	sub	sp, #16
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a000:	2301      	movs	r3, #1
 800a002:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800a004:	2300      	movs	r3, #0
 800a006:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a00e:	69db      	ldr	r3, [r3, #28]
 800a010:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a018:	2b04      	cmp	r3, #4
 800a01a:	d877      	bhi.n	800a10c <USBH_CDC_Process+0x114>
 800a01c:	a201      	add	r2, pc, #4	; (adr r2, 800a024 <USBH_CDC_Process+0x2c>)
 800a01e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a022:	bf00      	nop
 800a024:	0800a039 	.word	0x0800a039
 800a028:	0800a03f 	.word	0x0800a03f
 800a02c:	0800a06f 	.word	0x0800a06f
 800a030:	0800a0e3 	.word	0x0800a0e3
 800a034:	0800a0f1 	.word	0x0800a0f1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800a038:	2300      	movs	r3, #0
 800a03a:	73fb      	strb	r3, [r7, #15]
      break;
 800a03c:	e06d      	b.n	800a11a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a042:	4619      	mov	r1, r3
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f000 f897 	bl	800a178 <SetLineCoding>
 800a04a:	4603      	mov	r3, r0
 800a04c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a04e:	7bbb      	ldrb	r3, [r7, #14]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d104      	bne.n	800a05e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	2202      	movs	r2, #2
 800a058:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a05c:	e058      	b.n	800a110 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800a05e:	7bbb      	ldrb	r3, [r7, #14]
 800a060:	2b01      	cmp	r3, #1
 800a062:	d055      	beq.n	800a110 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	2204      	movs	r2, #4
 800a068:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a06c:	e050      	b.n	800a110 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	3340      	adds	r3, #64	; 0x40
 800a072:	4619      	mov	r1, r3
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f000 f860 	bl	800a13a <GetLineCoding>
 800a07a:	4603      	mov	r3, r0
 800a07c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a07e:	7bbb      	ldrb	r3, [r7, #14]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d126      	bne.n	800a0d2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	2200      	movs	r2, #0
 800a088:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a096:	791b      	ldrb	r3, [r3, #4]
 800a098:	429a      	cmp	r2, r3
 800a09a:	d13b      	bne.n	800a114 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0a6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d133      	bne.n	800a114 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0b6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	d12b      	bne.n	800a114 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0c4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d124      	bne.n	800a114 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f000 f958 	bl	800a380 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a0d0:	e020      	b.n	800a114 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800a0d2:	7bbb      	ldrb	r3, [r7, #14]
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	d01d      	beq.n	800a114 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	2204      	movs	r2, #4
 800a0dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a0e0:	e018      	b.n	800a114 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f000 f867 	bl	800a1b6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f000 f8da 	bl	800a2a2 <CDC_ProcessReception>
      break;
 800a0ee:	e014      	b.n	800a11a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800a0f0:	2100      	movs	r1, #0
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 ffe3 	bl	800b0be <USBH_ClrFeature>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a0fc:	7bbb      	ldrb	r3, [r7, #14]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d10a      	bne.n	800a118 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	2200      	movs	r2, #0
 800a106:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800a10a:	e005      	b.n	800a118 <USBH_CDC_Process+0x120>

    default:
      break;
 800a10c:	bf00      	nop
 800a10e:	e004      	b.n	800a11a <USBH_CDC_Process+0x122>
      break;
 800a110:	bf00      	nop
 800a112:	e002      	b.n	800a11a <USBH_CDC_Process+0x122>
      break;
 800a114:	bf00      	nop
 800a116:	e000      	b.n	800a11a <USBH_CDC_Process+0x122>
      break;
 800a118:	bf00      	nop

  }

  return status;
 800a11a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3710      	adds	r7, #16
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}

0800a124 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a124:	b480      	push	{r7}
 800a126:	b083      	sub	sp, #12
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a12c:	2300      	movs	r3, #0
}
 800a12e:	4618      	mov	r0, r3
 800a130:	370c      	adds	r7, #12
 800a132:	46bd      	mov	sp, r7
 800a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a138:	4770      	bx	lr

0800a13a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800a13a:	b580      	push	{r7, lr}
 800a13c:	b082      	sub	sp, #8
 800a13e:	af00      	add	r7, sp, #0
 800a140:	6078      	str	r0, [r7, #4]
 800a142:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	22a1      	movs	r2, #161	; 0xa1
 800a148:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2221      	movs	r2, #33	; 0x21
 800a14e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2200      	movs	r2, #0
 800a154:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2200      	movs	r2, #0
 800a15a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2207      	movs	r2, #7
 800a160:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	2207      	movs	r2, #7
 800a166:	4619      	mov	r1, r3
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f001 f988 	bl	800b47e <USBH_CtlReq>
 800a16e:	4603      	mov	r3, r0
}
 800a170:	4618      	mov	r0, r3
 800a172:	3708      	adds	r7, #8
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}

0800a178 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b082      	sub	sp, #8
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2221      	movs	r2, #33	; 0x21
 800a186:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2220      	movs	r2, #32
 800a18c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2200      	movs	r2, #0
 800a192:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2200      	movs	r2, #0
 800a198:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2207      	movs	r2, #7
 800a19e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	2207      	movs	r2, #7
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f001 f969 	bl	800b47e <USBH_CtlReq>
 800a1ac:	4603      	mov	r3, r0
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3708      	adds	r7, #8
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}

0800a1b6 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800a1b6:	b580      	push	{r7, lr}
 800a1b8:	b086      	sub	sp, #24
 800a1ba:	af02      	add	r7, sp, #8
 800a1bc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a1c4:	69db      	ldr	r3, [r3, #28]
 800a1c6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800a1d2:	2b01      	cmp	r3, #1
 800a1d4:	d002      	beq.n	800a1dc <CDC_ProcessTransmission+0x26>
 800a1d6:	2b02      	cmp	r3, #2
 800a1d8:	d023      	beq.n	800a222 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800a1da:	e05e      	b.n	800a29a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e0:	68fa      	ldr	r2, [r7, #12]
 800a1e2:	8b12      	ldrh	r2, [r2, #24]
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d90b      	bls.n	800a200 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	69d9      	ldr	r1, [r3, #28]
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	8b1a      	ldrh	r2, [r3, #24]
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	7b5b      	ldrb	r3, [r3, #13]
 800a1f4:	2001      	movs	r0, #1
 800a1f6:	9000      	str	r0, [sp, #0]
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f001 fb4e 	bl	800b89a <USBH_BulkSendData>
 800a1fe:	e00b      	b.n	800a218 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800a208:	b29a      	uxth	r2, r3
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	7b5b      	ldrb	r3, [r3, #13]
 800a20e:	2001      	movs	r0, #1
 800a210:	9000      	str	r0, [sp, #0]
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f001 fb41 	bl	800b89a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	2202      	movs	r2, #2
 800a21c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a220:	e03b      	b.n	800a29a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	7b5b      	ldrb	r3, [r3, #13]
 800a226:	4619      	mov	r1, r3
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f003 f973 	bl	800d514 <USBH_LL_GetURBState>
 800a22e:	4603      	mov	r3, r0
 800a230:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800a232:	7afb      	ldrb	r3, [r7, #11]
 800a234:	2b01      	cmp	r3, #1
 800a236:	d128      	bne.n	800a28a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a23c:	68fa      	ldr	r2, [r7, #12]
 800a23e:	8b12      	ldrh	r2, [r2, #24]
 800a240:	4293      	cmp	r3, r2
 800a242:	d90e      	bls.n	800a262 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a248:	68fa      	ldr	r2, [r7, #12]
 800a24a:	8b12      	ldrh	r2, [r2, #24]
 800a24c:	1a9a      	subs	r2, r3, r2
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	69db      	ldr	r3, [r3, #28]
 800a256:	68fa      	ldr	r2, [r7, #12]
 800a258:	8b12      	ldrh	r2, [r2, #24]
 800a25a:	441a      	add	r2, r3
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	61da      	str	r2, [r3, #28]
 800a260:	e002      	b.n	800a268 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	2200      	movs	r2, #0
 800a266:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d004      	beq.n	800a27a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	2201      	movs	r2, #1
 800a274:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a278:	e00e      	b.n	800a298 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2200      	movs	r2, #0
 800a27e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f000 f868 	bl	800a358 <USBH_CDC_TransmitCallback>
      break;
 800a288:	e006      	b.n	800a298 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800a28a:	7afb      	ldrb	r3, [r7, #11]
 800a28c:	2b02      	cmp	r3, #2
 800a28e:	d103      	bne.n	800a298 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	2201      	movs	r2, #1
 800a294:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a298:	bf00      	nop
  }
}
 800a29a:	bf00      	nop
 800a29c:	3710      	adds	r7, #16
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}

0800a2a2 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a2a2:	b580      	push	{r7, lr}
 800a2a4:	b086      	sub	sp, #24
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a2b0:	69db      	ldr	r3, [r3, #28]
 800a2b2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800a2be:	2b03      	cmp	r3, #3
 800a2c0:	d002      	beq.n	800a2c8 <CDC_ProcessReception+0x26>
 800a2c2:	2b04      	cmp	r3, #4
 800a2c4:	d00e      	beq.n	800a2e4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800a2c6:	e043      	b.n	800a350 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	6a19      	ldr	r1, [r3, #32]
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	8b5a      	ldrh	r2, [r3, #26]
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	7b1b      	ldrb	r3, [r3, #12]
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f001 fb05 	bl	800b8e4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	2204      	movs	r2, #4
 800a2de:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a2e2:	e035      	b.n	800a350 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a2e4:	697b      	ldr	r3, [r7, #20]
 800a2e6:	7b1b      	ldrb	r3, [r3, #12]
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f003 f912 	bl	800d514 <USBH_LL_GetURBState>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a2f4:	7cfb      	ldrb	r3, [r7, #19]
 800a2f6:	2b01      	cmp	r3, #1
 800a2f8:	d129      	bne.n	800a34e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	7b1b      	ldrb	r3, [r3, #12]
 800a2fe:	4619      	mov	r1, r3
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f003 f875 	bl	800d3f0 <USBH_LL_GetLastXferSize>
 800a306:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a30c:	68fa      	ldr	r2, [r7, #12]
 800a30e:	429a      	cmp	r2, r3
 800a310:	d016      	beq.n	800a340 <CDC_ProcessReception+0x9e>
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	8b5b      	ldrh	r3, [r3, #26]
 800a316:	461a      	mov	r2, r3
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d910      	bls.n	800a340 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	1ad2      	subs	r2, r2, r3
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	6a1a      	ldr	r2, [r3, #32]
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	441a      	add	r2, r3
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	2203      	movs	r2, #3
 800a33a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a33e:	e006      	b.n	800a34e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	2200      	movs	r2, #0
 800a344:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f000 f80f 	bl	800a36c <USBH_CDC_ReceiveCallback>
      break;
 800a34e:	bf00      	nop
  }
}
 800a350:	bf00      	nop
 800a352:	3718      	adds	r7, #24
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}

0800a358 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800a358:	b480      	push	{r7}
 800a35a:	b083      	sub	sp, #12
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a360:	bf00      	nop
 800a362:	370c      	adds	r7, #12
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr

0800a36c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b083      	sub	sp, #12
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a374:	bf00      	nop
 800a376:	370c      	adds	r7, #12
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr

0800a380 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800a380:	b480      	push	{r7}
 800a382:	b083      	sub	sp, #12
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a388:	bf00      	nop
 800a38a:	370c      	adds	r7, #12
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr

0800a394 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b084      	sub	sp, #16
 800a398:	af00      	add	r7, sp, #0
 800a39a:	60f8      	str	r0, [r7, #12]
 800a39c:	60b9      	str	r1, [r7, #8]
 800a39e:	4613      	mov	r3, r2
 800a3a0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d101      	bne.n	800a3ac <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a3a8:	2302      	movs	r3, #2
 800a3aa:	e029      	b.n	800a400 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	79fa      	ldrb	r2, [r7, #7]
 800a3b0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	2200      	movs	r2, #0
 800a3c0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800a3c4:	68f8      	ldr	r0, [r7, #12]
 800a3c6:	f000 f81f 	bl	800a408 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d003      	beq.n	800a3f8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	68ba      	ldr	r2, [r7, #8]
 800a3f4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800a3f8:	68f8      	ldr	r0, [r7, #12]
 800a3fa:	f002 ff45 	bl	800d288 <USBH_LL_Init>

  return USBH_OK;
 800a3fe:	2300      	movs	r3, #0
}
 800a400:	4618      	mov	r0, r3
 800a402:	3710      	adds	r7, #16
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}

0800a408 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a408:	b480      	push	{r7}
 800a40a:	b085      	sub	sp, #20
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a410:	2300      	movs	r3, #0
 800a412:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a414:	2300      	movs	r3, #0
 800a416:	60fb      	str	r3, [r7, #12]
 800a418:	e009      	b.n	800a42e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a41a:	687a      	ldr	r2, [r7, #4]
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	33e0      	adds	r3, #224	; 0xe0
 800a420:	009b      	lsls	r3, r3, #2
 800a422:	4413      	add	r3, r2
 800a424:	2200      	movs	r2, #0
 800a426:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	3301      	adds	r3, #1
 800a42c:	60fb      	str	r3, [r7, #12]
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	2b0e      	cmp	r3, #14
 800a432:	d9f2      	bls.n	800a41a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a434:	2300      	movs	r3, #0
 800a436:	60fb      	str	r3, [r7, #12]
 800a438:	e009      	b.n	800a44e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a43a:	687a      	ldr	r2, [r7, #4]
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	4413      	add	r3, r2
 800a440:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a444:	2200      	movs	r2, #0
 800a446:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	3301      	adds	r3, #1
 800a44c:	60fb      	str	r3, [r7, #12]
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a454:	d3f1      	bcc.n	800a43a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2200      	movs	r2, #0
 800a45a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2200      	movs	r2, #0
 800a460:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2201      	movs	r2, #1
 800a466:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2200      	movs	r2, #0
 800a46c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2201      	movs	r2, #1
 800a474:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2240      	movs	r2, #64	; 0x40
 800a47a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2200      	movs	r2, #0
 800a480:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2200      	movs	r2, #0
 800a486:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2201      	movs	r2, #1
 800a48e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2200      	movs	r2, #0
 800a496:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2200      	movs	r2, #0
 800a49e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a4a2:	2300      	movs	r3, #0
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3714      	adds	r7, #20
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ae:	4770      	bx	lr

0800a4b0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b085      	sub	sp, #20
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d016      	beq.n	800a4f2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d10e      	bne.n	800a4ec <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a4d4:	1c59      	adds	r1, r3, #1
 800a4d6:	687a      	ldr	r2, [r7, #4]
 800a4d8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a4dc:	687a      	ldr	r2, [r7, #4]
 800a4de:	33de      	adds	r3, #222	; 0xde
 800a4e0:	6839      	ldr	r1, [r7, #0]
 800a4e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	73fb      	strb	r3, [r7, #15]
 800a4ea:	e004      	b.n	800a4f6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a4ec:	2302      	movs	r3, #2
 800a4ee:	73fb      	strb	r3, [r7, #15]
 800a4f0:	e001      	b.n	800a4f6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a4f2:	2302      	movs	r3, #2
 800a4f4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a4f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3714      	adds	r7, #20
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr

0800a504 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a504:	b480      	push	{r7}
 800a506:	b085      	sub	sp, #20
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	460b      	mov	r3, r1
 800a50e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a510:	2300      	movs	r3, #0
 800a512:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a51a:	78fa      	ldrb	r2, [r7, #3]
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d204      	bcs.n	800a52a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	78fa      	ldrb	r2, [r7, #3]
 800a524:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a528:	e001      	b.n	800a52e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a52a:	2302      	movs	r3, #2
 800a52c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a52e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a530:	4618      	mov	r0, r3
 800a532:	3714      	adds	r7, #20
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr

0800a53c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a53c:	b480      	push	{r7}
 800a53e:	b087      	sub	sp, #28
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	4608      	mov	r0, r1
 800a546:	4611      	mov	r1, r2
 800a548:	461a      	mov	r2, r3
 800a54a:	4603      	mov	r3, r0
 800a54c:	70fb      	strb	r3, [r7, #3]
 800a54e:	460b      	mov	r3, r1
 800a550:	70bb      	strb	r3, [r7, #2]
 800a552:	4613      	mov	r3, r2
 800a554:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a556:	2300      	movs	r3, #0
 800a558:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800a55a:	2300      	movs	r3, #0
 800a55c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a564:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a566:	e025      	b.n	800a5b4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a568:	7dfb      	ldrb	r3, [r7, #23]
 800a56a:	221a      	movs	r2, #26
 800a56c:	fb02 f303 	mul.w	r3, r2, r3
 800a570:	3308      	adds	r3, #8
 800a572:	68fa      	ldr	r2, [r7, #12]
 800a574:	4413      	add	r3, r2
 800a576:	3302      	adds	r3, #2
 800a578:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	795b      	ldrb	r3, [r3, #5]
 800a57e:	78fa      	ldrb	r2, [r7, #3]
 800a580:	429a      	cmp	r2, r3
 800a582:	d002      	beq.n	800a58a <USBH_FindInterface+0x4e>
 800a584:	78fb      	ldrb	r3, [r7, #3]
 800a586:	2bff      	cmp	r3, #255	; 0xff
 800a588:	d111      	bne.n	800a5ae <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a58a:	693b      	ldr	r3, [r7, #16]
 800a58c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a58e:	78ba      	ldrb	r2, [r7, #2]
 800a590:	429a      	cmp	r2, r3
 800a592:	d002      	beq.n	800a59a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a594:	78bb      	ldrb	r3, [r7, #2]
 800a596:	2bff      	cmp	r3, #255	; 0xff
 800a598:	d109      	bne.n	800a5ae <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a59e:	787a      	ldrb	r2, [r7, #1]
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	d002      	beq.n	800a5aa <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a5a4:	787b      	ldrb	r3, [r7, #1]
 800a5a6:	2bff      	cmp	r3, #255	; 0xff
 800a5a8:	d101      	bne.n	800a5ae <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a5aa:	7dfb      	ldrb	r3, [r7, #23]
 800a5ac:	e006      	b.n	800a5bc <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a5ae:	7dfb      	ldrb	r3, [r7, #23]
 800a5b0:	3301      	adds	r3, #1
 800a5b2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a5b4:	7dfb      	ldrb	r3, [r7, #23]
 800a5b6:	2b01      	cmp	r3, #1
 800a5b8:	d9d6      	bls.n	800a568 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a5ba:	23ff      	movs	r3, #255	; 0xff
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	371c      	adds	r7, #28
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr

0800a5c8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b082      	sub	sp, #8
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f002 fe95 	bl	800d300 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800a5d6:	2101      	movs	r1, #1
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f002 ffae 	bl	800d53a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a5de:	2300      	movs	r3, #0
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3708      	adds	r7, #8
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}

0800a5e8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b088      	sub	sp, #32
 800a5ec:	af04      	add	r7, sp, #16
 800a5ee:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a5f0:	2302      	movs	r3, #2
 800a5f2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a5fe:	b2db      	uxtb	r3, r3
 800a600:	2b01      	cmp	r3, #1
 800a602:	d102      	bne.n	800a60a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2203      	movs	r2, #3
 800a608:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	781b      	ldrb	r3, [r3, #0]
 800a60e:	b2db      	uxtb	r3, r3
 800a610:	2b0b      	cmp	r3, #11
 800a612:	f200 81b3 	bhi.w	800a97c <USBH_Process+0x394>
 800a616:	a201      	add	r2, pc, #4	; (adr r2, 800a61c <USBH_Process+0x34>)
 800a618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a61c:	0800a64d 	.word	0x0800a64d
 800a620:	0800a67f 	.word	0x0800a67f
 800a624:	0800a6e7 	.word	0x0800a6e7
 800a628:	0800a917 	.word	0x0800a917
 800a62c:	0800a97d 	.word	0x0800a97d
 800a630:	0800a78b 	.word	0x0800a78b
 800a634:	0800a8bd 	.word	0x0800a8bd
 800a638:	0800a7c1 	.word	0x0800a7c1
 800a63c:	0800a7e1 	.word	0x0800a7e1
 800a640:	0800a801 	.word	0x0800a801
 800a644:	0800a82f 	.word	0x0800a82f
 800a648:	0800a8ff 	.word	0x0800a8ff
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a652:	b2db      	uxtb	r3, r3
 800a654:	2b00      	cmp	r3, #0
 800a656:	f000 8193 	beq.w	800a980 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2201      	movs	r2, #1
 800a65e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a660:	20c8      	movs	r0, #200	; 0xc8
 800a662:	f002 ffb1 	bl	800d5c8 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f002 fea7 	bl	800d3ba <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2200      	movs	r2, #0
 800a670:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2200      	movs	r2, #0
 800a678:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a67c:	e180      	b.n	800a980 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a684:	2b01      	cmp	r3, #1
 800a686:	d107      	bne.n	800a698 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2200      	movs	r2, #0
 800a68c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2202      	movs	r2, #2
 800a694:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a696:	e182      	b.n	800a99e <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a69e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a6a2:	d914      	bls.n	800a6ce <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	b2da      	uxtb	r2, r3
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a6ba:	2b03      	cmp	r3, #3
 800a6bc:	d903      	bls.n	800a6c6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	220d      	movs	r2, #13
 800a6c2:	701a      	strb	r2, [r3, #0]
      break;
 800a6c4:	e16b      	b.n	800a99e <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	701a      	strb	r2, [r3, #0]
      break;
 800a6cc:	e167      	b.n	800a99e <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a6d4:	f103 020a 	add.w	r2, r3, #10
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a6de:	200a      	movs	r0, #10
 800a6e0:	f002 ff72 	bl	800d5c8 <USBH_Delay>
      break;
 800a6e4:	e15b      	b.n	800a99e <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d005      	beq.n	800a6fc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a6f6:	2104      	movs	r1, #4
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a6fc:	2064      	movs	r0, #100	; 0x64
 800a6fe:	f002 ff63 	bl	800d5c8 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f002 fe32 	bl	800d36c <USBH_LL_GetSpeed>
 800a708:	4603      	mov	r3, r0
 800a70a:	461a      	mov	r2, r3
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2205      	movs	r2, #5
 800a716:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a718:	2100      	movs	r1, #0
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f001 f92f 	bl	800b97e <USBH_AllocPipe>
 800a720:	4603      	mov	r3, r0
 800a722:	461a      	mov	r2, r3
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a728:	2180      	movs	r1, #128	; 0x80
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f001 f927 	bl	800b97e <USBH_AllocPipe>
 800a730:	4603      	mov	r3, r0
 800a732:	461a      	mov	r2, r3
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	7919      	ldrb	r1, [r3, #4]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a748:	687a      	ldr	r2, [r7, #4]
 800a74a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a74c:	b292      	uxth	r2, r2
 800a74e:	9202      	str	r2, [sp, #8]
 800a750:	2200      	movs	r2, #0
 800a752:	9201      	str	r2, [sp, #4]
 800a754:	9300      	str	r3, [sp, #0]
 800a756:	4603      	mov	r3, r0
 800a758:	2280      	movs	r2, #128	; 0x80
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f001 f8e0 	bl	800b920 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	7959      	ldrb	r1, [r3, #5]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a770:	687a      	ldr	r2, [r7, #4]
 800a772:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a774:	b292      	uxth	r2, r2
 800a776:	9202      	str	r2, [sp, #8]
 800a778:	2200      	movs	r2, #0
 800a77a:	9201      	str	r2, [sp, #4]
 800a77c:	9300      	str	r3, [sp, #0]
 800a77e:	4603      	mov	r3, r0
 800a780:	2200      	movs	r2, #0
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f001 f8cc 	bl	800b920 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a788:	e109      	b.n	800a99e <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f000 f90c 	bl	800a9a8 <USBH_HandleEnum>
 800a790:	4603      	mov	r3, r0
 800a792:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a794:	7bbb      	ldrb	r3, [r7, #14]
 800a796:	b2db      	uxtb	r3, r3
 800a798:	2b00      	cmp	r3, #0
 800a79a:	f040 80f3 	bne.w	800a984 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a7ac:	2b01      	cmp	r3, #1
 800a7ae:	d103      	bne.n	800a7b8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2208      	movs	r2, #8
 800a7b4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a7b6:	e0e5      	b.n	800a984 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2207      	movs	r2, #7
 800a7bc:	701a      	strb	r2, [r3, #0]
      break;
 800a7be:	e0e1      	b.n	800a984 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	f000 80de 	beq.w	800a988 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a7d2:	2101      	movs	r1, #1
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2208      	movs	r2, #8
 800a7dc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a7de:	e0d3      	b.n	800a988 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a7e6:	b29b      	uxth	r3, r3
 800a7e8:	4619      	mov	r1, r3
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f000 fc20 	bl	800b030 <USBH_SetCfg>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	f040 80ca 	bne.w	800a98c <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2209      	movs	r2, #9
 800a7fc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a7fe:	e0c5      	b.n	800a98c <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a806:	f003 0320 	and.w	r3, r3, #32
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d00b      	beq.n	800a826 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800a80e:	2101      	movs	r1, #1
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f000 fc30 	bl	800b076 <USBH_SetFeature>
 800a816:	4603      	mov	r3, r0
 800a818:	2b00      	cmp	r3, #0
 800a81a:	f040 80b9 	bne.w	800a990 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	220a      	movs	r2, #10
 800a822:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a824:	e0b4      	b.n	800a990 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	220a      	movs	r2, #10
 800a82a:	701a      	strb	r2, [r3, #0]
      break;
 800a82c:	e0b0      	b.n	800a990 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a834:	2b00      	cmp	r3, #0
 800a836:	f000 80ad 	beq.w	800a994 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2200      	movs	r2, #0
 800a83e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a842:	2300      	movs	r3, #0
 800a844:	73fb      	strb	r3, [r7, #15]
 800a846:	e016      	b.n	800a876 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a848:	7bfa      	ldrb	r2, [r7, #15]
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	32de      	adds	r2, #222	; 0xde
 800a84e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a852:	791a      	ldrb	r2, [r3, #4]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d108      	bne.n	800a870 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a85e:	7bfa      	ldrb	r2, [r7, #15]
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	32de      	adds	r2, #222	; 0xde
 800a864:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a86e:	e005      	b.n	800a87c <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a870:	7bfb      	ldrb	r3, [r7, #15]
 800a872:	3301      	adds	r3, #1
 800a874:	73fb      	strb	r3, [r7, #15]
 800a876:	7bfb      	ldrb	r3, [r7, #15]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d0e5      	beq.n	800a848 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a882:	2b00      	cmp	r3, #0
 800a884:	d016      	beq.n	800a8b4 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a88c:	689b      	ldr	r3, [r3, #8]
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	4798      	blx	r3
 800a892:	4603      	mov	r3, r0
 800a894:	2b00      	cmp	r3, #0
 800a896:	d109      	bne.n	800a8ac <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2206      	movs	r2, #6
 800a89c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a8a4:	2103      	movs	r1, #3
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a8aa:	e073      	b.n	800a994 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	220d      	movs	r2, #13
 800a8b0:	701a      	strb	r2, [r3, #0]
      break;
 800a8b2:	e06f      	b.n	800a994 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	220d      	movs	r2, #13
 800a8b8:	701a      	strb	r2, [r3, #0]
      break;
 800a8ba:	e06b      	b.n	800a994 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d017      	beq.n	800a8f6 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a8cc:	691b      	ldr	r3, [r3, #16]
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	4798      	blx	r3
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a8d6:	7bbb      	ldrb	r3, [r7, #14]
 800a8d8:	b2db      	uxtb	r3, r3
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d103      	bne.n	800a8e6 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	220b      	movs	r2, #11
 800a8e2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a8e4:	e058      	b.n	800a998 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800a8e6:	7bbb      	ldrb	r3, [r7, #14]
 800a8e8:	b2db      	uxtb	r3, r3
 800a8ea:	2b02      	cmp	r3, #2
 800a8ec:	d154      	bne.n	800a998 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	220d      	movs	r2, #13
 800a8f2:	701a      	strb	r2, [r3, #0]
      break;
 800a8f4:	e050      	b.n	800a998 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	220d      	movs	r2, #13
 800a8fa:	701a      	strb	r2, [r3, #0]
      break;
 800a8fc:	e04c      	b.n	800a998 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a904:	2b00      	cmp	r3, #0
 800a906:	d049      	beq.n	800a99c <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a90e:	695b      	ldr	r3, [r3, #20]
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	4798      	blx	r3
      }
      break;
 800a914:	e042      	b.n	800a99c <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2200      	movs	r2, #0
 800a91a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f7ff fd72 	bl	800a408 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d009      	beq.n	800a942 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a934:	68db      	ldr	r3, [r3, #12]
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2200      	movs	r2, #0
 800a93e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d005      	beq.n	800a958 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a952:	2105      	movs	r1, #5
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a95e:	b2db      	uxtb	r3, r3
 800a960:	2b01      	cmp	r3, #1
 800a962:	d107      	bne.n	800a974 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2200      	movs	r2, #0
 800a968:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f7ff fe2b 	bl	800a5c8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a972:	e014      	b.n	800a99e <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f002 fcc3 	bl	800d300 <USBH_LL_Start>
      break;
 800a97a:	e010      	b.n	800a99e <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800a97c:	bf00      	nop
 800a97e:	e00e      	b.n	800a99e <USBH_Process+0x3b6>
      break;
 800a980:	bf00      	nop
 800a982:	e00c      	b.n	800a99e <USBH_Process+0x3b6>
      break;
 800a984:	bf00      	nop
 800a986:	e00a      	b.n	800a99e <USBH_Process+0x3b6>
    break;
 800a988:	bf00      	nop
 800a98a:	e008      	b.n	800a99e <USBH_Process+0x3b6>
      break;
 800a98c:	bf00      	nop
 800a98e:	e006      	b.n	800a99e <USBH_Process+0x3b6>
      break;
 800a990:	bf00      	nop
 800a992:	e004      	b.n	800a99e <USBH_Process+0x3b6>
      break;
 800a994:	bf00      	nop
 800a996:	e002      	b.n	800a99e <USBH_Process+0x3b6>
      break;
 800a998:	bf00      	nop
 800a99a:	e000      	b.n	800a99e <USBH_Process+0x3b6>
      break;
 800a99c:	bf00      	nop
  }
  return USBH_OK;
 800a99e:	2300      	movs	r3, #0
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3710      	adds	r7, #16
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}

0800a9a8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b088      	sub	sp, #32
 800a9ac:	af04      	add	r7, sp, #16
 800a9ae:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	785b      	ldrb	r3, [r3, #1]
 800a9bc:	2b07      	cmp	r3, #7
 800a9be:	f200 81c1 	bhi.w	800ad44 <USBH_HandleEnum+0x39c>
 800a9c2:	a201      	add	r2, pc, #4	; (adr r2, 800a9c8 <USBH_HandleEnum+0x20>)
 800a9c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9c8:	0800a9e9 	.word	0x0800a9e9
 800a9cc:	0800aaa7 	.word	0x0800aaa7
 800a9d0:	0800ab11 	.word	0x0800ab11
 800a9d4:	0800ab9f 	.word	0x0800ab9f
 800a9d8:	0800ac09 	.word	0x0800ac09
 800a9dc:	0800ac79 	.word	0x0800ac79
 800a9e0:	0800acbf 	.word	0x0800acbf
 800a9e4:	0800ad05 	.word	0x0800ad05
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a9e8:	2108      	movs	r1, #8
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f000 fa50 	bl	800ae90 <USBH_Get_DevDesc>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a9f4:	7bbb      	ldrb	r3, [r7, #14]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d130      	bne.n	800aa5c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2201      	movs	r2, #1
 800aa08:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	7919      	ldrb	r1, [r3, #4]
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800aa1a:	687a      	ldr	r2, [r7, #4]
 800aa1c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800aa1e:	b292      	uxth	r2, r2
 800aa20:	9202      	str	r2, [sp, #8]
 800aa22:	2200      	movs	r2, #0
 800aa24:	9201      	str	r2, [sp, #4]
 800aa26:	9300      	str	r3, [sp, #0]
 800aa28:	4603      	mov	r3, r0
 800aa2a:	2280      	movs	r2, #128	; 0x80
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f000 ff77 	bl	800b920 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	7959      	ldrb	r1, [r3, #5]
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800aa42:	687a      	ldr	r2, [r7, #4]
 800aa44:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aa46:	b292      	uxth	r2, r2
 800aa48:	9202      	str	r2, [sp, #8]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	9201      	str	r2, [sp, #4]
 800aa4e:	9300      	str	r3, [sp, #0]
 800aa50:	4603      	mov	r3, r0
 800aa52:	2200      	movs	r2, #0
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f000 ff63 	bl	800b920 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800aa5a:	e175      	b.n	800ad48 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aa5c:	7bbb      	ldrb	r3, [r7, #14]
 800aa5e:	2b03      	cmp	r3, #3
 800aa60:	f040 8172 	bne.w	800ad48 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aa6a:	3301      	adds	r3, #1
 800aa6c:	b2da      	uxtb	r2, r3
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aa7a:	2b03      	cmp	r3, #3
 800aa7c:	d903      	bls.n	800aa86 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	220d      	movs	r2, #13
 800aa82:	701a      	strb	r2, [r3, #0]
      break;
 800aa84:	e160      	b.n	800ad48 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	795b      	ldrb	r3, [r3, #5]
 800aa8a:	4619      	mov	r1, r3
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f000 ff97 	bl	800b9c0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	791b      	ldrb	r3, [r3, #4]
 800aa96:	4619      	mov	r1, r3
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f000 ff91 	bl	800b9c0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	701a      	strb	r2, [r3, #0]
      break;
 800aaa4:	e150      	b.n	800ad48 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800aaa6:	2112      	movs	r1, #18
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f000 f9f1 	bl	800ae90 <USBH_Get_DevDesc>
 800aaae:	4603      	mov	r3, r0
 800aab0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aab2:	7bbb      	ldrb	r3, [r7, #14]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d103      	bne.n	800aac0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2202      	movs	r2, #2
 800aabc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800aabe:	e145      	b.n	800ad4c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aac0:	7bbb      	ldrb	r3, [r7, #14]
 800aac2:	2b03      	cmp	r3, #3
 800aac4:	f040 8142 	bne.w	800ad4c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aace:	3301      	adds	r3, #1
 800aad0:	b2da      	uxtb	r2, r3
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aade:	2b03      	cmp	r3, #3
 800aae0:	d903      	bls.n	800aaea <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	220d      	movs	r2, #13
 800aae6:	701a      	strb	r2, [r3, #0]
      break;
 800aae8:	e130      	b.n	800ad4c <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	795b      	ldrb	r3, [r3, #5]
 800aaee:	4619      	mov	r1, r3
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f000 ff65 	bl	800b9c0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	791b      	ldrb	r3, [r3, #4]
 800aafa:	4619      	mov	r1, r3
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f000 ff5f 	bl	800b9c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2200      	movs	r2, #0
 800ab06:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	701a      	strb	r2, [r3, #0]
      break;
 800ab0e:	e11d      	b.n	800ad4c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800ab10:	2101      	movs	r1, #1
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f000 fa68 	bl	800afe8 <USBH_SetAddress>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ab1c:	7bbb      	ldrb	r3, [r7, #14]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d132      	bne.n	800ab88 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800ab22:	2002      	movs	r0, #2
 800ab24:	f002 fd50 	bl	800d5c8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2201      	movs	r2, #1
 800ab2c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2203      	movs	r2, #3
 800ab34:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	7919      	ldrb	r1, [r3, #4]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ab46:	687a      	ldr	r2, [r7, #4]
 800ab48:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ab4a:	b292      	uxth	r2, r2
 800ab4c:	9202      	str	r2, [sp, #8]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	9201      	str	r2, [sp, #4]
 800ab52:	9300      	str	r3, [sp, #0]
 800ab54:	4603      	mov	r3, r0
 800ab56:	2280      	movs	r2, #128	; 0x80
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f000 fee1 	bl	800b920 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	7959      	ldrb	r1, [r3, #5]
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ab6e:	687a      	ldr	r2, [r7, #4]
 800ab70:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ab72:	b292      	uxth	r2, r2
 800ab74:	9202      	str	r2, [sp, #8]
 800ab76:	2200      	movs	r2, #0
 800ab78:	9201      	str	r2, [sp, #4]
 800ab7a:	9300      	str	r3, [sp, #0]
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	2200      	movs	r2, #0
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f000 fecd 	bl	800b920 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ab86:	e0e3      	b.n	800ad50 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ab88:	7bbb      	ldrb	r3, [r7, #14]
 800ab8a:	2b03      	cmp	r3, #3
 800ab8c:	f040 80e0 	bne.w	800ad50 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	220d      	movs	r2, #13
 800ab94:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2200      	movs	r2, #0
 800ab9a:	705a      	strb	r2, [r3, #1]
      break;
 800ab9c:	e0d8      	b.n	800ad50 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800ab9e:	2109      	movs	r1, #9
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f000 f99d 	bl	800aee0 <USBH_Get_CfgDesc>
 800aba6:	4603      	mov	r3, r0
 800aba8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800abaa:	7bbb      	ldrb	r3, [r7, #14]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d103      	bne.n	800abb8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2204      	movs	r2, #4
 800abb4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800abb6:	e0cd      	b.n	800ad54 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800abb8:	7bbb      	ldrb	r3, [r7, #14]
 800abba:	2b03      	cmp	r3, #3
 800abbc:	f040 80ca 	bne.w	800ad54 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800abc6:	3301      	adds	r3, #1
 800abc8:	b2da      	uxtb	r2, r3
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800abd6:	2b03      	cmp	r3, #3
 800abd8:	d903      	bls.n	800abe2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	220d      	movs	r2, #13
 800abde:	701a      	strb	r2, [r3, #0]
      break;
 800abe0:	e0b8      	b.n	800ad54 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	795b      	ldrb	r3, [r3, #5]
 800abe6:	4619      	mov	r1, r3
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f000 fee9 	bl	800b9c0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	791b      	ldrb	r3, [r3, #4]
 800abf2:	4619      	mov	r1, r3
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f000 fee3 	bl	800b9c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2200      	movs	r2, #0
 800abfe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2200      	movs	r2, #0
 800ac04:	701a      	strb	r2, [r3, #0]
      break;
 800ac06:	e0a5      	b.n	800ad54 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800ac0e:	4619      	mov	r1, r3
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f000 f965 	bl	800aee0 <USBH_Get_CfgDesc>
 800ac16:	4603      	mov	r3, r0
 800ac18:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ac1a:	7bbb      	ldrb	r3, [r7, #14]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d103      	bne.n	800ac28 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2205      	movs	r2, #5
 800ac24:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ac26:	e097      	b.n	800ad58 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ac28:	7bbb      	ldrb	r3, [r7, #14]
 800ac2a:	2b03      	cmp	r3, #3
 800ac2c:	f040 8094 	bne.w	800ad58 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ac36:	3301      	adds	r3, #1
 800ac38:	b2da      	uxtb	r2, r3
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ac46:	2b03      	cmp	r3, #3
 800ac48:	d903      	bls.n	800ac52 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	220d      	movs	r2, #13
 800ac4e:	701a      	strb	r2, [r3, #0]
      break;
 800ac50:	e082      	b.n	800ad58 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	795b      	ldrb	r3, [r3, #5]
 800ac56:	4619      	mov	r1, r3
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f000 feb1 	bl	800b9c0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	791b      	ldrb	r3, [r3, #4]
 800ac62:	4619      	mov	r1, r3
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f000 feab 	bl	800b9c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2200      	movs	r2, #0
 800ac74:	701a      	strb	r2, [r3, #0]
      break;
 800ac76:	e06f      	b.n	800ad58 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d019      	beq.n	800acb6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ac8e:	23ff      	movs	r3, #255	; 0xff
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f000 f949 	bl	800af28 <USBH_Get_StringDesc>
 800ac96:	4603      	mov	r3, r0
 800ac98:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ac9a:	7bbb      	ldrb	r3, [r7, #14]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d103      	bne.n	800aca8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2206      	movs	r2, #6
 800aca4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800aca6:	e059      	b.n	800ad5c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aca8:	7bbb      	ldrb	r3, [r7, #14]
 800acaa:	2b03      	cmp	r3, #3
 800acac:	d156      	bne.n	800ad5c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2206      	movs	r2, #6
 800acb2:	705a      	strb	r2, [r3, #1]
      break;
 800acb4:	e052      	b.n	800ad5c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2206      	movs	r2, #6
 800acba:	705a      	strb	r2, [r3, #1]
      break;
 800acbc:	e04e      	b.n	800ad5c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d019      	beq.n	800acfc <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800acd4:	23ff      	movs	r3, #255	; 0xff
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f000 f926 	bl	800af28 <USBH_Get_StringDesc>
 800acdc:	4603      	mov	r3, r0
 800acde:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ace0:	7bbb      	ldrb	r3, [r7, #14]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d103      	bne.n	800acee <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2207      	movs	r2, #7
 800acea:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800acec:	e038      	b.n	800ad60 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800acee:	7bbb      	ldrb	r3, [r7, #14]
 800acf0:	2b03      	cmp	r3, #3
 800acf2:	d135      	bne.n	800ad60 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2207      	movs	r2, #7
 800acf8:	705a      	strb	r2, [r3, #1]
      break;
 800acfa:	e031      	b.n	800ad60 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2207      	movs	r2, #7
 800ad00:	705a      	strb	r2, [r3, #1]
      break;
 800ad02:	e02d      	b.n	800ad60 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d017      	beq.n	800ad3e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ad1a:	23ff      	movs	r3, #255	; 0xff
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f000 f903 	bl	800af28 <USBH_Get_StringDesc>
 800ad22:	4603      	mov	r3, r0
 800ad24:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ad26:	7bbb      	ldrb	r3, [r7, #14]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d102      	bne.n	800ad32 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800ad30:	e018      	b.n	800ad64 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ad32:	7bbb      	ldrb	r3, [r7, #14]
 800ad34:	2b03      	cmp	r3, #3
 800ad36:	d115      	bne.n	800ad64 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	73fb      	strb	r3, [r7, #15]
      break;
 800ad3c:	e012      	b.n	800ad64 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	73fb      	strb	r3, [r7, #15]
      break;
 800ad42:	e00f      	b.n	800ad64 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800ad44:	bf00      	nop
 800ad46:	e00e      	b.n	800ad66 <USBH_HandleEnum+0x3be>
      break;
 800ad48:	bf00      	nop
 800ad4a:	e00c      	b.n	800ad66 <USBH_HandleEnum+0x3be>
      break;
 800ad4c:	bf00      	nop
 800ad4e:	e00a      	b.n	800ad66 <USBH_HandleEnum+0x3be>
      break;
 800ad50:	bf00      	nop
 800ad52:	e008      	b.n	800ad66 <USBH_HandleEnum+0x3be>
      break;
 800ad54:	bf00      	nop
 800ad56:	e006      	b.n	800ad66 <USBH_HandleEnum+0x3be>
      break;
 800ad58:	bf00      	nop
 800ad5a:	e004      	b.n	800ad66 <USBH_HandleEnum+0x3be>
      break;
 800ad5c:	bf00      	nop
 800ad5e:	e002      	b.n	800ad66 <USBH_HandleEnum+0x3be>
      break;
 800ad60:	bf00      	nop
 800ad62:	e000      	b.n	800ad66 <USBH_HandleEnum+0x3be>
      break;
 800ad64:	bf00      	nop
  }
  return Status;
 800ad66:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3710      	adds	r7, #16
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}

0800ad70 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b083      	sub	sp, #12
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	683a      	ldr	r2, [r7, #0]
 800ad7e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800ad82:	bf00      	nop
 800ad84:	370c      	adds	r7, #12
 800ad86:	46bd      	mov	sp, r7
 800ad88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8c:	4770      	bx	lr

0800ad8e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ad8e:	b580      	push	{r7, lr}
 800ad90:	b082      	sub	sp, #8
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ad9c:	1c5a      	adds	r2, r3, #1
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	f000 f804 	bl	800adb2 <USBH_HandleSof>
}
 800adaa:	bf00      	nop
 800adac:	3708      	adds	r7, #8
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}

0800adb2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800adb2:	b580      	push	{r7, lr}
 800adb4:	b082      	sub	sp, #8
 800adb6:	af00      	add	r7, sp, #0
 800adb8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	781b      	ldrb	r3, [r3, #0]
 800adbe:	b2db      	uxtb	r3, r3
 800adc0:	2b0b      	cmp	r3, #11
 800adc2:	d10a      	bne.n	800adda <USBH_HandleSof+0x28>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d005      	beq.n	800adda <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800add4:	699b      	ldr	r3, [r3, #24]
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	4798      	blx	r3
  }
}
 800adda:	bf00      	nop
 800addc:	3708      	adds	r7, #8
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}

0800ade2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800ade2:	b480      	push	{r7}
 800ade4:	b083      	sub	sp, #12
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2201      	movs	r2, #1
 800adee:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800adf2:	bf00      	nop
}
 800adf4:	370c      	adds	r7, #12
 800adf6:	46bd      	mov	sp, r7
 800adf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfc:	4770      	bx	lr

0800adfe <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800adfe:	b480      	push	{r7}
 800ae00:	b083      	sub	sp, #12
 800ae02:	af00      	add	r7, sp, #0
 800ae04:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800ae0e:	bf00      	nop
}
 800ae10:	370c      	adds	r7, #12
 800ae12:	46bd      	mov	sp, r7
 800ae14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae18:	4770      	bx	lr

0800ae1a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800ae1a:	b480      	push	{r7}
 800ae1c:	b083      	sub	sp, #12
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2201      	movs	r2, #1
 800ae26:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2200      	movs	r2, #0
 800ae36:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800ae3a:	2300      	movs	r3, #0
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	370c      	adds	r7, #12
 800ae40:	46bd      	mov	sp, r7
 800ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae46:	4770      	bx	lr

0800ae48 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b082      	sub	sp, #8
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2201      	movs	r2, #1
 800ae54:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2200      	movs	r2, #0
 800ae64:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f002 fa64 	bl	800d336 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	791b      	ldrb	r3, [r3, #4]
 800ae72:	4619      	mov	r1, r3
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f000 fda3 	bl	800b9c0 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	795b      	ldrb	r3, [r3, #5]
 800ae7e:	4619      	mov	r1, r3
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f000 fd9d 	bl	800b9c0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800ae86:	2300      	movs	r3, #0
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3708      	adds	r7, #8
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}

0800ae90 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b086      	sub	sp, #24
 800ae94:	af02      	add	r7, sp, #8
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	460b      	mov	r3, r1
 800ae9a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800aea2:	78fb      	ldrb	r3, [r7, #3]
 800aea4:	b29b      	uxth	r3, r3
 800aea6:	9300      	str	r3, [sp, #0]
 800aea8:	4613      	mov	r3, r2
 800aeaa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aeae:	2100      	movs	r1, #0
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f000 f864 	bl	800af7e <USBH_GetDescriptor>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	73fb      	strb	r3, [r7, #15]
 800aeba:	7bfb      	ldrb	r3, [r7, #15]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d10a      	bne.n	800aed6 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f203 3026 	addw	r0, r3, #806	; 0x326
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800aecc:	78fa      	ldrb	r2, [r7, #3]
 800aece:	b292      	uxth	r2, r2
 800aed0:	4619      	mov	r1, r3
 800aed2:	f000 f918 	bl	800b106 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800aed6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	3710      	adds	r7, #16
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}

0800aee0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b086      	sub	sp, #24
 800aee4:	af02      	add	r7, sp, #8
 800aee6:	6078      	str	r0, [r7, #4]
 800aee8:	460b      	mov	r3, r1
 800aeea:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	331c      	adds	r3, #28
 800aef0:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800aef2:	887b      	ldrh	r3, [r7, #2]
 800aef4:	9300      	str	r3, [sp, #0]
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aefc:	2100      	movs	r1, #0
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f000 f83d 	bl	800af7e <USBH_GetDescriptor>
 800af04:	4603      	mov	r3, r0
 800af06:	72fb      	strb	r3, [r7, #11]
 800af08:	7afb      	ldrb	r3, [r7, #11]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d107      	bne.n	800af1e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800af14:	887a      	ldrh	r2, [r7, #2]
 800af16:	68f9      	ldr	r1, [r7, #12]
 800af18:	4618      	mov	r0, r3
 800af1a:	f000 f964 	bl	800b1e6 <USBH_ParseCfgDesc>
  }

  return status;
 800af1e:	7afb      	ldrb	r3, [r7, #11]
}
 800af20:	4618      	mov	r0, r3
 800af22:	3710      	adds	r7, #16
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}

0800af28 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b088      	sub	sp, #32
 800af2c:	af02      	add	r7, sp, #8
 800af2e:	60f8      	str	r0, [r7, #12]
 800af30:	607a      	str	r2, [r7, #4]
 800af32:	461a      	mov	r2, r3
 800af34:	460b      	mov	r3, r1
 800af36:	72fb      	strb	r3, [r7, #11]
 800af38:	4613      	mov	r3, r2
 800af3a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800af3c:	7afb      	ldrb	r3, [r7, #11]
 800af3e:	b29b      	uxth	r3, r3
 800af40:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800af44:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800af4c:	893b      	ldrh	r3, [r7, #8]
 800af4e:	9300      	str	r3, [sp, #0]
 800af50:	460b      	mov	r3, r1
 800af52:	2100      	movs	r1, #0
 800af54:	68f8      	ldr	r0, [r7, #12]
 800af56:	f000 f812 	bl	800af7e <USBH_GetDescriptor>
 800af5a:	4603      	mov	r3, r0
 800af5c:	75fb      	strb	r3, [r7, #23]
 800af5e:	7dfb      	ldrb	r3, [r7, #23]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d107      	bne.n	800af74 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800af6a:	893a      	ldrh	r2, [r7, #8]
 800af6c:	6879      	ldr	r1, [r7, #4]
 800af6e:	4618      	mov	r0, r3
 800af70:	f000 fa37 	bl	800b3e2 <USBH_ParseStringDesc>
  }

  return status;
 800af74:	7dfb      	ldrb	r3, [r7, #23]
}
 800af76:	4618      	mov	r0, r3
 800af78:	3718      	adds	r7, #24
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}

0800af7e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800af7e:	b580      	push	{r7, lr}
 800af80:	b084      	sub	sp, #16
 800af82:	af00      	add	r7, sp, #0
 800af84:	60f8      	str	r0, [r7, #12]
 800af86:	607b      	str	r3, [r7, #4]
 800af88:	460b      	mov	r3, r1
 800af8a:	72fb      	strb	r3, [r7, #11]
 800af8c:	4613      	mov	r3, r2
 800af8e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	789b      	ldrb	r3, [r3, #2]
 800af94:	2b01      	cmp	r3, #1
 800af96:	d11c      	bne.n	800afd2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800af98:	7afb      	ldrb	r3, [r7, #11]
 800af9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800af9e:	b2da      	uxtb	r2, r3
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2206      	movs	r2, #6
 800afa8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	893a      	ldrh	r2, [r7, #8]
 800afae:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800afb0:	893b      	ldrh	r3, [r7, #8]
 800afb2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800afb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800afba:	d104      	bne.n	800afc6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	f240 4209 	movw	r2, #1033	; 0x409
 800afc2:	829a      	strh	r2, [r3, #20]
 800afc4:	e002      	b.n	800afcc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	2200      	movs	r2, #0
 800afca:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	8b3a      	ldrh	r2, [r7, #24]
 800afd0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800afd2:	8b3b      	ldrh	r3, [r7, #24]
 800afd4:	461a      	mov	r2, r3
 800afd6:	6879      	ldr	r1, [r7, #4]
 800afd8:	68f8      	ldr	r0, [r7, #12]
 800afda:	f000 fa50 	bl	800b47e <USBH_CtlReq>
 800afde:	4603      	mov	r3, r0
}
 800afe0:	4618      	mov	r0, r3
 800afe2:	3710      	adds	r7, #16
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}

0800afe8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b082      	sub	sp, #8
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
 800aff0:	460b      	mov	r3, r1
 800aff2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	789b      	ldrb	r3, [r3, #2]
 800aff8:	2b01      	cmp	r3, #1
 800affa:	d10f      	bne.n	800b01c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2200      	movs	r2, #0
 800b000:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2205      	movs	r2, #5
 800b006:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b008:	78fb      	ldrb	r3, [r7, #3]
 800b00a:	b29a      	uxth	r2, r3
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2200      	movs	r2, #0
 800b014:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2200      	movs	r2, #0
 800b01a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b01c:	2200      	movs	r2, #0
 800b01e:	2100      	movs	r1, #0
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f000 fa2c 	bl	800b47e <USBH_CtlReq>
 800b026:	4603      	mov	r3, r0
}
 800b028:	4618      	mov	r0, r3
 800b02a:	3708      	adds	r7, #8
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}

0800b030 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b082      	sub	sp, #8
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
 800b038:	460b      	mov	r3, r1
 800b03a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	789b      	ldrb	r3, [r3, #2]
 800b040:	2b01      	cmp	r3, #1
 800b042:	d10e      	bne.n	800b062 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2200      	movs	r2, #0
 800b048:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2209      	movs	r2, #9
 800b04e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	887a      	ldrh	r2, [r7, #2]
 800b054:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2200      	movs	r2, #0
 800b05a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2200      	movs	r2, #0
 800b060:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b062:	2200      	movs	r2, #0
 800b064:	2100      	movs	r1, #0
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f000 fa09 	bl	800b47e <USBH_CtlReq>
 800b06c:	4603      	mov	r3, r0
}
 800b06e:	4618      	mov	r0, r3
 800b070:	3708      	adds	r7, #8
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}

0800b076 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b076:	b580      	push	{r7, lr}
 800b078:	b082      	sub	sp, #8
 800b07a:	af00      	add	r7, sp, #0
 800b07c:	6078      	str	r0, [r7, #4]
 800b07e:	460b      	mov	r3, r1
 800b080:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	789b      	ldrb	r3, [r3, #2]
 800b086:	2b01      	cmp	r3, #1
 800b088:	d10f      	bne.n	800b0aa <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2200      	movs	r2, #0
 800b08e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2203      	movs	r2, #3
 800b094:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b096:	78fb      	ldrb	r3, [r7, #3]
 800b098:	b29a      	uxth	r2, r3
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	2100      	movs	r1, #0
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f000 f9e5 	bl	800b47e <USBH_CtlReq>
 800b0b4:	4603      	mov	r3, r0
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3708      	adds	r7, #8
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}

0800b0be <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b0be:	b580      	push	{r7, lr}
 800b0c0:	b082      	sub	sp, #8
 800b0c2:	af00      	add	r7, sp, #0
 800b0c4:	6078      	str	r0, [r7, #4]
 800b0c6:	460b      	mov	r3, r1
 800b0c8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	789b      	ldrb	r3, [r3, #2]
 800b0ce:	2b01      	cmp	r3, #1
 800b0d0:	d10f      	bne.n	800b0f2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2202      	movs	r2, #2
 800b0d6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2201      	movs	r2, #1
 800b0dc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b0e4:	78fb      	ldrb	r3, [r7, #3]
 800b0e6:	b29a      	uxth	r2, r3
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	2100      	movs	r1, #0
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 f9c1 	bl	800b47e <USBH_CtlReq>
 800b0fc:	4603      	mov	r3, r0
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	3708      	adds	r7, #8
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}

0800b106 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b106:	b480      	push	{r7}
 800b108:	b085      	sub	sp, #20
 800b10a:	af00      	add	r7, sp, #0
 800b10c:	60f8      	str	r0, [r7, #12]
 800b10e:	60b9      	str	r1, [r7, #8]
 800b110:	4613      	mov	r3, r2
 800b112:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	781a      	ldrb	r2, [r3, #0]
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	785a      	ldrb	r2, [r3, #1]
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	3302      	adds	r3, #2
 800b128:	781b      	ldrb	r3, [r3, #0]
 800b12a:	b29a      	uxth	r2, r3
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	3303      	adds	r3, #3
 800b130:	781b      	ldrb	r3, [r3, #0]
 800b132:	b29b      	uxth	r3, r3
 800b134:	021b      	lsls	r3, r3, #8
 800b136:	b29b      	uxth	r3, r3
 800b138:	4313      	orrs	r3, r2
 800b13a:	b29a      	uxth	r2, r3
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	791a      	ldrb	r2, [r3, #4]
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	795a      	ldrb	r2, [r3, #5]
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	799a      	ldrb	r2, [r3, #6]
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	79da      	ldrb	r2, [r3, #7]
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800b160:	88fb      	ldrh	r3, [r7, #6]
 800b162:	2b08      	cmp	r3, #8
 800b164:	d939      	bls.n	800b1da <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	3308      	adds	r3, #8
 800b16a:	781b      	ldrb	r3, [r3, #0]
 800b16c:	b29a      	uxth	r2, r3
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	3309      	adds	r3, #9
 800b172:	781b      	ldrb	r3, [r3, #0]
 800b174:	b29b      	uxth	r3, r3
 800b176:	021b      	lsls	r3, r3, #8
 800b178:	b29b      	uxth	r3, r3
 800b17a:	4313      	orrs	r3, r2
 800b17c:	b29a      	uxth	r2, r3
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b182:	68bb      	ldr	r3, [r7, #8]
 800b184:	330a      	adds	r3, #10
 800b186:	781b      	ldrb	r3, [r3, #0]
 800b188:	b29a      	uxth	r2, r3
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	330b      	adds	r3, #11
 800b18e:	781b      	ldrb	r3, [r3, #0]
 800b190:	b29b      	uxth	r3, r3
 800b192:	021b      	lsls	r3, r3, #8
 800b194:	b29b      	uxth	r3, r3
 800b196:	4313      	orrs	r3, r2
 800b198:	b29a      	uxth	r2, r3
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	330c      	adds	r3, #12
 800b1a2:	781b      	ldrb	r3, [r3, #0]
 800b1a4:	b29a      	uxth	r2, r3
 800b1a6:	68bb      	ldr	r3, [r7, #8]
 800b1a8:	330d      	adds	r3, #13
 800b1aa:	781b      	ldrb	r3, [r3, #0]
 800b1ac:	b29b      	uxth	r3, r3
 800b1ae:	021b      	lsls	r3, r3, #8
 800b1b0:	b29b      	uxth	r3, r3
 800b1b2:	4313      	orrs	r3, r2
 800b1b4:	b29a      	uxth	r2, r3
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	7b9a      	ldrb	r2, [r3, #14]
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	7bda      	ldrb	r2, [r3, #15]
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	7c1a      	ldrb	r2, [r3, #16]
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	7c5a      	ldrb	r2, [r3, #17]
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	745a      	strb	r2, [r3, #17]
  }
}
 800b1da:	bf00      	nop
 800b1dc:	3714      	adds	r7, #20
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e4:	4770      	bx	lr

0800b1e6 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800b1e6:	b580      	push	{r7, lr}
 800b1e8:	b08a      	sub	sp, #40	; 0x28
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	60f8      	str	r0, [r7, #12]
 800b1ee:	60b9      	str	r1, [r7, #8]
 800b1f0:	4613      	mov	r3, r2
 800b1f2:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800b1fe:	2300      	movs	r3, #0
 800b200:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	781a      	ldrb	r2, [r3, #0]
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	785a      	ldrb	r2, [r3, #1]
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	3302      	adds	r3, #2
 800b21c:	781b      	ldrb	r3, [r3, #0]
 800b21e:	b29a      	uxth	r2, r3
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	3303      	adds	r3, #3
 800b224:	781b      	ldrb	r3, [r3, #0]
 800b226:	b29b      	uxth	r3, r3
 800b228:	021b      	lsls	r3, r3, #8
 800b22a:	b29b      	uxth	r3, r3
 800b22c:	4313      	orrs	r3, r2
 800b22e:	b29a      	uxth	r2, r3
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	791a      	ldrb	r2, [r3, #4]
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	795a      	ldrb	r2, [r3, #5]
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	799a      	ldrb	r2, [r3, #6]
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	79da      	ldrb	r2, [r3, #7]
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	7a1a      	ldrb	r2, [r3, #8]
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b25c:	88fb      	ldrh	r3, [r7, #6]
 800b25e:	2b09      	cmp	r3, #9
 800b260:	d95f      	bls.n	800b322 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800b262:	2309      	movs	r3, #9
 800b264:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800b266:	2300      	movs	r3, #0
 800b268:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b26a:	e051      	b.n	800b310 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b26c:	f107 0316 	add.w	r3, r7, #22
 800b270:	4619      	mov	r1, r3
 800b272:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b274:	f000 f8e8 	bl	800b448 <USBH_GetNextDesc>
 800b278:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800b27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b27c:	785b      	ldrb	r3, [r3, #1]
 800b27e:	2b04      	cmp	r3, #4
 800b280:	d146      	bne.n	800b310 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800b282:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b286:	221a      	movs	r2, #26
 800b288:	fb02 f303 	mul.w	r3, r2, r3
 800b28c:	3308      	adds	r3, #8
 800b28e:	68fa      	ldr	r2, [r7, #12]
 800b290:	4413      	add	r3, r2
 800b292:	3302      	adds	r3, #2
 800b294:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b296:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b298:	69f8      	ldr	r0, [r7, #28]
 800b29a:	f000 f846 	bl	800b32a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b2a8:	e022      	b.n	800b2f0 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b2aa:	f107 0316 	add.w	r3, r7, #22
 800b2ae:	4619      	mov	r1, r3
 800b2b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b2b2:	f000 f8c9 	bl	800b448 <USBH_GetNextDesc>
 800b2b6:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800b2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ba:	785b      	ldrb	r3, [r3, #1]
 800b2bc:	2b05      	cmp	r3, #5
 800b2be:	d117      	bne.n	800b2f0 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b2c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b2c4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b2c8:	3201      	adds	r2, #1
 800b2ca:	00d2      	lsls	r2, r2, #3
 800b2cc:	211a      	movs	r1, #26
 800b2ce:	fb01 f303 	mul.w	r3, r1, r3
 800b2d2:	4413      	add	r3, r2
 800b2d4:	3308      	adds	r3, #8
 800b2d6:	68fa      	ldr	r2, [r7, #12]
 800b2d8:	4413      	add	r3, r2
 800b2da:	3304      	adds	r3, #4
 800b2dc:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800b2de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b2e0:	69b8      	ldr	r0, [r7, #24]
 800b2e2:	f000 f851 	bl	800b388 <USBH_ParseEPDesc>
            ep_ix++;
 800b2e6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b2ea:	3301      	adds	r3, #1
 800b2ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b2f0:	69fb      	ldr	r3, [r7, #28]
 800b2f2:	791b      	ldrb	r3, [r3, #4]
 800b2f4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b2f8:	429a      	cmp	r2, r3
 800b2fa:	d204      	bcs.n	800b306 <USBH_ParseCfgDesc+0x120>
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	885a      	ldrh	r2, [r3, #2]
 800b300:	8afb      	ldrh	r3, [r7, #22]
 800b302:	429a      	cmp	r2, r3
 800b304:	d8d1      	bhi.n	800b2aa <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800b306:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b30a:	3301      	adds	r3, #1
 800b30c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b310:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b314:	2b01      	cmp	r3, #1
 800b316:	d804      	bhi.n	800b322 <USBH_ParseCfgDesc+0x13c>
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	885a      	ldrh	r2, [r3, #2]
 800b31c:	8afb      	ldrh	r3, [r7, #22]
 800b31e:	429a      	cmp	r2, r3
 800b320:	d8a4      	bhi.n	800b26c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800b322:	bf00      	nop
 800b324:	3728      	adds	r7, #40	; 0x28
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}

0800b32a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b32a:	b480      	push	{r7}
 800b32c:	b083      	sub	sp, #12
 800b32e:	af00      	add	r7, sp, #0
 800b330:	6078      	str	r0, [r7, #4]
 800b332:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	781a      	ldrb	r2, [r3, #0]
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	785a      	ldrb	r2, [r3, #1]
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	789a      	ldrb	r2, [r3, #2]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	78da      	ldrb	r2, [r3, #3]
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	791a      	ldrb	r2, [r3, #4]
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	795a      	ldrb	r2, [r3, #5]
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	799a      	ldrb	r2, [r3, #6]
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	79da      	ldrb	r2, [r3, #7]
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	7a1a      	ldrb	r2, [r3, #8]
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	721a      	strb	r2, [r3, #8]
}
 800b37c:	bf00      	nop
 800b37e:	370c      	adds	r7, #12
 800b380:	46bd      	mov	sp, r7
 800b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b386:	4770      	bx	lr

0800b388 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800b388:	b480      	push	{r7}
 800b38a:	b083      	sub	sp, #12
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
 800b390:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	781a      	ldrb	r2, [r3, #0]
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	785a      	ldrb	r2, [r3, #1]
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	789a      	ldrb	r2, [r3, #2]
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	78da      	ldrb	r2, [r3, #3]
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	3304      	adds	r3, #4
 800b3b6:	781b      	ldrb	r3, [r3, #0]
 800b3b8:	b29a      	uxth	r2, r3
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	3305      	adds	r3, #5
 800b3be:	781b      	ldrb	r3, [r3, #0]
 800b3c0:	b29b      	uxth	r3, r3
 800b3c2:	021b      	lsls	r3, r3, #8
 800b3c4:	b29b      	uxth	r3, r3
 800b3c6:	4313      	orrs	r3, r2
 800b3c8:	b29a      	uxth	r2, r3
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	799a      	ldrb	r2, [r3, #6]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	719a      	strb	r2, [r3, #6]
}
 800b3d6:	bf00      	nop
 800b3d8:	370c      	adds	r7, #12
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e0:	4770      	bx	lr

0800b3e2 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b3e2:	b480      	push	{r7}
 800b3e4:	b087      	sub	sp, #28
 800b3e6:	af00      	add	r7, sp, #0
 800b3e8:	60f8      	str	r0, [r7, #12]
 800b3ea:	60b9      	str	r1, [r7, #8]
 800b3ec:	4613      	mov	r3, r2
 800b3ee:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	3301      	adds	r3, #1
 800b3f4:	781b      	ldrb	r3, [r3, #0]
 800b3f6:	2b03      	cmp	r3, #3
 800b3f8:	d120      	bne.n	800b43c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	781b      	ldrb	r3, [r3, #0]
 800b3fe:	1e9a      	subs	r2, r3, #2
 800b400:	88fb      	ldrh	r3, [r7, #6]
 800b402:	4293      	cmp	r3, r2
 800b404:	bf28      	it	cs
 800b406:	4613      	movcs	r3, r2
 800b408:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	3302      	adds	r3, #2
 800b40e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b410:	2300      	movs	r3, #0
 800b412:	82fb      	strh	r3, [r7, #22]
 800b414:	e00b      	b.n	800b42e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b416:	8afb      	ldrh	r3, [r7, #22]
 800b418:	68fa      	ldr	r2, [r7, #12]
 800b41a:	4413      	add	r3, r2
 800b41c:	781a      	ldrb	r2, [r3, #0]
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	3301      	adds	r3, #1
 800b426:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b428:	8afb      	ldrh	r3, [r7, #22]
 800b42a:	3302      	adds	r3, #2
 800b42c:	82fb      	strh	r3, [r7, #22]
 800b42e:	8afa      	ldrh	r2, [r7, #22]
 800b430:	8abb      	ldrh	r3, [r7, #20]
 800b432:	429a      	cmp	r2, r3
 800b434:	d3ef      	bcc.n	800b416 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	2200      	movs	r2, #0
 800b43a:	701a      	strb	r2, [r3, #0]
  }
}
 800b43c:	bf00      	nop
 800b43e:	371c      	adds	r7, #28
 800b440:	46bd      	mov	sp, r7
 800b442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b446:	4770      	bx	lr

0800b448 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b448:	b480      	push	{r7}
 800b44a:	b085      	sub	sp, #20
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
 800b450:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	881a      	ldrh	r2, [r3, #0]
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	781b      	ldrb	r3, [r3, #0]
 800b45a:	b29b      	uxth	r3, r3
 800b45c:	4413      	add	r3, r2
 800b45e:	b29a      	uxth	r2, r3
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	781b      	ldrb	r3, [r3, #0]
 800b468:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	4413      	add	r3, r2
 800b46e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b470:	68fb      	ldr	r3, [r7, #12]
}
 800b472:	4618      	mov	r0, r3
 800b474:	3714      	adds	r7, #20
 800b476:	46bd      	mov	sp, r7
 800b478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47c:	4770      	bx	lr

0800b47e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b47e:	b580      	push	{r7, lr}
 800b480:	b086      	sub	sp, #24
 800b482:	af00      	add	r7, sp, #0
 800b484:	60f8      	str	r0, [r7, #12]
 800b486:	60b9      	str	r1, [r7, #8]
 800b488:	4613      	mov	r3, r2
 800b48a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b48c:	2301      	movs	r3, #1
 800b48e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	789b      	ldrb	r3, [r3, #2]
 800b494:	2b01      	cmp	r3, #1
 800b496:	d002      	beq.n	800b49e <USBH_CtlReq+0x20>
 800b498:	2b02      	cmp	r3, #2
 800b49a:	d00f      	beq.n	800b4bc <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800b49c:	e027      	b.n	800b4ee <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	68ba      	ldr	r2, [r7, #8]
 800b4a2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	88fa      	ldrh	r2, [r7, #6]
 800b4a8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	2201      	movs	r2, #1
 800b4ae:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	2202      	movs	r2, #2
 800b4b4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	75fb      	strb	r3, [r7, #23]
      break;
 800b4ba:	e018      	b.n	800b4ee <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b4bc:	68f8      	ldr	r0, [r7, #12]
 800b4be:	f000 f81b 	bl	800b4f8 <USBH_HandleControl>
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b4c6:	7dfb      	ldrb	r3, [r7, #23]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d002      	beq.n	800b4d2 <USBH_CtlReq+0x54>
 800b4cc:	7dfb      	ldrb	r3, [r7, #23]
 800b4ce:	2b03      	cmp	r3, #3
 800b4d0:	d106      	bne.n	800b4e0 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	2201      	movs	r2, #1
 800b4d6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	761a      	strb	r2, [r3, #24]
      break;
 800b4de:	e005      	b.n	800b4ec <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b4e0:	7dfb      	ldrb	r3, [r7, #23]
 800b4e2:	2b02      	cmp	r3, #2
 800b4e4:	d102      	bne.n	800b4ec <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	2201      	movs	r2, #1
 800b4ea:	709a      	strb	r2, [r3, #2]
      break;
 800b4ec:	bf00      	nop
  }
  return status;
 800b4ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3718      	adds	r7, #24
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}

0800b4f8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b086      	sub	sp, #24
 800b4fc:	af02      	add	r7, sp, #8
 800b4fe:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b500:	2301      	movs	r3, #1
 800b502:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b504:	2300      	movs	r3, #0
 800b506:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	7e1b      	ldrb	r3, [r3, #24]
 800b50c:	3b01      	subs	r3, #1
 800b50e:	2b0a      	cmp	r3, #10
 800b510:	f200 8156 	bhi.w	800b7c0 <USBH_HandleControl+0x2c8>
 800b514:	a201      	add	r2, pc, #4	; (adr r2, 800b51c <USBH_HandleControl+0x24>)
 800b516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b51a:	bf00      	nop
 800b51c:	0800b549 	.word	0x0800b549
 800b520:	0800b563 	.word	0x0800b563
 800b524:	0800b5cd 	.word	0x0800b5cd
 800b528:	0800b5f3 	.word	0x0800b5f3
 800b52c:	0800b62b 	.word	0x0800b62b
 800b530:	0800b655 	.word	0x0800b655
 800b534:	0800b6a7 	.word	0x0800b6a7
 800b538:	0800b6c9 	.word	0x0800b6c9
 800b53c:	0800b705 	.word	0x0800b705
 800b540:	0800b72b 	.word	0x0800b72b
 800b544:	0800b769 	.word	0x0800b769
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f103 0110 	add.w	r1, r3, #16
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	795b      	ldrb	r3, [r3, #5]
 800b552:	461a      	mov	r2, r3
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f000 f943 	bl	800b7e0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2202      	movs	r2, #2
 800b55e:	761a      	strb	r2, [r3, #24]
      break;
 800b560:	e139      	b.n	800b7d6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	795b      	ldrb	r3, [r3, #5]
 800b566:	4619      	mov	r1, r3
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f001 ffd3 	bl	800d514 <USBH_LL_GetURBState>
 800b56e:	4603      	mov	r3, r0
 800b570:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b572:	7bbb      	ldrb	r3, [r7, #14]
 800b574:	2b01      	cmp	r3, #1
 800b576:	d11e      	bne.n	800b5b6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	7c1b      	ldrb	r3, [r3, #16]
 800b57c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b580:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	8adb      	ldrh	r3, [r3, #22]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d00a      	beq.n	800b5a0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b58a:	7b7b      	ldrb	r3, [r7, #13]
 800b58c:	2b80      	cmp	r3, #128	; 0x80
 800b58e:	d103      	bne.n	800b598 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2203      	movs	r2, #3
 800b594:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b596:	e115      	b.n	800b7c4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2205      	movs	r2, #5
 800b59c:	761a      	strb	r2, [r3, #24]
      break;
 800b59e:	e111      	b.n	800b7c4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800b5a0:	7b7b      	ldrb	r3, [r7, #13]
 800b5a2:	2b80      	cmp	r3, #128	; 0x80
 800b5a4:	d103      	bne.n	800b5ae <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2209      	movs	r2, #9
 800b5aa:	761a      	strb	r2, [r3, #24]
      break;
 800b5ac:	e10a      	b.n	800b7c4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2207      	movs	r2, #7
 800b5b2:	761a      	strb	r2, [r3, #24]
      break;
 800b5b4:	e106      	b.n	800b7c4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b5b6:	7bbb      	ldrb	r3, [r7, #14]
 800b5b8:	2b04      	cmp	r3, #4
 800b5ba:	d003      	beq.n	800b5c4 <USBH_HandleControl+0xcc>
 800b5bc:	7bbb      	ldrb	r3, [r7, #14]
 800b5be:	2b02      	cmp	r3, #2
 800b5c0:	f040 8100 	bne.w	800b7c4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	220b      	movs	r2, #11
 800b5c8:	761a      	strb	r2, [r3, #24]
      break;
 800b5ca:	e0fb      	b.n	800b7c4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b5d2:	b29a      	uxth	r2, r3
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6899      	ldr	r1, [r3, #8]
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	899a      	ldrh	r2, [r3, #12]
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	791b      	ldrb	r3, [r3, #4]
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f000 f93a 	bl	800b85e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2204      	movs	r2, #4
 800b5ee:	761a      	strb	r2, [r3, #24]
      break;
 800b5f0:	e0f1      	b.n	800b7d6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	791b      	ldrb	r3, [r3, #4]
 800b5f6:	4619      	mov	r1, r3
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f001 ff8b 	bl	800d514 <USBH_LL_GetURBState>
 800b5fe:	4603      	mov	r3, r0
 800b600:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b602:	7bbb      	ldrb	r3, [r7, #14]
 800b604:	2b01      	cmp	r3, #1
 800b606:	d102      	bne.n	800b60e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2209      	movs	r2, #9
 800b60c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b60e:	7bbb      	ldrb	r3, [r7, #14]
 800b610:	2b05      	cmp	r3, #5
 800b612:	d102      	bne.n	800b61a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b614:	2303      	movs	r3, #3
 800b616:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b618:	e0d6      	b.n	800b7c8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800b61a:	7bbb      	ldrb	r3, [r7, #14]
 800b61c:	2b04      	cmp	r3, #4
 800b61e:	f040 80d3 	bne.w	800b7c8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	220b      	movs	r2, #11
 800b626:	761a      	strb	r2, [r3, #24]
      break;
 800b628:	e0ce      	b.n	800b7c8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6899      	ldr	r1, [r3, #8]
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	899a      	ldrh	r2, [r3, #12]
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	795b      	ldrb	r3, [r3, #5]
 800b636:	2001      	movs	r0, #1
 800b638:	9000      	str	r0, [sp, #0]
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f000 f8ea 	bl	800b814 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b646:	b29a      	uxth	r2, r3
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2206      	movs	r2, #6
 800b650:	761a      	strb	r2, [r3, #24]
      break;
 800b652:	e0c0      	b.n	800b7d6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	795b      	ldrb	r3, [r3, #5]
 800b658:	4619      	mov	r1, r3
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f001 ff5a 	bl	800d514 <USBH_LL_GetURBState>
 800b660:	4603      	mov	r3, r0
 800b662:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b664:	7bbb      	ldrb	r3, [r7, #14]
 800b666:	2b01      	cmp	r3, #1
 800b668:	d103      	bne.n	800b672 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2207      	movs	r2, #7
 800b66e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b670:	e0ac      	b.n	800b7cc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800b672:	7bbb      	ldrb	r3, [r7, #14]
 800b674:	2b05      	cmp	r3, #5
 800b676:	d105      	bne.n	800b684 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	220c      	movs	r2, #12
 800b67c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b67e:	2303      	movs	r3, #3
 800b680:	73fb      	strb	r3, [r7, #15]
      break;
 800b682:	e0a3      	b.n	800b7cc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b684:	7bbb      	ldrb	r3, [r7, #14]
 800b686:	2b02      	cmp	r3, #2
 800b688:	d103      	bne.n	800b692 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2205      	movs	r2, #5
 800b68e:	761a      	strb	r2, [r3, #24]
      break;
 800b690:	e09c      	b.n	800b7cc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800b692:	7bbb      	ldrb	r3, [r7, #14]
 800b694:	2b04      	cmp	r3, #4
 800b696:	f040 8099 	bne.w	800b7cc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	220b      	movs	r2, #11
 800b69e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b6a0:	2302      	movs	r3, #2
 800b6a2:	73fb      	strb	r3, [r7, #15]
      break;
 800b6a4:	e092      	b.n	800b7cc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	791b      	ldrb	r3, [r3, #4]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	2100      	movs	r1, #0
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f000 f8d5 	bl	800b85e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b6ba:	b29a      	uxth	r2, r3
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2208      	movs	r2, #8
 800b6c4:	761a      	strb	r2, [r3, #24]

      break;
 800b6c6:	e086      	b.n	800b7d6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	791b      	ldrb	r3, [r3, #4]
 800b6cc:	4619      	mov	r1, r3
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f001 ff20 	bl	800d514 <USBH_LL_GetURBState>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b6d8:	7bbb      	ldrb	r3, [r7, #14]
 800b6da:	2b01      	cmp	r3, #1
 800b6dc:	d105      	bne.n	800b6ea <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	220d      	movs	r2, #13
 800b6e2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b6e8:	e072      	b.n	800b7d0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800b6ea:	7bbb      	ldrb	r3, [r7, #14]
 800b6ec:	2b04      	cmp	r3, #4
 800b6ee:	d103      	bne.n	800b6f8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	220b      	movs	r2, #11
 800b6f4:	761a      	strb	r2, [r3, #24]
      break;
 800b6f6:	e06b      	b.n	800b7d0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800b6f8:	7bbb      	ldrb	r3, [r7, #14]
 800b6fa:	2b05      	cmp	r3, #5
 800b6fc:	d168      	bne.n	800b7d0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800b6fe:	2303      	movs	r3, #3
 800b700:	73fb      	strb	r3, [r7, #15]
      break;
 800b702:	e065      	b.n	800b7d0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	795b      	ldrb	r3, [r3, #5]
 800b708:	2201      	movs	r2, #1
 800b70a:	9200      	str	r2, [sp, #0]
 800b70c:	2200      	movs	r2, #0
 800b70e:	2100      	movs	r1, #0
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f000 f87f 	bl	800b814 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b71c:	b29a      	uxth	r2, r3
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	220a      	movs	r2, #10
 800b726:	761a      	strb	r2, [r3, #24]
      break;
 800b728:	e055      	b.n	800b7d6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	795b      	ldrb	r3, [r3, #5]
 800b72e:	4619      	mov	r1, r3
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f001 feef 	bl	800d514 <USBH_LL_GetURBState>
 800b736:	4603      	mov	r3, r0
 800b738:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b73a:	7bbb      	ldrb	r3, [r7, #14]
 800b73c:	2b01      	cmp	r3, #1
 800b73e:	d105      	bne.n	800b74c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800b740:	2300      	movs	r3, #0
 800b742:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	220d      	movs	r2, #13
 800b748:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b74a:	e043      	b.n	800b7d4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b74c:	7bbb      	ldrb	r3, [r7, #14]
 800b74e:	2b02      	cmp	r3, #2
 800b750:	d103      	bne.n	800b75a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2209      	movs	r2, #9
 800b756:	761a      	strb	r2, [r3, #24]
      break;
 800b758:	e03c      	b.n	800b7d4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800b75a:	7bbb      	ldrb	r3, [r7, #14]
 800b75c:	2b04      	cmp	r3, #4
 800b75e:	d139      	bne.n	800b7d4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	220b      	movs	r2, #11
 800b764:	761a      	strb	r2, [r3, #24]
      break;
 800b766:	e035      	b.n	800b7d4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	7e5b      	ldrb	r3, [r3, #25]
 800b76c:	3301      	adds	r3, #1
 800b76e:	b2da      	uxtb	r2, r3
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	765a      	strb	r2, [r3, #25]
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	7e5b      	ldrb	r3, [r3, #25]
 800b778:	2b02      	cmp	r3, #2
 800b77a:	d806      	bhi.n	800b78a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2201      	movs	r2, #1
 800b780:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2201      	movs	r2, #1
 800b786:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b788:	e025      	b.n	800b7d6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b790:	2106      	movs	r1, #6
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2200      	movs	r2, #0
 800b79a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	795b      	ldrb	r3, [r3, #5]
 800b7a0:	4619      	mov	r1, r3
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f000 f90c 	bl	800b9c0 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	791b      	ldrb	r3, [r3, #4]
 800b7ac:	4619      	mov	r1, r3
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f000 f906 	bl	800b9c0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b7ba:	2302      	movs	r3, #2
 800b7bc:	73fb      	strb	r3, [r7, #15]
      break;
 800b7be:	e00a      	b.n	800b7d6 <USBH_HandleControl+0x2de>

    default:
      break;
 800b7c0:	bf00      	nop
 800b7c2:	e008      	b.n	800b7d6 <USBH_HandleControl+0x2de>
      break;
 800b7c4:	bf00      	nop
 800b7c6:	e006      	b.n	800b7d6 <USBH_HandleControl+0x2de>
      break;
 800b7c8:	bf00      	nop
 800b7ca:	e004      	b.n	800b7d6 <USBH_HandleControl+0x2de>
      break;
 800b7cc:	bf00      	nop
 800b7ce:	e002      	b.n	800b7d6 <USBH_HandleControl+0x2de>
      break;
 800b7d0:	bf00      	nop
 800b7d2:	e000      	b.n	800b7d6 <USBH_HandleControl+0x2de>
      break;
 800b7d4:	bf00      	nop
  }

  return status;
 800b7d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	3710      	adds	r7, #16
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}

0800b7e0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b088      	sub	sp, #32
 800b7e4:	af04      	add	r7, sp, #16
 800b7e6:	60f8      	str	r0, [r7, #12]
 800b7e8:	60b9      	str	r1, [r7, #8]
 800b7ea:	4613      	mov	r3, r2
 800b7ec:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b7ee:	79f9      	ldrb	r1, [r7, #7]
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	9303      	str	r3, [sp, #12]
 800b7f4:	2308      	movs	r3, #8
 800b7f6:	9302      	str	r3, [sp, #8]
 800b7f8:	68bb      	ldr	r3, [r7, #8]
 800b7fa:	9301      	str	r3, [sp, #4]
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	9300      	str	r3, [sp, #0]
 800b800:	2300      	movs	r3, #0
 800b802:	2200      	movs	r2, #0
 800b804:	68f8      	ldr	r0, [r7, #12]
 800b806:	f001 fe54 	bl	800d4b2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800b80a:	2300      	movs	r3, #0
}
 800b80c:	4618      	mov	r0, r3
 800b80e:	3710      	adds	r7, #16
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}

0800b814 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b088      	sub	sp, #32
 800b818:	af04      	add	r7, sp, #16
 800b81a:	60f8      	str	r0, [r7, #12]
 800b81c:	60b9      	str	r1, [r7, #8]
 800b81e:	4611      	mov	r1, r2
 800b820:	461a      	mov	r2, r3
 800b822:	460b      	mov	r3, r1
 800b824:	80fb      	strh	r3, [r7, #6]
 800b826:	4613      	mov	r3, r2
 800b828:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b830:	2b00      	cmp	r3, #0
 800b832:	d001      	beq.n	800b838 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b834:	2300      	movs	r3, #0
 800b836:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b838:	7979      	ldrb	r1, [r7, #5]
 800b83a:	7e3b      	ldrb	r3, [r7, #24]
 800b83c:	9303      	str	r3, [sp, #12]
 800b83e:	88fb      	ldrh	r3, [r7, #6]
 800b840:	9302      	str	r3, [sp, #8]
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	9301      	str	r3, [sp, #4]
 800b846:	2301      	movs	r3, #1
 800b848:	9300      	str	r3, [sp, #0]
 800b84a:	2300      	movs	r3, #0
 800b84c:	2200      	movs	r2, #0
 800b84e:	68f8      	ldr	r0, [r7, #12]
 800b850:	f001 fe2f 	bl	800d4b2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b854:	2300      	movs	r3, #0
}
 800b856:	4618      	mov	r0, r3
 800b858:	3710      	adds	r7, #16
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}

0800b85e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b85e:	b580      	push	{r7, lr}
 800b860:	b088      	sub	sp, #32
 800b862:	af04      	add	r7, sp, #16
 800b864:	60f8      	str	r0, [r7, #12]
 800b866:	60b9      	str	r1, [r7, #8]
 800b868:	4611      	mov	r1, r2
 800b86a:	461a      	mov	r2, r3
 800b86c:	460b      	mov	r3, r1
 800b86e:	80fb      	strh	r3, [r7, #6]
 800b870:	4613      	mov	r3, r2
 800b872:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b874:	7979      	ldrb	r1, [r7, #5]
 800b876:	2300      	movs	r3, #0
 800b878:	9303      	str	r3, [sp, #12]
 800b87a:	88fb      	ldrh	r3, [r7, #6]
 800b87c:	9302      	str	r3, [sp, #8]
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	9301      	str	r3, [sp, #4]
 800b882:	2301      	movs	r3, #1
 800b884:	9300      	str	r3, [sp, #0]
 800b886:	2300      	movs	r3, #0
 800b888:	2201      	movs	r2, #1
 800b88a:	68f8      	ldr	r0, [r7, #12]
 800b88c:	f001 fe11 	bl	800d4b2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b890:	2300      	movs	r3, #0

}
 800b892:	4618      	mov	r0, r3
 800b894:	3710      	adds	r7, #16
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}

0800b89a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b89a:	b580      	push	{r7, lr}
 800b89c:	b088      	sub	sp, #32
 800b89e:	af04      	add	r7, sp, #16
 800b8a0:	60f8      	str	r0, [r7, #12]
 800b8a2:	60b9      	str	r1, [r7, #8]
 800b8a4:	4611      	mov	r1, r2
 800b8a6:	461a      	mov	r2, r3
 800b8a8:	460b      	mov	r3, r1
 800b8aa:	80fb      	strh	r3, [r7, #6]
 800b8ac:	4613      	mov	r3, r2
 800b8ae:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d001      	beq.n	800b8be <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b8be:	7979      	ldrb	r1, [r7, #5]
 800b8c0:	7e3b      	ldrb	r3, [r7, #24]
 800b8c2:	9303      	str	r3, [sp, #12]
 800b8c4:	88fb      	ldrh	r3, [r7, #6]
 800b8c6:	9302      	str	r3, [sp, #8]
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	9301      	str	r3, [sp, #4]
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	9300      	str	r3, [sp, #0]
 800b8d0:	2302      	movs	r3, #2
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	68f8      	ldr	r0, [r7, #12]
 800b8d6:	f001 fdec 	bl	800d4b2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b8da:	2300      	movs	r3, #0
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	3710      	adds	r7, #16
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}

0800b8e4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b088      	sub	sp, #32
 800b8e8:	af04      	add	r7, sp, #16
 800b8ea:	60f8      	str	r0, [r7, #12]
 800b8ec:	60b9      	str	r1, [r7, #8]
 800b8ee:	4611      	mov	r1, r2
 800b8f0:	461a      	mov	r2, r3
 800b8f2:	460b      	mov	r3, r1
 800b8f4:	80fb      	strh	r3, [r7, #6]
 800b8f6:	4613      	mov	r3, r2
 800b8f8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b8fa:	7979      	ldrb	r1, [r7, #5]
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	9303      	str	r3, [sp, #12]
 800b900:	88fb      	ldrh	r3, [r7, #6]
 800b902:	9302      	str	r3, [sp, #8]
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	9301      	str	r3, [sp, #4]
 800b908:	2301      	movs	r3, #1
 800b90a:	9300      	str	r3, [sp, #0]
 800b90c:	2302      	movs	r3, #2
 800b90e:	2201      	movs	r2, #1
 800b910:	68f8      	ldr	r0, [r7, #12]
 800b912:	f001 fdce 	bl	800d4b2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b916:	2300      	movs	r3, #0
}
 800b918:	4618      	mov	r0, r3
 800b91a:	3710      	adds	r7, #16
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}

0800b920 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b086      	sub	sp, #24
 800b924:	af04      	add	r7, sp, #16
 800b926:	6078      	str	r0, [r7, #4]
 800b928:	4608      	mov	r0, r1
 800b92a:	4611      	mov	r1, r2
 800b92c:	461a      	mov	r2, r3
 800b92e:	4603      	mov	r3, r0
 800b930:	70fb      	strb	r3, [r7, #3]
 800b932:	460b      	mov	r3, r1
 800b934:	70bb      	strb	r3, [r7, #2]
 800b936:	4613      	mov	r3, r2
 800b938:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b93a:	7878      	ldrb	r0, [r7, #1]
 800b93c:	78ba      	ldrb	r2, [r7, #2]
 800b93e:	78f9      	ldrb	r1, [r7, #3]
 800b940:	8b3b      	ldrh	r3, [r7, #24]
 800b942:	9302      	str	r3, [sp, #8]
 800b944:	7d3b      	ldrb	r3, [r7, #20]
 800b946:	9301      	str	r3, [sp, #4]
 800b948:	7c3b      	ldrb	r3, [r7, #16]
 800b94a:	9300      	str	r3, [sp, #0]
 800b94c:	4603      	mov	r3, r0
 800b94e:	6878      	ldr	r0, [r7, #4]
 800b950:	f001 fd61 	bl	800d416 <USBH_LL_OpenPipe>

  return USBH_OK;
 800b954:	2300      	movs	r3, #0
}
 800b956:	4618      	mov	r0, r3
 800b958:	3708      	adds	r7, #8
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bd80      	pop	{r7, pc}

0800b95e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b95e:	b580      	push	{r7, lr}
 800b960:	b082      	sub	sp, #8
 800b962:	af00      	add	r7, sp, #0
 800b964:	6078      	str	r0, [r7, #4]
 800b966:	460b      	mov	r3, r1
 800b968:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800b96a:	78fb      	ldrb	r3, [r7, #3]
 800b96c:	4619      	mov	r1, r3
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f001 fd80 	bl	800d474 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b974:	2300      	movs	r3, #0
}
 800b976:	4618      	mov	r0, r3
 800b978:	3708      	adds	r7, #8
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}

0800b97e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b97e:	b580      	push	{r7, lr}
 800b980:	b084      	sub	sp, #16
 800b982:	af00      	add	r7, sp, #0
 800b984:	6078      	str	r0, [r7, #4]
 800b986:	460b      	mov	r3, r1
 800b988:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f000 f836 	bl	800b9fc <USBH_GetFreePipe>
 800b990:	4603      	mov	r3, r0
 800b992:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b994:	89fb      	ldrh	r3, [r7, #14]
 800b996:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b99a:	4293      	cmp	r3, r2
 800b99c:	d00a      	beq.n	800b9b4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800b99e:	78fa      	ldrb	r2, [r7, #3]
 800b9a0:	89fb      	ldrh	r3, [r7, #14]
 800b9a2:	f003 030f 	and.w	r3, r3, #15
 800b9a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b9aa:	6879      	ldr	r1, [r7, #4]
 800b9ac:	33e0      	adds	r3, #224	; 0xe0
 800b9ae:	009b      	lsls	r3, r3, #2
 800b9b0:	440b      	add	r3, r1
 800b9b2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b9b4:	89fb      	ldrh	r3, [r7, #14]
 800b9b6:	b2db      	uxtb	r3, r3
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	3710      	adds	r7, #16
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}

0800b9c0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b083      	sub	sp, #12
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	460b      	mov	r3, r1
 800b9ca:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800b9cc:	78fb      	ldrb	r3, [r7, #3]
 800b9ce:	2b0a      	cmp	r3, #10
 800b9d0:	d80d      	bhi.n	800b9ee <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b9d2:	78fb      	ldrb	r3, [r7, #3]
 800b9d4:	687a      	ldr	r2, [r7, #4]
 800b9d6:	33e0      	adds	r3, #224	; 0xe0
 800b9d8:	009b      	lsls	r3, r3, #2
 800b9da:	4413      	add	r3, r2
 800b9dc:	685a      	ldr	r2, [r3, #4]
 800b9de:	78fb      	ldrb	r3, [r7, #3]
 800b9e0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b9e4:	6879      	ldr	r1, [r7, #4]
 800b9e6:	33e0      	adds	r3, #224	; 0xe0
 800b9e8:	009b      	lsls	r3, r3, #2
 800b9ea:	440b      	add	r3, r1
 800b9ec:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b9ee:	2300      	movs	r3, #0
}
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	370c      	adds	r7, #12
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fa:	4770      	bx	lr

0800b9fc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b085      	sub	sp, #20
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800ba04:	2300      	movs	r3, #0
 800ba06:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800ba08:	2300      	movs	r3, #0
 800ba0a:	73fb      	strb	r3, [r7, #15]
 800ba0c:	e00f      	b.n	800ba2e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ba0e:	7bfb      	ldrb	r3, [r7, #15]
 800ba10:	687a      	ldr	r2, [r7, #4]
 800ba12:	33e0      	adds	r3, #224	; 0xe0
 800ba14:	009b      	lsls	r3, r3, #2
 800ba16:	4413      	add	r3, r2
 800ba18:	685b      	ldr	r3, [r3, #4]
 800ba1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d102      	bne.n	800ba28 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ba22:	7bfb      	ldrb	r3, [r7, #15]
 800ba24:	b29b      	uxth	r3, r3
 800ba26:	e007      	b.n	800ba38 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800ba28:	7bfb      	ldrb	r3, [r7, #15]
 800ba2a:	3301      	adds	r3, #1
 800ba2c:	73fb      	strb	r3, [r7, #15]
 800ba2e:	7bfb      	ldrb	r3, [r7, #15]
 800ba30:	2b0a      	cmp	r3, #10
 800ba32:	d9ec      	bls.n	800ba0e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ba34:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3714      	adds	r7, #20
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba42:	4770      	bx	lr

0800ba44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800ba48:	f7f4 fd40 	bl	80004cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800ba4c:	f000 f823 	bl	800ba96 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800ba50:	f000 f870 	bl	800bb34 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800ba54:	f000 fc52 	bl	800c2fc <MX_GPIO_Init>
  MX_ADC1_Init();
 800ba58:	f000 f89a 	bl	800bb90 <MX_ADC1_Init>
  MX_CAN1_Init();
 800ba5c:	f000 f90e 	bl	800bc7c <MX_CAN1_Init>
  MX_COMP2_Init();
 800ba60:	f000 f942 	bl	800bce8 <MX_COMP2_Init>
  MX_DAC1_Init();
 800ba64:	f000 f96e 	bl	800bd44 <MX_DAC1_Init>
  MX_FMC_Init();
 800ba68:	f000 fba0 	bl	800c1ac <MX_FMC_Init>
  MX_I2C1_Init();
 800ba6c:	f000 f99c 	bl	800bda8 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 800ba70:	f000 f9da 	bl	800be28 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 800ba74:	f000 fa06 	bl	800be84 <MX_USART1_UART_Init>
  MX_USART3_SMARTCARD_Init();
 800ba78:	f000 fa34 	bl	800bee4 <MX_USART3_SMARTCARD_Init>
  MX_OPAMP1_Init();
 800ba7c:	f000 fa7c 	bl	800bf78 <MX_OPAMP1_Init>
  MX_SAI1_Init();
 800ba80:	f000 faa0 	bl	800bfc4 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 800ba84:	f000 fb24 	bl	800c0d0 <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 800ba88:	f000 fb52 	bl	800c130 <MX_SPI2_Init>
  MX_USB_HOST_Init();
 800ba8c:	f001 fab6 	bl	800cffc <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800ba90:	f001 fada 	bl	800d048 <MX_USB_HOST_Process>
 800ba94:	e7fc      	b.n	800ba90 <main+0x4c>

0800ba96 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800ba96:	b580      	push	{r7, lr}
 800ba98:	b096      	sub	sp, #88	; 0x58
 800ba9a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ba9c:	f107 0314 	add.w	r3, r7, #20
 800baa0:	2244      	movs	r2, #68	; 0x44
 800baa2:	2100      	movs	r1, #0
 800baa4:	4618      	mov	r0, r3
 800baa6:	f001 fe47 	bl	800d738 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800baaa:	463b      	mov	r3, r7
 800baac:	2200      	movs	r2, #0
 800baae:	601a      	str	r2, [r3, #0]
 800bab0:	605a      	str	r2, [r3, #4]
 800bab2:	609a      	str	r2, [r3, #8]
 800bab4:	60da      	str	r2, [r3, #12]
 800bab6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800bab8:	f44f 7000 	mov.w	r0, #512	; 0x200
 800babc:	f7f8 fa80 	bl	8003fc0 <HAL_PWREx_ControlVoltageScaling>
 800bac0:	4603      	mov	r3, r0
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d001      	beq.n	800baca <SystemClock_Config+0x34>
  {
    Error_Handler();
 800bac6:	f000 fd39 	bl	800c53c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800baca:	2301      	movs	r3, #1
 800bacc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800bace:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800bad2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800bad4:	2302      	movs	r3, #2
 800bad6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800bad8:	2303      	movs	r3, #3
 800bada:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800badc:	2301      	movs	r3, #1
 800bade:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 24;
 800bae0:	2318      	movs	r3, #24
 800bae2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800bae4:	2307      	movs	r3, #7
 800bae6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 800bae8:	2304      	movs	r3, #4
 800baea:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 800baec:	2304      	movs	r3, #4
 800baee:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800baf0:	f107 0314 	add.w	r3, r7, #20
 800baf4:	4618      	mov	r0, r3
 800baf6:	f7f8 fad9 	bl	80040ac <HAL_RCC_OscConfig>
 800bafa:	4603      	mov	r3, r0
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d001      	beq.n	800bb04 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800bb00:	f000 fd1c 	bl	800c53c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800bb04:	230f      	movs	r3, #15
 800bb06:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800bb08:	2303      	movs	r3, #3
 800bb0a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800bb10:	2300      	movs	r3, #0
 800bb12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800bb14:	2300      	movs	r3, #0
 800bb16:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800bb18:	463b      	mov	r3, r7
 800bb1a:	2102      	movs	r1, #2
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	f7f8 fea1 	bl	8004864 <HAL_RCC_ClockConfig>
 800bb22:	4603      	mov	r3, r0
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d001      	beq.n	800bb2c <SystemClock_Config+0x96>
  {
    Error_Handler();
 800bb28:	f000 fd08 	bl	800c53c <Error_Handler>
  }
}
 800bb2c:	bf00      	nop
 800bb2e:	3758      	adds	r7, #88	; 0x58
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}

0800bb34 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b0a2      	sub	sp, #136	; 0x88
 800bb38:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800bb3a:	463b      	mov	r3, r7
 800bb3c:	2288      	movs	r2, #136	; 0x88
 800bb3e:	2100      	movs	r1, #0
 800bb40:	4618      	mov	r0, r3
 800bb42:	f001 fdf9 	bl	800d738 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_ADC;
 800bb46:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800bb4a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800bb50:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bb54:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800bb56:	2303      	movs	r3, #3
 800bb58:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 800bb5e:	230c      	movs	r3, #12
 800bb60:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800bb62:	2307      	movs	r3, #7
 800bb64:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800bb66:	2302      	movs	r3, #2
 800bb68:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800bb6a:	2302      	movs	r3, #2
 800bb6c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_ADC1CLK;
 800bb6e:	4b07      	ldr	r3, [pc, #28]	; (800bb8c <PeriphCommonClock_Config+0x58>)
 800bb70:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800bb72:	463b      	mov	r3, r7
 800bb74:	4618      	mov	r0, r3
 800bb76:	f7f9 f899 	bl	8004cac <HAL_RCCEx_PeriphCLKConfig>
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d001      	beq.n	800bb84 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 800bb80:	f000 fcdc 	bl	800c53c <Error_Handler>
  }
}
 800bb84:	bf00      	nop
 800bb86:	3788      	adds	r7, #136	; 0x88
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}
 800bb8c:	01010000 	.word	0x01010000

0800bb90 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b08a      	sub	sp, #40	; 0x28
 800bb94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800bb96:	f107 031c 	add.w	r3, r7, #28
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	601a      	str	r2, [r3, #0]
 800bb9e:	605a      	str	r2, [r3, #4]
 800bba0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800bba2:	1d3b      	adds	r3, r7, #4
 800bba4:	2200      	movs	r2, #0
 800bba6:	601a      	str	r2, [r3, #0]
 800bba8:	605a      	str	r2, [r3, #4]
 800bbaa:	609a      	str	r2, [r3, #8]
 800bbac:	60da      	str	r2, [r3, #12]
 800bbae:	611a      	str	r2, [r3, #16]
 800bbb0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800bbb2:	4b2f      	ldr	r3, [pc, #188]	; (800bc70 <MX_ADC1_Init+0xe0>)
 800bbb4:	4a2f      	ldr	r2, [pc, #188]	; (800bc74 <MX_ADC1_Init+0xe4>)
 800bbb6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800bbb8:	4b2d      	ldr	r3, [pc, #180]	; (800bc70 <MX_ADC1_Init+0xe0>)
 800bbba:	2200      	movs	r2, #0
 800bbbc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800bbbe:	4b2c      	ldr	r3, [pc, #176]	; (800bc70 <MX_ADC1_Init+0xe0>)
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800bbc4:	4b2a      	ldr	r3, [pc, #168]	; (800bc70 <MX_ADC1_Init+0xe0>)
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800bbca:	4b29      	ldr	r3, [pc, #164]	; (800bc70 <MX_ADC1_Init+0xe0>)
 800bbcc:	2200      	movs	r2, #0
 800bbce:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800bbd0:	4b27      	ldr	r3, [pc, #156]	; (800bc70 <MX_ADC1_Init+0xe0>)
 800bbd2:	2204      	movs	r2, #4
 800bbd4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800bbd6:	4b26      	ldr	r3, [pc, #152]	; (800bc70 <MX_ADC1_Init+0xe0>)
 800bbd8:	2200      	movs	r2, #0
 800bbda:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800bbdc:	4b24      	ldr	r3, [pc, #144]	; (800bc70 <MX_ADC1_Init+0xe0>)
 800bbde:	2200      	movs	r2, #0
 800bbe0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800bbe2:	4b23      	ldr	r3, [pc, #140]	; (800bc70 <MX_ADC1_Init+0xe0>)
 800bbe4:	2201      	movs	r2, #1
 800bbe6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800bbe8:	4b21      	ldr	r3, [pc, #132]	; (800bc70 <MX_ADC1_Init+0xe0>)
 800bbea:	2200      	movs	r2, #0
 800bbec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800bbf0:	4b1f      	ldr	r3, [pc, #124]	; (800bc70 <MX_ADC1_Init+0xe0>)
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800bbf6:	4b1e      	ldr	r3, [pc, #120]	; (800bc70 <MX_ADC1_Init+0xe0>)
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800bbfc:	4b1c      	ldr	r3, [pc, #112]	; (800bc70 <MX_ADC1_Init+0xe0>)
 800bbfe:	2200      	movs	r2, #0
 800bc00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800bc04:	4b1a      	ldr	r3, [pc, #104]	; (800bc70 <MX_ADC1_Init+0xe0>)
 800bc06:	2200      	movs	r2, #0
 800bc08:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800bc0a:	4b19      	ldr	r3, [pc, #100]	; (800bc70 <MX_ADC1_Init+0xe0>)
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800bc12:	4817      	ldr	r0, [pc, #92]	; (800bc70 <MX_ADC1_Init+0xe0>)
 800bc14:	f7f4 fe7e 	bl	8000914 <HAL_ADC_Init>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d001      	beq.n	800bc22 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800bc1e:	f000 fc8d 	bl	800c53c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800bc22:	2300      	movs	r3, #0
 800bc24:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800bc26:	f107 031c 	add.w	r3, r7, #28
 800bc2a:	4619      	mov	r1, r3
 800bc2c:	4810      	ldr	r0, [pc, #64]	; (800bc70 <MX_ADC1_Init+0xe0>)
 800bc2e:	f7f5 fbdd 	bl	80013ec <HAL_ADCEx_MultiModeConfigChannel>
 800bc32:	4603      	mov	r3, r0
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d001      	beq.n	800bc3c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800bc38:	f000 fc80 	bl	800c53c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800bc3c:	4b0e      	ldr	r3, [pc, #56]	; (800bc78 <MX_ADC1_Init+0xe8>)
 800bc3e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800bc40:	2306      	movs	r3, #6
 800bc42:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800bc44:	2300      	movs	r3, #0
 800bc46:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800bc48:	237f      	movs	r3, #127	; 0x7f
 800bc4a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800bc4c:	2304      	movs	r3, #4
 800bc4e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800bc50:	2300      	movs	r3, #0
 800bc52:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800bc54:	1d3b      	adds	r3, r7, #4
 800bc56:	4619      	mov	r1, r3
 800bc58:	4805      	ldr	r0, [pc, #20]	; (800bc70 <MX_ADC1_Init+0xe0>)
 800bc5a:	f7f4 ffb1 	bl	8000bc0 <HAL_ADC_ConfigChannel>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d001      	beq.n	800bc68 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800bc64:	f000 fc6a 	bl	800c53c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800bc68:	bf00      	nop
 800bc6a:	3728      	adds	r7, #40	; 0x28
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bd80      	pop	{r7, pc}
 800bc70:	200000b4 	.word	0x200000b4
 800bc74:	50040000 	.word	0x50040000
 800bc78:	2a000400 	.word	0x2a000400

0800bc7c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800bc80:	4b17      	ldr	r3, [pc, #92]	; (800bce0 <MX_CAN1_Init+0x64>)
 800bc82:	4a18      	ldr	r2, [pc, #96]	; (800bce4 <MX_CAN1_Init+0x68>)
 800bc84:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800bc86:	4b16      	ldr	r3, [pc, #88]	; (800bce0 <MX_CAN1_Init+0x64>)
 800bc88:	2210      	movs	r2, #16
 800bc8a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800bc8c:	4b14      	ldr	r3, [pc, #80]	; (800bce0 <MX_CAN1_Init+0x64>)
 800bc8e:	2200      	movs	r2, #0
 800bc90:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800bc92:	4b13      	ldr	r3, [pc, #76]	; (800bce0 <MX_CAN1_Init+0x64>)
 800bc94:	2200      	movs	r2, #0
 800bc96:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800bc98:	4b11      	ldr	r3, [pc, #68]	; (800bce0 <MX_CAN1_Init+0x64>)
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 800bc9e:	4b10      	ldr	r3, [pc, #64]	; (800bce0 <MX_CAN1_Init+0x64>)
 800bca0:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800bca4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800bca6:	4b0e      	ldr	r3, [pc, #56]	; (800bce0 <MX_CAN1_Init+0x64>)
 800bca8:	2200      	movs	r2, #0
 800bcaa:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800bcac:	4b0c      	ldr	r3, [pc, #48]	; (800bce0 <MX_CAN1_Init+0x64>)
 800bcae:	2200      	movs	r2, #0
 800bcb0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800bcb2:	4b0b      	ldr	r3, [pc, #44]	; (800bce0 <MX_CAN1_Init+0x64>)
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800bcb8:	4b09      	ldr	r3, [pc, #36]	; (800bce0 <MX_CAN1_Init+0x64>)
 800bcba:	2200      	movs	r2, #0
 800bcbc:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800bcbe:	4b08      	ldr	r3, [pc, #32]	; (800bce0 <MX_CAN1_Init+0x64>)
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800bcc4:	4b06      	ldr	r3, [pc, #24]	; (800bce0 <MX_CAN1_Init+0x64>)
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800bcca:	4805      	ldr	r0, [pc, #20]	; (800bce0 <MX_CAN1_Init+0x64>)
 800bccc:	f7f5 fc3e 	bl	800154c <HAL_CAN_Init>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d001      	beq.n	800bcda <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800bcd6:	f000 fc31 	bl	800c53c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800bcda:	bf00      	nop
 800bcdc:	bd80      	pop	{r7, pc}
 800bcde:	bf00      	nop
 800bce0:	20000118 	.word	0x20000118
 800bce4:	40006400 	.word	0x40006400

0800bce8 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 800bcec:	4b12      	ldr	r3, [pc, #72]	; (800bd38 <MX_COMP2_Init+0x50>)
 800bcee:	4a13      	ldr	r2, [pc, #76]	; (800bd3c <MX_COMP2_Init+0x54>)
 800bcf0:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_VREFINT;
 800bcf2:	4b11      	ldr	r3, [pc, #68]	; (800bd38 <MX_COMP2_Init+0x50>)
 800bcf4:	4a12      	ldr	r2, [pc, #72]	; (800bd40 <MX_COMP2_Init+0x58>)
 800bcf6:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO1;
 800bcf8:	4b0f      	ldr	r3, [pc, #60]	; (800bd38 <MX_COMP2_Init+0x50>)
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800bcfe:	4b0e      	ldr	r3, [pc, #56]	; (800bd38 <MX_COMP2_Init+0x50>)
 800bd00:	2200      	movs	r2, #0
 800bd02:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800bd04:	4b0c      	ldr	r3, [pc, #48]	; (800bd38 <MX_COMP2_Init+0x50>)
 800bd06:	2200      	movs	r2, #0
 800bd08:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800bd0a:	4b0b      	ldr	r3, [pc, #44]	; (800bd38 <MX_COMP2_Init+0x50>)
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 800bd10:	4b09      	ldr	r3, [pc, #36]	; (800bd38 <MX_COMP2_Init+0x50>)
 800bd12:	2200      	movs	r2, #0
 800bd14:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800bd16:	4b08      	ldr	r3, [pc, #32]	; (800bd38 <MX_COMP2_Init+0x50>)
 800bd18:	2200      	movs	r2, #0
 800bd1a:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800bd1c:	4b06      	ldr	r3, [pc, #24]	; (800bd38 <MX_COMP2_Init+0x50>)
 800bd1e:	2200      	movs	r2, #0
 800bd20:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 800bd22:	4805      	ldr	r0, [pc, #20]	; (800bd38 <MX_COMP2_Init+0x50>)
 800bd24:	f7f5 fdb6 	bl	8001894 <HAL_COMP_Init>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d001      	beq.n	800bd32 <MX_COMP2_Init+0x4a>
  {
    Error_Handler();
 800bd2e:	f000 fc05 	bl	800c53c <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 800bd32:	bf00      	nop
 800bd34:	bd80      	pop	{r7, pc}
 800bd36:	bf00      	nop
 800bd38:	20000140 	.word	0x20000140
 800bd3c:	40010204 	.word	0x40010204
 800bd40:	00800030 	.word	0x00800030

0800bd44 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b08a      	sub	sp, #40	; 0x28
 800bd48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800bd4a:	1d3b      	adds	r3, r7, #4
 800bd4c:	2224      	movs	r2, #36	; 0x24
 800bd4e:	2100      	movs	r1, #0
 800bd50:	4618      	mov	r0, r3
 800bd52:	f001 fcf1 	bl	800d738 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800bd56:	4b12      	ldr	r3, [pc, #72]	; (800bda0 <MX_DAC1_Init+0x5c>)
 800bd58:	4a12      	ldr	r2, [pc, #72]	; (800bda4 <MX_DAC1_Init+0x60>)
 800bd5a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800bd5c:	4810      	ldr	r0, [pc, #64]	; (800bda0 <MX_DAC1_Init+0x5c>)
 800bd5e:	f7f5 ff9c 	bl	8001c9a <HAL_DAC_Init>
 800bd62:	4603      	mov	r3, r0
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d001      	beq.n	800bd6c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800bd68:	f000 fbe8 	bl	800c53c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800bd70:	2300      	movs	r3, #0
 800bd72:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800bd74:	2300      	movs	r3, #0
 800bd76:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800bd78:	2300      	movs	r3, #0
 800bd7a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800bd80:	1d3b      	adds	r3, r7, #4
 800bd82:	2200      	movs	r2, #0
 800bd84:	4619      	mov	r1, r3
 800bd86:	4806      	ldr	r0, [pc, #24]	; (800bda0 <MX_DAC1_Init+0x5c>)
 800bd88:	f7f5 ffa9 	bl	8001cde <HAL_DAC_ConfigChannel>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d001      	beq.n	800bd96 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800bd92:	f000 fbd3 	bl	800c53c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800bd96:	bf00      	nop
 800bd98:	3728      	adds	r7, #40	; 0x28
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}
 800bd9e:	bf00      	nop
 800bda0:	2000016c 	.word	0x2000016c
 800bda4:	40007400 	.word	0x40007400

0800bda8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800bdac:	4b1b      	ldr	r3, [pc, #108]	; (800be1c <MX_I2C1_Init+0x74>)
 800bdae:	4a1c      	ldr	r2, [pc, #112]	; (800be20 <MX_I2C1_Init+0x78>)
 800bdb0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 800bdb2:	4b1a      	ldr	r3, [pc, #104]	; (800be1c <MX_I2C1_Init+0x74>)
 800bdb4:	4a1b      	ldr	r2, [pc, #108]	; (800be24 <MX_I2C1_Init+0x7c>)
 800bdb6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800bdb8:	4b18      	ldr	r3, [pc, #96]	; (800be1c <MX_I2C1_Init+0x74>)
 800bdba:	2200      	movs	r2, #0
 800bdbc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800bdbe:	4b17      	ldr	r3, [pc, #92]	; (800be1c <MX_I2C1_Init+0x74>)
 800bdc0:	2201      	movs	r2, #1
 800bdc2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800bdc4:	4b15      	ldr	r3, [pc, #84]	; (800be1c <MX_I2C1_Init+0x74>)
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800bdca:	4b14      	ldr	r3, [pc, #80]	; (800be1c <MX_I2C1_Init+0x74>)
 800bdcc:	2200      	movs	r2, #0
 800bdce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800bdd0:	4b12      	ldr	r3, [pc, #72]	; (800be1c <MX_I2C1_Init+0x74>)
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800bdd6:	4b11      	ldr	r3, [pc, #68]	; (800be1c <MX_I2C1_Init+0x74>)
 800bdd8:	2200      	movs	r2, #0
 800bdda:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800bddc:	4b0f      	ldr	r3, [pc, #60]	; (800be1c <MX_I2C1_Init+0x74>)
 800bdde:	2200      	movs	r2, #0
 800bde0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800bde2:	480e      	ldr	r0, [pc, #56]	; (800be1c <MX_I2C1_Init+0x74>)
 800bde4:	f7f7 fdd5 	bl	8003992 <HAL_I2C_Init>
 800bde8:	4603      	mov	r3, r0
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d001      	beq.n	800bdf2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800bdee:	f000 fba5 	bl	800c53c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800bdf2:	2100      	movs	r1, #0
 800bdf4:	4809      	ldr	r0, [pc, #36]	; (800be1c <MX_I2C1_Init+0x74>)
 800bdf6:	f7f7 fe5b 	bl	8003ab0 <HAL_I2CEx_ConfigAnalogFilter>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d001      	beq.n	800be04 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800be00:	f000 fb9c 	bl	800c53c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800be04:	2100      	movs	r1, #0
 800be06:	4805      	ldr	r0, [pc, #20]	; (800be1c <MX_I2C1_Init+0x74>)
 800be08:	f7f7 fe9d 	bl	8003b46 <HAL_I2CEx_ConfigDigitalFilter>
 800be0c:	4603      	mov	r3, r0
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d001      	beq.n	800be16 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800be12:	f000 fb93 	bl	800c53c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800be16:	bf00      	nop
 800be18:	bd80      	pop	{r7, pc}
 800be1a:	bf00      	nop
 800be1c:	20000180 	.word	0x20000180
 800be20:	40005400 	.word	0x40005400
 800be24:	20303e5d 	.word	0x20303e5d

0800be28 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800be2c:	4b12      	ldr	r3, [pc, #72]	; (800be78 <MX_LPUART1_UART_Init+0x50>)
 800be2e:	4a13      	ldr	r2, [pc, #76]	; (800be7c <MX_LPUART1_UART_Init+0x54>)
 800be30:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800be32:	4b11      	ldr	r3, [pc, #68]	; (800be78 <MX_LPUART1_UART_Init+0x50>)
 800be34:	4a12      	ldr	r2, [pc, #72]	; (800be80 <MX_LPUART1_UART_Init+0x58>)
 800be36:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 800be38:	4b0f      	ldr	r3, [pc, #60]	; (800be78 <MX_LPUART1_UART_Init+0x50>)
 800be3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be3e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800be40:	4b0d      	ldr	r3, [pc, #52]	; (800be78 <MX_LPUART1_UART_Init+0x50>)
 800be42:	2200      	movs	r2, #0
 800be44:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800be46:	4b0c      	ldr	r3, [pc, #48]	; (800be78 <MX_LPUART1_UART_Init+0x50>)
 800be48:	2200      	movs	r2, #0
 800be4a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800be4c:	4b0a      	ldr	r3, [pc, #40]	; (800be78 <MX_LPUART1_UART_Init+0x50>)
 800be4e:	220c      	movs	r2, #12
 800be50:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800be52:	4b09      	ldr	r3, [pc, #36]	; (800be78 <MX_LPUART1_UART_Init+0x50>)
 800be54:	2200      	movs	r2, #0
 800be56:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800be58:	4b07      	ldr	r3, [pc, #28]	; (800be78 <MX_LPUART1_UART_Init+0x50>)
 800be5a:	2200      	movs	r2, #0
 800be5c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800be5e:	4b06      	ldr	r3, [pc, #24]	; (800be78 <MX_LPUART1_UART_Init+0x50>)
 800be60:	2200      	movs	r2, #0
 800be62:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800be64:	4804      	ldr	r0, [pc, #16]	; (800be78 <MX_LPUART1_UART_Init+0x50>)
 800be66:	f7fb fdbc 	bl	80079e2 <HAL_UART_Init>
 800be6a:	4603      	mov	r3, r0
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d001      	beq.n	800be74 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 800be70:	f000 fb64 	bl	800c53c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800be74:	bf00      	nop
 800be76:	bd80      	pop	{r7, pc}
 800be78:	200001d4 	.word	0x200001d4
 800be7c:	40008000 	.word	0x40008000
 800be80:	00033324 	.word	0x00033324

0800be84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800be88:	4b14      	ldr	r3, [pc, #80]	; (800bedc <MX_USART1_UART_Init+0x58>)
 800be8a:	4a15      	ldr	r2, [pc, #84]	; (800bee0 <MX_USART1_UART_Init+0x5c>)
 800be8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800be8e:	4b13      	ldr	r3, [pc, #76]	; (800bedc <MX_USART1_UART_Init+0x58>)
 800be90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800be94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800be96:	4b11      	ldr	r3, [pc, #68]	; (800bedc <MX_USART1_UART_Init+0x58>)
 800be98:	2200      	movs	r2, #0
 800be9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800be9c:	4b0f      	ldr	r3, [pc, #60]	; (800bedc <MX_USART1_UART_Init+0x58>)
 800be9e:	2200      	movs	r2, #0
 800bea0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800bea2:	4b0e      	ldr	r3, [pc, #56]	; (800bedc <MX_USART1_UART_Init+0x58>)
 800bea4:	2200      	movs	r2, #0
 800bea6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800bea8:	4b0c      	ldr	r3, [pc, #48]	; (800bedc <MX_USART1_UART_Init+0x58>)
 800beaa:	220c      	movs	r2, #12
 800beac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800beae:	4b0b      	ldr	r3, [pc, #44]	; (800bedc <MX_USART1_UART_Init+0x58>)
 800beb0:	f44f 7240 	mov.w	r2, #768	; 0x300
 800beb4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800beb6:	4b09      	ldr	r3, [pc, #36]	; (800bedc <MX_USART1_UART_Init+0x58>)
 800beb8:	2200      	movs	r2, #0
 800beba:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800bebc:	4b07      	ldr	r3, [pc, #28]	; (800bedc <MX_USART1_UART_Init+0x58>)
 800bebe:	2200      	movs	r2, #0
 800bec0:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800bec2:	4b06      	ldr	r3, [pc, #24]	; (800bedc <MX_USART1_UART_Init+0x58>)
 800bec4:	2200      	movs	r2, #0
 800bec6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800bec8:	4804      	ldr	r0, [pc, #16]	; (800bedc <MX_USART1_UART_Init+0x58>)
 800beca:	f7fb fd8a 	bl	80079e2 <HAL_UART_Init>
 800bece:	4603      	mov	r3, r0
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d001      	beq.n	800bed8 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 800bed4:	f000 fb32 	bl	800c53c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800bed8:	bf00      	nop
 800beda:	bd80      	pop	{r7, pc}
 800bedc:	20000258 	.word	0x20000258
 800bee0:	40013800 	.word	0x40013800

0800bee4 <MX_USART3_SMARTCARD_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_SMARTCARD_Init(void)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  hsmartcard3.Instance = USART3;
 800bee8:	4b21      	ldr	r3, [pc, #132]	; (800bf70 <MX_USART3_SMARTCARD_Init+0x8c>)
 800beea:	4a22      	ldr	r2, [pc, #136]	; (800bf74 <MX_USART3_SMARTCARD_Init+0x90>)
 800beec:	601a      	str	r2, [r3, #0]
  hsmartcard3.Init.BaudRate = 115200;
 800beee:	4b20      	ldr	r3, [pc, #128]	; (800bf70 <MX_USART3_SMARTCARD_Init+0x8c>)
 800bef0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800bef4:	605a      	str	r2, [r3, #4]
  hsmartcard3.Init.WordLength = SMARTCARD_WORDLENGTH_9B;
 800bef6:	4b1e      	ldr	r3, [pc, #120]	; (800bf70 <MX_USART3_SMARTCARD_Init+0x8c>)
 800bef8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800befc:	609a      	str	r2, [r3, #8]
  hsmartcard3.Init.StopBits = SMARTCARD_STOPBITS_1_5;
 800befe:	4b1c      	ldr	r3, [pc, #112]	; (800bf70 <MX_USART3_SMARTCARD_Init+0x8c>)
 800bf00:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800bf04:	60da      	str	r2, [r3, #12]
  hsmartcard3.Init.Parity = SMARTCARD_PARITY_EVEN;
 800bf06:	4b1a      	ldr	r3, [pc, #104]	; (800bf70 <MX_USART3_SMARTCARD_Init+0x8c>)
 800bf08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bf0c:	821a      	strh	r2, [r3, #16]
  hsmartcard3.Init.Mode = SMARTCARD_MODE_TX_RX;
 800bf0e:	4b18      	ldr	r3, [pc, #96]	; (800bf70 <MX_USART3_SMARTCARD_Init+0x8c>)
 800bf10:	220c      	movs	r2, #12
 800bf12:	825a      	strh	r2, [r3, #18]
  hsmartcard3.Init.CLKPolarity = SMARTCARD_POLARITY_LOW;
 800bf14:	4b16      	ldr	r3, [pc, #88]	; (800bf70 <MX_USART3_SMARTCARD_Init+0x8c>)
 800bf16:	2200      	movs	r2, #0
 800bf18:	829a      	strh	r2, [r3, #20]
  hsmartcard3.Init.CLKPhase = SMARTCARD_PHASE_1EDGE;
 800bf1a:	4b15      	ldr	r3, [pc, #84]	; (800bf70 <MX_USART3_SMARTCARD_Init+0x8c>)
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	82da      	strh	r2, [r3, #22]
  hsmartcard3.Init.CLKLastBit = SMARTCARD_LASTBIT_DISABLE;
 800bf20:	4b13      	ldr	r3, [pc, #76]	; (800bf70 <MX_USART3_SMARTCARD_Init+0x8c>)
 800bf22:	2200      	movs	r2, #0
 800bf24:	831a      	strh	r2, [r3, #24]
  hsmartcard3.Init.OneBitSampling = SMARTCARD_ONE_BIT_SAMPLE_DISABLE;
 800bf26:	4b12      	ldr	r3, [pc, #72]	; (800bf70 <MX_USART3_SMARTCARD_Init+0x8c>)
 800bf28:	2200      	movs	r2, #0
 800bf2a:	835a      	strh	r2, [r3, #26]
  hsmartcard3.Init.Prescaler = 10;
 800bf2c:	4b10      	ldr	r3, [pc, #64]	; (800bf70 <MX_USART3_SMARTCARD_Init+0x8c>)
 800bf2e:	220a      	movs	r2, #10
 800bf30:	771a      	strb	r2, [r3, #28]
  hsmartcard3.Init.GuardTime = 0;
 800bf32:	4b0f      	ldr	r3, [pc, #60]	; (800bf70 <MX_USART3_SMARTCARD_Init+0x8c>)
 800bf34:	2200      	movs	r2, #0
 800bf36:	775a      	strb	r2, [r3, #29]
  hsmartcard3.Init.NACKEnable = SMARTCARD_NACK_DISABLE;
 800bf38:	4b0d      	ldr	r3, [pc, #52]	; (800bf70 <MX_USART3_SMARTCARD_Init+0x8c>)
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	83da      	strh	r2, [r3, #30]
  hsmartcard3.Init.TimeOutEnable = SMARTCARD_TIMEOUT_DISABLE;
 800bf3e:	4b0c      	ldr	r3, [pc, #48]	; (800bf70 <MX_USART3_SMARTCARD_Init+0x8c>)
 800bf40:	2200      	movs	r2, #0
 800bf42:	621a      	str	r2, [r3, #32]
  hsmartcard3.Init.BlockLength = 0;
 800bf44:	4b0a      	ldr	r3, [pc, #40]	; (800bf70 <MX_USART3_SMARTCARD_Init+0x8c>)
 800bf46:	2200      	movs	r2, #0
 800bf48:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hsmartcard3.Init.AutoRetryCount = 0;
 800bf4c:	4b08      	ldr	r3, [pc, #32]	; (800bf70 <MX_USART3_SMARTCARD_Init+0x8c>)
 800bf4e:	2200      	movs	r2, #0
 800bf50:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  hsmartcard3.AdvancedInit.AdvFeatureInit = SMARTCARD_ADVFEATURE_NO_INIT;
 800bf54:	4b06      	ldr	r3, [pc, #24]	; (800bf70 <MX_USART3_SMARTCARD_Init+0x8c>)
 800bf56:	2200      	movs	r2, #0
 800bf58:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SMARTCARD_Init(&hsmartcard3) != HAL_OK)
 800bf5a:	4805      	ldr	r0, [pc, #20]	; (800bf70 <MX_USART3_SMARTCARD_Init+0x8c>)
 800bf5c:	f7fb f95e 	bl	800721c <HAL_SMARTCARD_Init>
 800bf60:	4603      	mov	r3, r0
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d001      	beq.n	800bf6a <MX_USART3_SMARTCARD_Init+0x86>
  {
    Error_Handler();
 800bf66:	f000 fae9 	bl	800c53c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800bf6a:	bf00      	nop
 800bf6c:	bd80      	pop	{r7, pc}
 800bf6e:	bf00      	nop
 800bf70:	200002dc 	.word	0x200002dc
 800bf74:	40004800 	.word	0x40004800

0800bf78 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 800bf7c:	4b0f      	ldr	r3, [pc, #60]	; (800bfbc <MX_OPAMP1_Init+0x44>)
 800bf7e:	4a10      	ldr	r2, [pc, #64]	; (800bfc0 <MX_OPAMP1_Init+0x48>)
 800bf80:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerSupplyRange = OPAMP_POWERSUPPLY_LOW;
 800bf82:	4b0e      	ldr	r3, [pc, #56]	; (800bfbc <MX_OPAMP1_Init+0x44>)
 800bf84:	2200      	movs	r2, #0
 800bf86:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_STANDALONE_MODE;
 800bf88:	4b0c      	ldr	r3, [pc, #48]	; (800bfbc <MX_OPAMP1_Init+0x44>)
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	60da      	str	r2, [r3, #12]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800bf8e:	4b0b      	ldr	r3, [pc, #44]	; (800bfbc <MX_OPAMP1_Init+0x44>)
 800bf90:	2200      	movs	r2, #0
 800bf92:	615a      	str	r2, [r3, #20]
  hopamp1.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 800bf94:	4b09      	ldr	r3, [pc, #36]	; (800bfbc <MX_OPAMP1_Init+0x44>)
 800bf96:	2200      	movs	r2, #0
 800bf98:	611a      	str	r2, [r3, #16]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALPOWER;
 800bf9a:	4b08      	ldr	r3, [pc, #32]	; (800bfbc <MX_OPAMP1_Init+0x44>)
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	609a      	str	r2, [r3, #8]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800bfa0:	4b06      	ldr	r3, [pc, #24]	; (800bfbc <MX_OPAMP1_Init+0x44>)
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	61da      	str	r2, [r3, #28]
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 800bfa6:	4805      	ldr	r0, [pc, #20]	; (800bfbc <MX_OPAMP1_Init+0x44>)
 800bfa8:	f7f7 ff26 	bl	8003df8 <HAL_OPAMP_Init>
 800bfac:	4603      	mov	r3, r0
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d001      	beq.n	800bfb6 <MX_OPAMP1_Init+0x3e>
  {
    Error_Handler();
 800bfb2:	f000 fac3 	bl	800c53c <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 800bfb6:	bf00      	nop
 800bfb8:	bd80      	pop	{r7, pc}
 800bfba:	bf00      	nop
 800bfbc:	2000035c 	.word	0x2000035c
 800bfc0:	40007800 	.word	0x40007800

0800bfc4 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 800bfc8:	4b3c      	ldr	r3, [pc, #240]	; (800c0bc <MX_SAI1_Init+0xf8>)
 800bfca:	4a3d      	ldr	r2, [pc, #244]	; (800c0c0 <MX_SAI1_Init+0xfc>)
 800bfcc:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_SPDIF_PROTOCOL;
 800bfce:	4b3b      	ldr	r3, [pc, #236]	; (800c0bc <MX_SAI1_Init+0xf8>)
 800bfd0:	2204      	movs	r2, #4
 800bfd2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800bfd4:	4b39      	ldr	r3, [pc, #228]	; (800c0bc <MX_SAI1_Init+0xf8>)
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800bfda:	4b38      	ldr	r3, [pc, #224]	; (800c0bc <MX_SAI1_Init+0xf8>)
 800bfdc:	2200      	movs	r2, #0
 800bfde:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800bfe0:	4b36      	ldr	r3, [pc, #216]	; (800c0bc <MX_SAI1_Init+0xf8>)
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800bfe6:	4b35      	ldr	r3, [pc, #212]	; (800c0bc <MX_SAI1_Init+0xf8>)
 800bfe8:	2200      	movs	r2, #0
 800bfea:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800bfec:	4b33      	ldr	r3, [pc, #204]	; (800c0bc <MX_SAI1_Init+0xf8>)
 800bfee:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800bff2:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800bff4:	4b31      	ldr	r3, [pc, #196]	; (800c0bc <MX_SAI1_Init+0xf8>)
 800bff6:	2200      	movs	r2, #0
 800bff8:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800bffa:	4b30      	ldr	r3, [pc, #192]	; (800c0bc <MX_SAI1_Init+0xf8>)
 800bffc:	2200      	movs	r2, #0
 800bffe:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800c000:	4b2e      	ldr	r3, [pc, #184]	; (800c0bc <MX_SAI1_Init+0xf8>)
 800c002:	2200      	movs	r2, #0
 800c004:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 800c006:	482d      	ldr	r0, [pc, #180]	; (800c0bc <MX_SAI1_Init+0xf8>)
 800c008:	f7fa f96a 	bl	80062e0 <HAL_SAI_Init>
 800c00c:	4603      	mov	r3, r0
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d001      	beq.n	800c016 <MX_SAI1_Init+0x52>
  {
    Error_Handler();
 800c012:	f000 fa93 	bl	800c53c <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 800c016:	4b2b      	ldr	r3, [pc, #172]	; (800c0c4 <MX_SAI1_Init+0x100>)
 800c018:	4a2b      	ldr	r2, [pc, #172]	; (800c0c8 <MX_SAI1_Init+0x104>)
 800c01a:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 800c01c:	4b29      	ldr	r3, [pc, #164]	; (800c0c4 <MX_SAI1_Init+0x100>)
 800c01e:	2200      	movs	r2, #0
 800c020:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 800c022:	4b28      	ldr	r3, [pc, #160]	; (800c0c4 <MX_SAI1_Init+0x100>)
 800c024:	2200      	movs	r2, #0
 800c026:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 800c028:	4b26      	ldr	r3, [pc, #152]	; (800c0c4 <MX_SAI1_Init+0x100>)
 800c02a:	2240      	movs	r2, #64	; 0x40
 800c02c:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800c02e:	4b25      	ldr	r3, [pc, #148]	; (800c0c4 <MX_SAI1_Init+0x100>)
 800c030:	2200      	movs	r2, #0
 800c032:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800c034:	4b23      	ldr	r3, [pc, #140]	; (800c0c4 <MX_SAI1_Init+0x100>)
 800c036:	2200      	movs	r2, #0
 800c038:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 800c03a:	4b22      	ldr	r3, [pc, #136]	; (800c0c4 <MX_SAI1_Init+0x100>)
 800c03c:	2200      	movs	r2, #0
 800c03e:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800c040:	4b20      	ldr	r3, [pc, #128]	; (800c0c4 <MX_SAI1_Init+0x100>)
 800c042:	2200      	movs	r2, #0
 800c044:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800c046:	4b1f      	ldr	r3, [pc, #124]	; (800c0c4 <MX_SAI1_Init+0x100>)
 800c048:	2200      	movs	r2, #0
 800c04a:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800c04c:	4b1d      	ldr	r3, [pc, #116]	; (800c0c4 <MX_SAI1_Init+0x100>)
 800c04e:	2200      	movs	r2, #0
 800c050:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800c052:	4b1c      	ldr	r3, [pc, #112]	; (800c0c4 <MX_SAI1_Init+0x100>)
 800c054:	4a1d      	ldr	r2, [pc, #116]	; (800c0cc <MX_SAI1_Init+0x108>)
 800c056:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800c058:	4b1a      	ldr	r3, [pc, #104]	; (800c0c4 <MX_SAI1_Init+0x100>)
 800c05a:	2200      	movs	r2, #0
 800c05c:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 800c05e:	4b19      	ldr	r3, [pc, #100]	; (800c0c4 <MX_SAI1_Init+0x100>)
 800c060:	2200      	movs	r2, #0
 800c062:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800c064:	4b17      	ldr	r3, [pc, #92]	; (800c0c4 <MX_SAI1_Init+0x100>)
 800c066:	2200      	movs	r2, #0
 800c068:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800c06a:	4b16      	ldr	r3, [pc, #88]	; (800c0c4 <MX_SAI1_Init+0x100>)
 800c06c:	2200      	movs	r2, #0
 800c06e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 800c070:	4b14      	ldr	r3, [pc, #80]	; (800c0c4 <MX_SAI1_Init+0x100>)
 800c072:	2208      	movs	r2, #8
 800c074:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 800c076:	4b13      	ldr	r3, [pc, #76]	; (800c0c4 <MX_SAI1_Init+0x100>)
 800c078:	2201      	movs	r2, #1
 800c07a:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800c07c:	4b11      	ldr	r3, [pc, #68]	; (800c0c4 <MX_SAI1_Init+0x100>)
 800c07e:	2200      	movs	r2, #0
 800c080:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800c082:	4b10      	ldr	r3, [pc, #64]	; (800c0c4 <MX_SAI1_Init+0x100>)
 800c084:	2200      	movs	r2, #0
 800c086:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800c088:	4b0e      	ldr	r3, [pc, #56]	; (800c0c4 <MX_SAI1_Init+0x100>)
 800c08a:	2200      	movs	r2, #0
 800c08c:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 800c08e:	4b0d      	ldr	r3, [pc, #52]	; (800c0c4 <MX_SAI1_Init+0x100>)
 800c090:	2200      	movs	r2, #0
 800c092:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800c094:	4b0b      	ldr	r3, [pc, #44]	; (800c0c4 <MX_SAI1_Init+0x100>)
 800c096:	2200      	movs	r2, #0
 800c098:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 800c09a:	4b0a      	ldr	r3, [pc, #40]	; (800c0c4 <MX_SAI1_Init+0x100>)
 800c09c:	2201      	movs	r2, #1
 800c09e:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 800c0a0:	4b08      	ldr	r3, [pc, #32]	; (800c0c4 <MX_SAI1_Init+0x100>)
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 800c0a6:	4807      	ldr	r0, [pc, #28]	; (800c0c4 <MX_SAI1_Init+0x100>)
 800c0a8:	f7fa f91a 	bl	80062e0 <HAL_SAI_Init>
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d001      	beq.n	800c0b6 <MX_SAI1_Init+0xf2>
  {
    Error_Handler();
 800c0b2:	f000 fa43 	bl	800c53c <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800c0b6:	bf00      	nop
 800c0b8:	bd80      	pop	{r7, pc}
 800c0ba:	bf00      	nop
 800c0bc:	20000390 	.word	0x20000390
 800c0c0:	40015404 	.word	0x40015404
 800c0c4:	20000414 	.word	0x20000414
 800c0c8:	40015424 	.word	0x40015424
 800c0cc:	0002ee00 	.word	0x0002ee00

0800c0d0 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800c0d4:	4b14      	ldr	r3, [pc, #80]	; (800c128 <MX_SDMMC1_SD_Init+0x58>)
 800c0d6:	4a15      	ldr	r2, [pc, #84]	; (800c12c <MX_SDMMC1_SD_Init+0x5c>)
 800c0d8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800c0da:	4b13      	ldr	r3, [pc, #76]	; (800c128 <MX_SDMMC1_SD_Init+0x58>)
 800c0dc:	2200      	movs	r2, #0
 800c0de:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800c0e0:	4b11      	ldr	r3, [pc, #68]	; (800c128 <MX_SDMMC1_SD_Init+0x58>)
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800c0e6:	4b10      	ldr	r3, [pc, #64]	; (800c128 <MX_SDMMC1_SD_Init+0x58>)
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800c0ec:	4b0e      	ldr	r3, [pc, #56]	; (800c128 <MX_SDMMC1_SD_Init+0x58>)
 800c0ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c0f2:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800c0f4:	4b0c      	ldr	r3, [pc, #48]	; (800c128 <MX_SDMMC1_SD_Init+0x58>)
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800c0fa:	4b0b      	ldr	r3, [pc, #44]	; (800c128 <MX_SDMMC1_SD_Init+0x58>)
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 800c100:	4809      	ldr	r0, [pc, #36]	; (800c128 <MX_SDMMC1_SD_Init+0x58>)
 800c102:	f7fa fa99 	bl	8006638 <HAL_SD_Init>
 800c106:	4603      	mov	r3, r0
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d001      	beq.n	800c110 <MX_SDMMC1_SD_Init+0x40>
  {
    Error_Handler();
 800c10c:	f000 fa16 	bl	800c53c <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800c110:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c114:	4804      	ldr	r0, [pc, #16]	; (800c128 <MX_SDMMC1_SD_Init+0x58>)
 800c116:	f7fa fd09 	bl	8006b2c <HAL_SD_ConfigWideBusOperation>
 800c11a:	4603      	mov	r3, r0
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d001      	beq.n	800c124 <MX_SDMMC1_SD_Init+0x54>
  {
    Error_Handler();
 800c120:	f000 fa0c 	bl	800c53c <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800c124:	bf00      	nop
 800c126:	bd80      	pop	{r7, pc}
 800c128:	20000498 	.word	0x20000498
 800c12c:	40012800 	.word	0x40012800

0800c130 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800c134:	4b1b      	ldr	r3, [pc, #108]	; (800c1a4 <MX_SPI2_Init+0x74>)
 800c136:	4a1c      	ldr	r2, [pc, #112]	; (800c1a8 <MX_SPI2_Init+0x78>)
 800c138:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800c13a:	4b1a      	ldr	r3, [pc, #104]	; (800c1a4 <MX_SPI2_Init+0x74>)
 800c13c:	f44f 7282 	mov.w	r2, #260	; 0x104
 800c140:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800c142:	4b18      	ldr	r3, [pc, #96]	; (800c1a4 <MX_SPI2_Init+0x74>)
 800c144:	2200      	movs	r2, #0
 800c146:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800c148:	4b16      	ldr	r3, [pc, #88]	; (800c1a4 <MX_SPI2_Init+0x74>)
 800c14a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800c14e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800c150:	4b14      	ldr	r3, [pc, #80]	; (800c1a4 <MX_SPI2_Init+0x74>)
 800c152:	2200      	movs	r2, #0
 800c154:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800c156:	4b13      	ldr	r3, [pc, #76]	; (800c1a4 <MX_SPI2_Init+0x74>)
 800c158:	2200      	movs	r2, #0
 800c15a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800c15c:	4b11      	ldr	r3, [pc, #68]	; (800c1a4 <MX_SPI2_Init+0x74>)
 800c15e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c162:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800c164:	4b0f      	ldr	r3, [pc, #60]	; (800c1a4 <MX_SPI2_Init+0x74>)
 800c166:	2218      	movs	r2, #24
 800c168:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c16a:	4b0e      	ldr	r3, [pc, #56]	; (800c1a4 <MX_SPI2_Init+0x74>)
 800c16c:	2200      	movs	r2, #0
 800c16e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800c170:	4b0c      	ldr	r3, [pc, #48]	; (800c1a4 <MX_SPI2_Init+0x74>)
 800c172:	2200      	movs	r2, #0
 800c174:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c176:	4b0b      	ldr	r3, [pc, #44]	; (800c1a4 <MX_SPI2_Init+0x74>)
 800c178:	2200      	movs	r2, #0
 800c17a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800c17c:	4b09      	ldr	r3, [pc, #36]	; (800c1a4 <MX_SPI2_Init+0x74>)
 800c17e:	2207      	movs	r2, #7
 800c180:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800c182:	4b08      	ldr	r3, [pc, #32]	; (800c1a4 <MX_SPI2_Init+0x74>)
 800c184:	2200      	movs	r2, #0
 800c186:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800c188:	4b06      	ldr	r3, [pc, #24]	; (800c1a4 <MX_SPI2_Init+0x74>)
 800c18a:	2208      	movs	r2, #8
 800c18c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800c18e:	4805      	ldr	r0, [pc, #20]	; (800c1a4 <MX_SPI2_Init+0x74>)
 800c190:	f7fb fb3c 	bl	800780c <HAL_SPI_Init>
 800c194:	4603      	mov	r3, r0
 800c196:	2b00      	cmp	r3, #0
 800c198:	d001      	beq.n	800c19e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800c19a:	f000 f9cf 	bl	800c53c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800c19e:	bf00      	nop
 800c1a0:	bd80      	pop	{r7, pc}
 800c1a2:	bf00      	nop
 800c1a4:	2000051c 	.word	0x2000051c
 800c1a8:	40003800 	.word	0x40003800

0800c1ac <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b088      	sub	sp, #32
 800c1b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 800c1b2:	463b      	mov	r3, r7
 800c1b4:	2220      	movs	r2, #32
 800c1b6:	2100      	movs	r1, #0
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	f001 fabd 	bl	800d738 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FMC_NORSRAM_DEVICE;
 800c1be:	4b4c      	ldr	r3, [pc, #304]	; (800c2f0 <MX_FMC_Init+0x144>)
 800c1c0:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800c1c4:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800c1c6:	4b4a      	ldr	r3, [pc, #296]	; (800c2f0 <MX_FMC_Init+0x144>)
 800c1c8:	4a4a      	ldr	r2, [pc, #296]	; (800c2f4 <MX_FMC_Init+0x148>)
 800c1ca:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FMC_NORSRAM_BANK2;
 800c1cc:	4b48      	ldr	r3, [pc, #288]	; (800c2f0 <MX_FMC_Init+0x144>)
 800c1ce:	2202      	movs	r2, #2
 800c1d0:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 800c1d2:	4b47      	ldr	r3, [pc, #284]	; (800c2f0 <MX_FMC_Init+0x144>)
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FMC_MEMORY_TYPE_NOR;
 800c1d8:	4b45      	ldr	r3, [pc, #276]	; (800c2f0 <MX_FMC_Init+0x144>)
 800c1da:	2208      	movs	r2, #8
 800c1dc:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800c1de:	4b44      	ldr	r3, [pc, #272]	; (800c2f0 <MX_FMC_Init+0x144>)
 800c1e0:	2210      	movs	r2, #16
 800c1e2:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 800c1e4:	4b42      	ldr	r3, [pc, #264]	; (800c2f0 <MX_FMC_Init+0x144>)
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800c1ea:	4b41      	ldr	r3, [pc, #260]	; (800c2f0 <MX_FMC_Init+0x144>)
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	61da      	str	r2, [r3, #28]
  hnor1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 800c1f0:	4b3f      	ldr	r3, [pc, #252]	; (800c2f0 <MX_FMC_Init+0x144>)
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	621a      	str	r2, [r3, #32]
  hnor1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 800c1f6:	4b3e      	ldr	r3, [pc, #248]	; (800c2f0 <MX_FMC_Init+0x144>)
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800c1fc:	4b3c      	ldr	r3, [pc, #240]	; (800c2f0 <MX_FMC_Init+0x144>)
 800c1fe:	2200      	movs	r2, #0
 800c200:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800c202:	4b3b      	ldr	r3, [pc, #236]	; (800c2f0 <MX_FMC_Init+0x144>)
 800c204:	2200      	movs	r2, #0
 800c206:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 800c208:	4b39      	ldr	r3, [pc, #228]	; (800c2f0 <MX_FMC_Init+0x144>)
 800c20a:	2200      	movs	r2, #0
 800c20c:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800c20e:	4b38      	ldr	r3, [pc, #224]	; (800c2f0 <MX_FMC_Init+0x144>)
 800c210:	2200      	movs	r2, #0
 800c212:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800c214:	4b36      	ldr	r3, [pc, #216]	; (800c2f0 <MX_FMC_Init+0x144>)
 800c216:	2200      	movs	r2, #0
 800c218:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 800c21a:	4b35      	ldr	r3, [pc, #212]	; (800c2f0 <MX_FMC_Init+0x144>)
 800c21c:	2200      	movs	r2, #0
 800c21e:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 800c220:	230f      	movs	r3, #15
 800c222:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 800c224:	230f      	movs	r3, #15
 800c226:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 800c228:	23ff      	movs	r3, #255	; 0xff
 800c22a:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 800c22c:	230f      	movs	r3, #15
 800c22e:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800c230:	2310      	movs	r3, #16
 800c232:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800c234:	2311      	movs	r3, #17
 800c236:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800c238:	2300      	movs	r3, #0
 800c23a:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 800c23c:	463b      	mov	r3, r7
 800c23e:	2200      	movs	r2, #0
 800c240:	4619      	mov	r1, r3
 800c242:	482b      	ldr	r0, [pc, #172]	; (800c2f0 <MX_FMC_Init+0x144>)
 800c244:	f7f7 fccc 	bl	8003be0 <HAL_NOR_Init>
 800c248:	4603      	mov	r3, r0
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d001      	beq.n	800c252 <MX_FMC_Init+0xa6>
  {
    Error_Handler( );
 800c24e:	f000 f975 	bl	800c53c <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 800c252:	4b29      	ldr	r3, [pc, #164]	; (800c2f8 <MX_FMC_Init+0x14c>)
 800c254:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800c258:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800c25a:	4b27      	ldr	r3, [pc, #156]	; (800c2f8 <MX_FMC_Init+0x14c>)
 800c25c:	4a25      	ldr	r2, [pc, #148]	; (800c2f4 <MX_FMC_Init+0x148>)
 800c25e:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK1;
 800c260:	4b25      	ldr	r3, [pc, #148]	; (800c2f8 <MX_FMC_Init+0x14c>)
 800c262:	2200      	movs	r2, #0
 800c264:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 800c266:	4b24      	ldr	r3, [pc, #144]	; (800c2f8 <MX_FMC_Init+0x14c>)
 800c268:	2200      	movs	r2, #0
 800c26a:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 800c26c:	4b22      	ldr	r3, [pc, #136]	; (800c2f8 <MX_FMC_Init+0x14c>)
 800c26e:	2200      	movs	r2, #0
 800c270:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800c272:	4b21      	ldr	r3, [pc, #132]	; (800c2f8 <MX_FMC_Init+0x14c>)
 800c274:	2210      	movs	r2, #16
 800c276:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 800c278:	4b1f      	ldr	r3, [pc, #124]	; (800c2f8 <MX_FMC_Init+0x14c>)
 800c27a:	2200      	movs	r2, #0
 800c27c:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800c27e:	4b1e      	ldr	r3, [pc, #120]	; (800c2f8 <MX_FMC_Init+0x14c>)
 800c280:	2200      	movs	r2, #0
 800c282:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 800c284:	4b1c      	ldr	r3, [pc, #112]	; (800c2f8 <MX_FMC_Init+0x14c>)
 800c286:	2200      	movs	r2, #0
 800c288:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 800c28a:	4b1b      	ldr	r3, [pc, #108]	; (800c2f8 <MX_FMC_Init+0x14c>)
 800c28c:	2200      	movs	r2, #0
 800c28e:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800c290:	4b19      	ldr	r3, [pc, #100]	; (800c2f8 <MX_FMC_Init+0x14c>)
 800c292:	2200      	movs	r2, #0
 800c294:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800c296:	4b18      	ldr	r3, [pc, #96]	; (800c2f8 <MX_FMC_Init+0x14c>)
 800c298:	2200      	movs	r2, #0
 800c29a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 800c29c:	4b16      	ldr	r3, [pc, #88]	; (800c2f8 <MX_FMC_Init+0x14c>)
 800c29e:	2200      	movs	r2, #0
 800c2a0:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800c2a2:	4b15      	ldr	r3, [pc, #84]	; (800c2f8 <MX_FMC_Init+0x14c>)
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800c2a8:	4b13      	ldr	r3, [pc, #76]	; (800c2f8 <MX_FMC_Init+0x14c>)
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 800c2ae:	4b12      	ldr	r3, [pc, #72]	; (800c2f8 <MX_FMC_Init+0x14c>)
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 800c2b4:	230f      	movs	r3, #15
 800c2b6:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 800c2b8:	230f      	movs	r3, #15
 800c2ba:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 800c2bc:	23ff      	movs	r3, #255	; 0xff
 800c2be:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 800c2c0:	230f      	movs	r3, #15
 800c2c2:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800c2c4:	2310      	movs	r3, #16
 800c2c6:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800c2c8:	2311      	movs	r3, #17
 800c2ca:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 800c2d0:	463b      	mov	r3, r7
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	4619      	mov	r1, r3
 800c2d6:	4808      	ldr	r0, [pc, #32]	; (800c2f8 <MX_FMC_Init+0x14c>)
 800c2d8:	f7fb fb3b 	bl	8007952 <HAL_SRAM_Init>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d001      	beq.n	800c2e6 <MX_FMC_Init+0x13a>
  {
    Error_Handler( );
 800c2e2:	f000 f92b 	bl	800c53c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800c2e6:	bf00      	nop
 800c2e8:	3720      	adds	r7, #32
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	bd80      	pop	{r7, pc}
 800c2ee:	bf00      	nop
 800c2f0:	20000580 	.word	0x20000580
 800c2f4:	a0000104 	.word	0xa0000104
 800c2f8:	200005d0 	.word	0x200005d0

0800c2fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b08e      	sub	sp, #56	; 0x38
 800c300:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c302:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c306:	2200      	movs	r2, #0
 800c308:	601a      	str	r2, [r3, #0]
 800c30a:	605a      	str	r2, [r3, #4]
 800c30c:	609a      	str	r2, [r3, #8]
 800c30e:	60da      	str	r2, [r3, #12]
 800c310:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800c312:	4b84      	ldr	r3, [pc, #528]	; (800c524 <MX_GPIO_Init+0x228>)
 800c314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c316:	4a83      	ldr	r2, [pc, #524]	; (800c524 <MX_GPIO_Init+0x228>)
 800c318:	f043 0310 	orr.w	r3, r3, #16
 800c31c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c31e:	4b81      	ldr	r3, [pc, #516]	; (800c524 <MX_GPIO_Init+0x228>)
 800c320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c322:	f003 0310 	and.w	r3, r3, #16
 800c326:	623b      	str	r3, [r7, #32]
 800c328:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c32a:	4b7e      	ldr	r3, [pc, #504]	; (800c524 <MX_GPIO_Init+0x228>)
 800c32c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c32e:	4a7d      	ldr	r2, [pc, #500]	; (800c524 <MX_GPIO_Init+0x228>)
 800c330:	f043 0304 	orr.w	r3, r3, #4
 800c334:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c336:	4b7b      	ldr	r3, [pc, #492]	; (800c524 <MX_GPIO_Init+0x228>)
 800c338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c33a:	f003 0304 	and.w	r3, r3, #4
 800c33e:	61fb      	str	r3, [r7, #28]
 800c340:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800c342:	4b78      	ldr	r3, [pc, #480]	; (800c524 <MX_GPIO_Init+0x228>)
 800c344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c346:	4a77      	ldr	r2, [pc, #476]	; (800c524 <MX_GPIO_Init+0x228>)
 800c348:	f043 0320 	orr.w	r3, r3, #32
 800c34c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c34e:	4b75      	ldr	r3, [pc, #468]	; (800c524 <MX_GPIO_Init+0x228>)
 800c350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c352:	f003 0320 	and.w	r3, r3, #32
 800c356:	61bb      	str	r3, [r7, #24]
 800c358:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c35a:	4b72      	ldr	r3, [pc, #456]	; (800c524 <MX_GPIO_Init+0x228>)
 800c35c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c35e:	4a71      	ldr	r2, [pc, #452]	; (800c524 <MX_GPIO_Init+0x228>)
 800c360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c364:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c366:	4b6f      	ldr	r3, [pc, #444]	; (800c524 <MX_GPIO_Init+0x228>)
 800c368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c36a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c36e:	617b      	str	r3, [r7, #20]
 800c370:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c372:	4b6c      	ldr	r3, [pc, #432]	; (800c524 <MX_GPIO_Init+0x228>)
 800c374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c376:	4a6b      	ldr	r2, [pc, #428]	; (800c524 <MX_GPIO_Init+0x228>)
 800c378:	f043 0301 	orr.w	r3, r3, #1
 800c37c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c37e:	4b69      	ldr	r3, [pc, #420]	; (800c524 <MX_GPIO_Init+0x228>)
 800c380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c382:	f003 0301 	and.w	r3, r3, #1
 800c386:	613b      	str	r3, [r7, #16]
 800c388:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c38a:	4b66      	ldr	r3, [pc, #408]	; (800c524 <MX_GPIO_Init+0x228>)
 800c38c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c38e:	4a65      	ldr	r2, [pc, #404]	; (800c524 <MX_GPIO_Init+0x228>)
 800c390:	f043 0302 	orr.w	r3, r3, #2
 800c394:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c396:	4b63      	ldr	r3, [pc, #396]	; (800c524 <MX_GPIO_Init+0x228>)
 800c398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c39a:	f003 0302 	and.w	r3, r3, #2
 800c39e:	60fb      	str	r3, [r7, #12]
 800c3a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800c3a2:	4b60      	ldr	r3, [pc, #384]	; (800c524 <MX_GPIO_Init+0x228>)
 800c3a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3a6:	4a5f      	ldr	r2, [pc, #380]	; (800c524 <MX_GPIO_Init+0x228>)
 800c3a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c3ae:	4b5d      	ldr	r3, [pc, #372]	; (800c524 <MX_GPIO_Init+0x228>)
 800c3b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3b6:	60bb      	str	r3, [r7, #8]
 800c3b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c3ba:	4b5a      	ldr	r3, [pc, #360]	; (800c524 <MX_GPIO_Init+0x228>)
 800c3bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3be:	4a59      	ldr	r2, [pc, #356]	; (800c524 <MX_GPIO_Init+0x228>)
 800c3c0:	f043 0308 	orr.w	r3, r3, #8
 800c3c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c3c6:	4b57      	ldr	r3, [pc, #348]	; (800c524 <MX_GPIO_Init+0x228>)
 800c3c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3ca:	f003 0308 	and.w	r3, r3, #8
 800c3ce:	607b      	str	r3, [r7, #4]
 800c3d0:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800c3d2:	f7f7 fe5b 	bl	800408c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	2104      	movs	r1, #4
 800c3da:	4853      	ldr	r0, [pc, #332]	; (800c528 <MX_GPIO_Init+0x22c>)
 800c3dc:	f7f5 ff44 	bl	8002268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NFC_NSS_GPIO_Port, NFC_NSS_Pin, GPIO_PIN_RESET);
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c3e6:	4851      	ldr	r0, [pc, #324]	; (800c52c <MX_GPIO_Init+0x230>)
 800c3e8:	f7f5 ff3e 	bl	8002268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USBOTG_PPWR_GPIO_Port, USBOTG_PPWR_Pin, GPIO_PIN_RESET);
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	2140      	movs	r1, #64	; 0x40
 800c3f0:	484f      	ldr	r0, [pc, #316]	; (800c530 <MX_GPIO_Init+0x234>)
 800c3f2:	f7f5 ff39 	bl	8002268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DFSM_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSM_CKOUT_Pin;
 800c3f6:	2304      	movs	r3, #4
 800c3f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c3fa:	2302      	movs	r3, #2
 800c3fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c3fe:	2300      	movs	r3, #0
 800c400:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c402:	2300      	movs	r3, #0
 800c404:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800c406:	2306      	movs	r3, #6
 800c408:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFSM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 800c40a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c40e:	4619      	mov	r1, r3
 800c410:	4847      	ldr	r0, [pc, #284]	; (800c530 <MX_GPIO_Init+0x234>)
 800c412:	f7f5 fd7f 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : VLCD_Pin */
  GPIO_InitStruct.Pin = VLCD_Pin;
 800c416:	2308      	movs	r3, #8
 800c418:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c41a:	2302      	movs	r3, #2
 800c41c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c41e:	2300      	movs	r3, #0
 800c420:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c422:	2300      	movs	r3, #0
 800c424:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800c426:	230b      	movs	r3, #11
 800c428:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(VLCD_GPIO_Port, &GPIO_InitStruct);
 800c42a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c42e:	4619      	mov	r1, r3
 800c430:	483f      	ldr	r0, [pc, #252]	; (800c530 <MX_GPIO_Init+0x234>)
 800c432:	f7f5 fd6f 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800c436:	2304      	movs	r3, #4
 800c438:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c43a:	2301      	movs	r3, #1
 800c43c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c43e:	2300      	movs	r3, #0
 800c440:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c442:	2300      	movs	r3, #0
 800c444:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800c446:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c44a:	4619      	mov	r1, r3
 800c44c:	4836      	ldr	r0, [pc, #216]	; (800c528 <MX_GPIO_Init+0x22c>)
 800c44e:	f7f5 fd61 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : NFC_NSS_Pin */
  GPIO_InitStruct.Pin = NFC_NSS_Pin;
 800c452:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c456:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c458:	2301      	movs	r3, #1
 800c45a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c45c:	2300      	movs	r3, #0
 800c45e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c460:	2300      	movs	r3, #0
 800c462:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(NFC_NSS_GPIO_Port, &GPIO_InitStruct);
 800c464:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c468:	4619      	mov	r1, r3
 800c46a:	4830      	ldr	r0, [pc, #192]	; (800c52c <MX_GPIO_Init+0x230>)
 800c46c:	f7f5 fd52 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : USBOTG_OVRCR_Pin */
  GPIO_InitStruct.Pin = USBOTG_OVRCR_Pin;
 800c470:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c474:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800c476:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800c47a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c47c:	2300      	movs	r3, #0
 800c47e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USBOTG_OVRCR_GPIO_Port, &GPIO_InitStruct);
 800c480:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c484:	4619      	mov	r1, r3
 800c486:	4828      	ldr	r0, [pc, #160]	; (800c528 <MX_GPIO_Init+0x22c>)
 800c488:	f7f5 fd44 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : CODEC_INT_Pin IOExpander_INT_Pin */
  GPIO_InitStruct.Pin = CODEC_INT_Pin|IOExpander_INT_Pin;
 800c48c:	f248 0340 	movw	r3, #32832	; 0x8040
 800c490:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800c492:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800c496:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c498:	2300      	movs	r3, #0
 800c49a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800c49c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c4a0:	4619      	mov	r1, r3
 800c4a2:	4824      	ldr	r0, [pc, #144]	; (800c534 <MX_GPIO_Init+0x238>)
 800c4a4:	f7f5 fd36 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : USBOTG_PPWR_Pin */
  GPIO_InitStruct.Pin = USBOTG_PPWR_Pin;
 800c4a8:	2340      	movs	r3, #64	; 0x40
 800c4aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c4ac:	2301      	movs	r3, #1
 800c4ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USBOTG_PPWR_GPIO_Port, &GPIO_InitStruct);
 800c4b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c4bc:	4619      	mov	r1, r3
 800c4be:	481c      	ldr	r0, [pc, #112]	; (800c530 <MX_GPIO_Init+0x234>)
 800c4c0:	f7f5 fd28 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PT100_DATIN_Pin */
  GPIO_InitStruct.Pin = PT100_DATIN_Pin;
 800c4c4:	2380      	movs	r3, #128	; 0x80
 800c4c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800c4c8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800c4cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PT100_DATIN_GPIO_Port, &GPIO_InitStruct);
 800c4d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c4d6:	4619      	mov	r1, r3
 800c4d8:	4815      	ldr	r0, [pc, #84]	; (800c530 <MX_GPIO_Init+0x234>)
 800c4da:	f7f5 fd1b 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_DETECT_Pin */
  GPIO_InitStruct.Pin = uSD_DETECT_Pin;
 800c4de:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c4e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(uSD_DETECT_GPIO_Port, &GPIO_InitStruct);
 800c4ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c4f0:	4619      	mov	r1, r3
 800c4f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c4f6:	f7f5 fd0d 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_DATIN1_Pin */
  GPIO_InitStruct.Pin = DFSDM_DATIN1_Pin;
 800c4fa:	2308      	movs	r3, #8
 800c4fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c4fe:	2302      	movs	r3, #2
 800c500:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c502:	2300      	movs	r3, #0
 800c504:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c506:	2300      	movs	r3, #0
 800c508:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800c50a:	2306      	movs	r3, #6
 800c50c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFSDM_DATIN1_GPIO_Port, &GPIO_InitStruct);
 800c50e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c512:	4619      	mov	r1, r3
 800c514:	4808      	ldr	r0, [pc, #32]	; (800c538 <MX_GPIO_Init+0x23c>)
 800c516:	f7f5 fcfd 	bl	8001f14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800c51a:	bf00      	nop
 800c51c:	3738      	adds	r7, #56	; 0x38
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}
 800c522:	bf00      	nop
 800c524:	40021000 	.word	0x40021000
 800c528:	48000400 	.word	0x48000400
 800c52c:	48001400 	.word	0x48001400
 800c530:	48000800 	.word	0x48000800
 800c534:	48001800 	.word	0x48001800
 800c538:	48000c00 	.word	0x48000c00

0800c53c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800c53c:	b480      	push	{r7}
 800c53e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800c540:	b672      	cpsid	i
}
 800c542:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800c544:	e7fe      	b.n	800c544 <Error_Handler+0x8>
	...

0800c548 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c548:	b480      	push	{r7}
 800c54a:	b083      	sub	sp, #12
 800c54c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c54e:	4b0f      	ldr	r3, [pc, #60]	; (800c58c <HAL_MspInit+0x44>)
 800c550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c552:	4a0e      	ldr	r2, [pc, #56]	; (800c58c <HAL_MspInit+0x44>)
 800c554:	f043 0301 	orr.w	r3, r3, #1
 800c558:	6613      	str	r3, [r2, #96]	; 0x60
 800c55a:	4b0c      	ldr	r3, [pc, #48]	; (800c58c <HAL_MspInit+0x44>)
 800c55c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c55e:	f003 0301 	and.w	r3, r3, #1
 800c562:	607b      	str	r3, [r7, #4]
 800c564:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c566:	4b09      	ldr	r3, [pc, #36]	; (800c58c <HAL_MspInit+0x44>)
 800c568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c56a:	4a08      	ldr	r2, [pc, #32]	; (800c58c <HAL_MspInit+0x44>)
 800c56c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c570:	6593      	str	r3, [r2, #88]	; 0x58
 800c572:	4b06      	ldr	r3, [pc, #24]	; (800c58c <HAL_MspInit+0x44>)
 800c574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c57a:	603b      	str	r3, [r7, #0]
 800c57c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c57e:	bf00      	nop
 800c580:	370c      	adds	r7, #12
 800c582:	46bd      	mov	sp, r7
 800c584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c588:	4770      	bx	lr
 800c58a:	bf00      	nop
 800c58c:	40021000 	.word	0x40021000

0800c590 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b08a      	sub	sp, #40	; 0x28
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c598:	f107 0314 	add.w	r3, r7, #20
 800c59c:	2200      	movs	r2, #0
 800c59e:	601a      	str	r2, [r3, #0]
 800c5a0:	605a      	str	r2, [r3, #4]
 800c5a2:	609a      	str	r2, [r3, #8]
 800c5a4:	60da      	str	r2, [r3, #12]
 800c5a6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	4a21      	ldr	r2, [pc, #132]	; (800c634 <HAL_ADC_MspInit+0xa4>)
 800c5ae:	4293      	cmp	r3, r2
 800c5b0:	d13c      	bne.n	800c62c <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800c5b2:	4b21      	ldr	r3, [pc, #132]	; (800c638 <HAL_ADC_MspInit+0xa8>)
 800c5b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5b6:	4a20      	ldr	r2, [pc, #128]	; (800c638 <HAL_ADC_MspInit+0xa8>)
 800c5b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c5bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c5be:	4b1e      	ldr	r3, [pc, #120]	; (800c638 <HAL_ADC_MspInit+0xa8>)
 800c5c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c5c6:	613b      	str	r3, [r7, #16]
 800c5c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c5ca:	4b1b      	ldr	r3, [pc, #108]	; (800c638 <HAL_ADC_MspInit+0xa8>)
 800c5cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5ce:	4a1a      	ldr	r2, [pc, #104]	; (800c638 <HAL_ADC_MspInit+0xa8>)
 800c5d0:	f043 0304 	orr.w	r3, r3, #4
 800c5d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c5d6:	4b18      	ldr	r3, [pc, #96]	; (800c638 <HAL_ADC_MspInit+0xa8>)
 800c5d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5da:	f003 0304 	and.w	r3, r3, #4
 800c5de:	60fb      	str	r3, [r7, #12]
 800c5e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c5e2:	4b15      	ldr	r3, [pc, #84]	; (800c638 <HAL_ADC_MspInit+0xa8>)
 800c5e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5e6:	4a14      	ldr	r2, [pc, #80]	; (800c638 <HAL_ADC_MspInit+0xa8>)
 800c5e8:	f043 0301 	orr.w	r3, r3, #1
 800c5ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c5ee:	4b12      	ldr	r3, [pc, #72]	; (800c638 <HAL_ADC_MspInit+0xa8>)
 800c5f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5f2:	f003 0301 	and.w	r3, r3, #1
 800c5f6:	60bb      	str	r3, [r7, #8]
 800c5f8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PA5     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = DMCI_DATAIN_Pin;
 800c5fa:	2301      	movs	r3, #1
 800c5fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800c5fe:	230b      	movs	r3, #11
 800c600:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c602:	2300      	movs	r3, #0
 800c604:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DMCI_DATAIN_GPIO_Port, &GPIO_InitStruct);
 800c606:	f107 0314 	add.w	r3, r7, #20
 800c60a:	4619      	mov	r1, r3
 800c60c:	480b      	ldr	r0, [pc, #44]	; (800c63c <HAL_ADC_MspInit+0xac>)
 800c60e:	f7f5 fc81 	bl	8001f14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IDD_Measurement_Pin;
 800c612:	2320      	movs	r3, #32
 800c614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800c616:	230b      	movs	r3, #11
 800c618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c61a:	2300      	movs	r3, #0
 800c61c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(IDD_Measurement_GPIO_Port, &GPIO_InitStruct);
 800c61e:	f107 0314 	add.w	r3, r7, #20
 800c622:	4619      	mov	r1, r3
 800c624:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c628:	f7f5 fc74 	bl	8001f14 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800c62c:	bf00      	nop
 800c62e:	3728      	adds	r7, #40	; 0x28
 800c630:	46bd      	mov	sp, r7
 800c632:	bd80      	pop	{r7, pc}
 800c634:	50040000 	.word	0x50040000
 800c638:	40021000 	.word	0x40021000
 800c63c:	48000800 	.word	0x48000800

0800c640 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b08a      	sub	sp, #40	; 0x28
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c648:	f107 0314 	add.w	r3, r7, #20
 800c64c:	2200      	movs	r2, #0
 800c64e:	601a      	str	r2, [r3, #0]
 800c650:	605a      	str	r2, [r3, #4]
 800c652:	609a      	str	r2, [r3, #8]
 800c654:	60da      	str	r2, [r3, #12]
 800c656:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	4a17      	ldr	r2, [pc, #92]	; (800c6bc <HAL_CAN_MspInit+0x7c>)
 800c65e:	4293      	cmp	r3, r2
 800c660:	d128      	bne.n	800c6b4 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800c662:	4b17      	ldr	r3, [pc, #92]	; (800c6c0 <HAL_CAN_MspInit+0x80>)
 800c664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c666:	4a16      	ldr	r2, [pc, #88]	; (800c6c0 <HAL_CAN_MspInit+0x80>)
 800c668:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c66c:	6593      	str	r3, [r2, #88]	; 0x58
 800c66e:	4b14      	ldr	r3, [pc, #80]	; (800c6c0 <HAL_CAN_MspInit+0x80>)
 800c670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c676:	613b      	str	r3, [r7, #16]
 800c678:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c67a:	4b11      	ldr	r3, [pc, #68]	; (800c6c0 <HAL_CAN_MspInit+0x80>)
 800c67c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c67e:	4a10      	ldr	r2, [pc, #64]	; (800c6c0 <HAL_CAN_MspInit+0x80>)
 800c680:	f043 0302 	orr.w	r3, r3, #2
 800c684:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c686:	4b0e      	ldr	r3, [pc, #56]	; (800c6c0 <HAL_CAN_MspInit+0x80>)
 800c688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c68a:	f003 0302 	and.w	r3, r3, #2
 800c68e:	60fb      	str	r3, [r7, #12]
 800c690:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin|CAN_TX_Pin;
 800c692:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c696:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c698:	2302      	movs	r3, #2
 800c69a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c69c:	2300      	movs	r3, #0
 800c69e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c6a0:	2303      	movs	r3, #3
 800c6a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800c6a4:	2309      	movs	r3, #9
 800c6a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c6a8:	f107 0314 	add.w	r3, r7, #20
 800c6ac:	4619      	mov	r1, r3
 800c6ae:	4805      	ldr	r0, [pc, #20]	; (800c6c4 <HAL_CAN_MspInit+0x84>)
 800c6b0:	f7f5 fc30 	bl	8001f14 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800c6b4:	bf00      	nop
 800c6b6:	3728      	adds	r7, #40	; 0x28
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}
 800c6bc:	40006400 	.word	0x40006400
 800c6c0:	40021000 	.word	0x40021000
 800c6c4:	48000400 	.word	0x48000400

0800c6c8 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b088      	sub	sp, #32
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c6d0:	f107 030c 	add.w	r3, r7, #12
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	601a      	str	r2, [r3, #0]
 800c6d8:	605a      	str	r2, [r3, #4]
 800c6da:	609a      	str	r2, [r3, #8]
 800c6dc:	60da      	str	r2, [r3, #12]
 800c6de:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	4a17      	ldr	r2, [pc, #92]	; (800c744 <HAL_COMP_MspInit+0x7c>)
 800c6e6:	4293      	cmp	r3, r2
 800c6e8:	d127      	bne.n	800c73a <HAL_COMP_MspInit+0x72>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c6ea:	4b17      	ldr	r3, [pc, #92]	; (800c748 <HAL_COMP_MspInit+0x80>)
 800c6ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6ee:	4a16      	ldr	r2, [pc, #88]	; (800c748 <HAL_COMP_MspInit+0x80>)
 800c6f0:	f043 0302 	orr.w	r3, r3, #2
 800c6f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c6f6:	4b14      	ldr	r3, [pc, #80]	; (800c748 <HAL_COMP_MspInit+0x80>)
 800c6f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6fa:	f003 0302 	and.w	r3, r3, #2
 800c6fe:	60bb      	str	r3, [r7, #8]
 800c700:	68bb      	ldr	r3, [r7, #8]
    /**COMP2 GPIO Configuration
    PB4 (NJTRST)     ------> COMP2_INP
    PB5     ------> COMP2_OUT
    */
    GPIO_InitStruct.Pin = comp2_INP_Pin;
 800c702:	2310      	movs	r3, #16
 800c704:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c706:	2303      	movs	r3, #3
 800c708:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c70a:	2300      	movs	r3, #0
 800c70c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(comp2_INP_GPIO_Port, &GPIO_InitStruct);
 800c70e:	f107 030c 	add.w	r3, r7, #12
 800c712:	4619      	mov	r1, r3
 800c714:	480d      	ldr	r0, [pc, #52]	; (800c74c <HAL_COMP_MspInit+0x84>)
 800c716:	f7f5 fbfd 	bl	8001f14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Comp2_OUT_Pin;
 800c71a:	2320      	movs	r3, #32
 800c71c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c71e:	2302      	movs	r3, #2
 800c720:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c722:	2300      	movs	r3, #0
 800c724:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c726:	2300      	movs	r3, #0
 800c728:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_COMP2;
 800c72a:	230c      	movs	r3, #12
 800c72c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Comp2_OUT_GPIO_Port, &GPIO_InitStruct);
 800c72e:	f107 030c 	add.w	r3, r7, #12
 800c732:	4619      	mov	r1, r3
 800c734:	4805      	ldr	r0, [pc, #20]	; (800c74c <HAL_COMP_MspInit+0x84>)
 800c736:	f7f5 fbed 	bl	8001f14 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 800c73a:	bf00      	nop
 800c73c:	3720      	adds	r7, #32
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}
 800c742:	bf00      	nop
 800c744:	40010204 	.word	0x40010204
 800c748:	40021000 	.word	0x40021000
 800c74c:	48000400 	.word	0x48000400

0800c750 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b08a      	sub	sp, #40	; 0x28
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c758:	f107 0314 	add.w	r3, r7, #20
 800c75c:	2200      	movs	r2, #0
 800c75e:	601a      	str	r2, [r3, #0]
 800c760:	605a      	str	r2, [r3, #4]
 800c762:	609a      	str	r2, [r3, #8]
 800c764:	60da      	str	r2, [r3, #12]
 800c766:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	4a15      	ldr	r2, [pc, #84]	; (800c7c4 <HAL_DAC_MspInit+0x74>)
 800c76e:	4293      	cmp	r3, r2
 800c770:	d124      	bne.n	800c7bc <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800c772:	4b15      	ldr	r3, [pc, #84]	; (800c7c8 <HAL_DAC_MspInit+0x78>)
 800c774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c776:	4a14      	ldr	r2, [pc, #80]	; (800c7c8 <HAL_DAC_MspInit+0x78>)
 800c778:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c77c:	6593      	str	r3, [r2, #88]	; 0x58
 800c77e:	4b12      	ldr	r3, [pc, #72]	; (800c7c8 <HAL_DAC_MspInit+0x78>)
 800c780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c782:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c786:	613b      	str	r3, [r7, #16]
 800c788:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c78a:	4b0f      	ldr	r3, [pc, #60]	; (800c7c8 <HAL_DAC_MspInit+0x78>)
 800c78c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c78e:	4a0e      	ldr	r2, [pc, #56]	; (800c7c8 <HAL_DAC_MspInit+0x78>)
 800c790:	f043 0301 	orr.w	r3, r3, #1
 800c794:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c796:	4b0c      	ldr	r3, [pc, #48]	; (800c7c8 <HAL_DAC_MspInit+0x78>)
 800c798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c79a:	f003 0301 	and.w	r3, r3, #1
 800c79e:	60fb      	str	r3, [r7, #12]
 800c7a0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = ADC_DAC_Pin;
 800c7a2:	2310      	movs	r3, #16
 800c7a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c7a6:	2303      	movs	r3, #3
 800c7a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_DAC_GPIO_Port, &GPIO_InitStruct);
 800c7ae:	f107 0314 	add.w	r3, r7, #20
 800c7b2:	4619      	mov	r1, r3
 800c7b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c7b8:	f7f5 fbac 	bl	8001f14 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800c7bc:	bf00      	nop
 800c7be:	3728      	adds	r7, #40	; 0x28
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}
 800c7c4:	40007400 	.word	0x40007400
 800c7c8:	40021000 	.word	0x40021000

0800c7cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b0ac      	sub	sp, #176	; 0xb0
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c7d4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800c7d8:	2200      	movs	r2, #0
 800c7da:	601a      	str	r2, [r3, #0]
 800c7dc:	605a      	str	r2, [r3, #4]
 800c7de:	609a      	str	r2, [r3, #8]
 800c7e0:	60da      	str	r2, [r3, #12]
 800c7e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c7e4:	f107 0314 	add.w	r3, r7, #20
 800c7e8:	2288      	movs	r2, #136	; 0x88
 800c7ea:	2100      	movs	r1, #0
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f000 ffa3 	bl	800d738 <memset>
  if(hi2c->Instance==I2C1)
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	4a22      	ldr	r2, [pc, #136]	; (800c880 <HAL_I2C_MspInit+0xb4>)
 800c7f8:	4293      	cmp	r3, r2
 800c7fa:	d13d      	bne.n	800c878 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800c7fc:	2340      	movs	r3, #64	; 0x40
 800c7fe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800c800:	2300      	movs	r3, #0
 800c802:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c804:	f107 0314 	add.w	r3, r7, #20
 800c808:	4618      	mov	r0, r3
 800c80a:	f7f8 fa4f 	bl	8004cac <HAL_RCCEx_PeriphCLKConfig>
 800c80e:	4603      	mov	r3, r0
 800c810:	2b00      	cmp	r3, #0
 800c812:	d001      	beq.n	800c818 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800c814:	f7ff fe92 	bl	800c53c <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800c818:	4b1a      	ldr	r3, [pc, #104]	; (800c884 <HAL_I2C_MspInit+0xb8>)
 800c81a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c81c:	4a19      	ldr	r2, [pc, #100]	; (800c884 <HAL_I2C_MspInit+0xb8>)
 800c81e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c822:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c824:	4b17      	ldr	r3, [pc, #92]	; (800c884 <HAL_I2C_MspInit+0xb8>)
 800c826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c82c:	613b      	str	r3, [r7, #16]
 800c82e:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 800c830:	f7f7 fc2c 	bl	800408c <HAL_PWREx_EnableVddIO2>
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = I2C_SDA_Pin|I2C_SCL_Pin;
 800c834:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800c838:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c83c:	2312      	movs	r3, #18
 800c83e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c842:	2301      	movs	r3, #1
 800c844:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c848:	2303      	movs	r3, #3
 800c84a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800c84e:	2304      	movs	r3, #4
 800c850:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800c854:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800c858:	4619      	mov	r1, r3
 800c85a:	480b      	ldr	r0, [pc, #44]	; (800c888 <HAL_I2C_MspInit+0xbc>)
 800c85c:	f7f5 fb5a 	bl	8001f14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800c860:	4b08      	ldr	r3, [pc, #32]	; (800c884 <HAL_I2C_MspInit+0xb8>)
 800c862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c864:	4a07      	ldr	r2, [pc, #28]	; (800c884 <HAL_I2C_MspInit+0xb8>)
 800c866:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c86a:	6593      	str	r3, [r2, #88]	; 0x58
 800c86c:	4b05      	ldr	r3, [pc, #20]	; (800c884 <HAL_I2C_MspInit+0xb8>)
 800c86e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c870:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c874:	60fb      	str	r3, [r7, #12]
 800c876:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800c878:	bf00      	nop
 800c87a:	37b0      	adds	r7, #176	; 0xb0
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}
 800c880:	40005400 	.word	0x40005400
 800c884:	40021000 	.word	0x40021000
 800c888:	48001800 	.word	0x48001800

0800c88c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b0ae      	sub	sp, #184	; 0xb8
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c894:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800c898:	2200      	movs	r2, #0
 800c89a:	601a      	str	r2, [r3, #0]
 800c89c:	605a      	str	r2, [r3, #4]
 800c89e:	609a      	str	r2, [r3, #8]
 800c8a0:	60da      	str	r2, [r3, #12]
 800c8a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c8a4:	f107 031c 	add.w	r3, r7, #28
 800c8a8:	2288      	movs	r2, #136	; 0x88
 800c8aa:	2100      	movs	r1, #0
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	f000 ff43 	bl	800d738 <memset>
  if(huart->Instance==LPUART1)
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	4a55      	ldr	r2, [pc, #340]	; (800ca0c <HAL_UART_MspInit+0x180>)
 800c8b8:	4293      	cmp	r3, r2
 800c8ba:	d13e      	bne.n	800c93a <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800c8bc:	2320      	movs	r3, #32
 800c8be:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c8c4:	f107 031c 	add.w	r3, r7, #28
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f7f8 f9ef 	bl	8004cac <HAL_RCCEx_PeriphCLKConfig>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d001      	beq.n	800c8d8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800c8d4:	f7ff fe32 	bl	800c53c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800c8d8:	4b4d      	ldr	r3, [pc, #308]	; (800ca10 <HAL_UART_MspInit+0x184>)
 800c8da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c8dc:	4a4c      	ldr	r2, [pc, #304]	; (800ca10 <HAL_UART_MspInit+0x184>)
 800c8de:	f043 0301 	orr.w	r3, r3, #1
 800c8e2:	65d3      	str	r3, [r2, #92]	; 0x5c
 800c8e4:	4b4a      	ldr	r3, [pc, #296]	; (800ca10 <HAL_UART_MspInit+0x184>)
 800c8e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c8e8:	f003 0301 	and.w	r3, r3, #1
 800c8ec:	61bb      	str	r3, [r7, #24]
 800c8ee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800c8f0:	4b47      	ldr	r3, [pc, #284]	; (800ca10 <HAL_UART_MspInit+0x184>)
 800c8f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c8f4:	4a46      	ldr	r2, [pc, #280]	; (800ca10 <HAL_UART_MspInit+0x184>)
 800c8f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c8fc:	4b44      	ldr	r3, [pc, #272]	; (800ca10 <HAL_UART_MspInit+0x184>)
 800c8fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c904:	617b      	str	r3, [r7, #20]
 800c906:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 800c908:	f7f7 fbc0 	bl	800408c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART_TX_Pin|LPUART_RX_3V3_Pin;
 800c90c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800c910:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c914:	2302      	movs	r3, #2
 800c916:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c91a:	2301      	movs	r3, #1
 800c91c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c920:	2303      	movs	r3, #3
 800c922:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800c926:	2308      	movs	r3, #8
 800c928:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800c92c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800c930:	4619      	mov	r1, r3
 800c932:	4838      	ldr	r0, [pc, #224]	; (800ca14 <HAL_UART_MspInit+0x188>)
 800c934:	f7f5 faee 	bl	8001f14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800c938:	e063      	b.n	800ca02 <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART1)
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	4a36      	ldr	r2, [pc, #216]	; (800ca18 <HAL_UART_MspInit+0x18c>)
 800c940:	4293      	cmp	r3, r2
 800c942:	d15e      	bne.n	800ca02 <HAL_UART_MspInit+0x176>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800c944:	2301      	movs	r3, #1
 800c946:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800c948:	2300      	movs	r3, #0
 800c94a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c94c:	f107 031c 	add.w	r3, r7, #28
 800c950:	4618      	mov	r0, r3
 800c952:	f7f8 f9ab 	bl	8004cac <HAL_RCCEx_PeriphCLKConfig>
 800c956:	4603      	mov	r3, r0
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d001      	beq.n	800c960 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 800c95c:	f7ff fdee 	bl	800c53c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800c960:	4b2b      	ldr	r3, [pc, #172]	; (800ca10 <HAL_UART_MspInit+0x184>)
 800c962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c964:	4a2a      	ldr	r2, [pc, #168]	; (800ca10 <HAL_UART_MspInit+0x184>)
 800c966:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c96a:	6613      	str	r3, [r2, #96]	; 0x60
 800c96c:	4b28      	ldr	r3, [pc, #160]	; (800ca10 <HAL_UART_MspInit+0x184>)
 800c96e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c970:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c974:	613b      	str	r3, [r7, #16]
 800c976:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800c978:	4b25      	ldr	r3, [pc, #148]	; (800ca10 <HAL_UART_MspInit+0x184>)
 800c97a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c97c:	4a24      	ldr	r2, [pc, #144]	; (800ca10 <HAL_UART_MspInit+0x184>)
 800c97e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c982:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c984:	4b22      	ldr	r3, [pc, #136]	; (800ca10 <HAL_UART_MspInit+0x184>)
 800c986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c98c:	60fb      	str	r3, [r7, #12]
 800c98e:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 800c990:	f7f7 fb7c 	bl	800408c <HAL_PWREx_EnableVddIO2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c994:	4b1e      	ldr	r3, [pc, #120]	; (800ca10 <HAL_UART_MspInit+0x184>)
 800c996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c998:	4a1d      	ldr	r2, [pc, #116]	; (800ca10 <HAL_UART_MspInit+0x184>)
 800c99a:	f043 0302 	orr.w	r3, r3, #2
 800c99e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c9a0:	4b1b      	ldr	r3, [pc, #108]	; (800ca10 <HAL_UART_MspInit+0x184>)
 800c9a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c9a4:	f003 0302 	and.w	r3, r3, #2
 800c9a8:	60bb      	str	r3, [r7, #8]
 800c9aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART1_CTS_3V3_Pin|USART1_RTS_Pin;
 800c9ac:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c9b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c9b4:	2302      	movs	r3, #2
 800c9b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c9c0:	2303      	movs	r3, #3
 800c9c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800c9c6:	2307      	movs	r3, #7
 800c9c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800c9cc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800c9d0:	4619      	mov	r1, r3
 800c9d2:	4810      	ldr	r0, [pc, #64]	; (800ca14 <HAL_UART_MspInit+0x188>)
 800c9d4:	f7f5 fa9e 	bl	8001f14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_IrDA_RX_3V3_Pin;
 800c9d8:	23c0      	movs	r3, #192	; 0xc0
 800c9da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c9de:	2302      	movs	r3, #2
 800c9e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c9e4:	2301      	movs	r3, #1
 800c9e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c9ea:	2303      	movs	r3, #3
 800c9ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800c9f0:	2307      	movs	r3, #7
 800c9f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c9f6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800c9fa:	4619      	mov	r1, r3
 800c9fc:	4807      	ldr	r0, [pc, #28]	; (800ca1c <HAL_UART_MspInit+0x190>)
 800c9fe:	f7f5 fa89 	bl	8001f14 <HAL_GPIO_Init>
}
 800ca02:	bf00      	nop
 800ca04:	37b8      	adds	r7, #184	; 0xb8
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd80      	pop	{r7, pc}
 800ca0a:	bf00      	nop
 800ca0c:	40008000 	.word	0x40008000
 800ca10:	40021000 	.word	0x40021000
 800ca14:	48001800 	.word	0x48001800
 800ca18:	40013800 	.word	0x40013800
 800ca1c:	48000400 	.word	0x48000400

0800ca20 <HAL_SMARTCARD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsmartcard: SMARTCARD handle pointer
* @retval None
*/
void HAL_SMARTCARD_MspInit(SMARTCARD_HandleTypeDef* hsmartcard)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b0ac      	sub	sp, #176	; 0xb0
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ca28:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	601a      	str	r2, [r3, #0]
 800ca30:	605a      	str	r2, [r3, #4]
 800ca32:	609a      	str	r2, [r3, #8]
 800ca34:	60da      	str	r2, [r3, #12]
 800ca36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ca38:	f107 0314 	add.w	r3, r7, #20
 800ca3c:	2288      	movs	r2, #136	; 0x88
 800ca3e:	2100      	movs	r1, #0
 800ca40:	4618      	mov	r0, r3
 800ca42:	f000 fe79 	bl	800d738 <memset>
  if(hsmartcard->Instance==USART3)
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	4a31      	ldr	r2, [pc, #196]	; (800cb10 <HAL_SMARTCARD_MspInit+0xf0>)
 800ca4c:	4293      	cmp	r3, r2
 800ca4e:	d15b      	bne.n	800cb08 <HAL_SMARTCARD_MspInit+0xe8>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800ca50:	2304      	movs	r3, #4
 800ca52:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800ca54:	2300      	movs	r3, #0
 800ca56:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ca58:	f107 0314 	add.w	r3, r7, #20
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	f7f8 f925 	bl	8004cac <HAL_RCCEx_PeriphCLKConfig>
 800ca62:	4603      	mov	r3, r0
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d001      	beq.n	800ca6c <HAL_SMARTCARD_MspInit+0x4c>
    {
      Error_Handler();
 800ca68:	f7ff fd68 	bl	800c53c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800ca6c:	4b29      	ldr	r3, [pc, #164]	; (800cb14 <HAL_SMARTCARD_MspInit+0xf4>)
 800ca6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca70:	4a28      	ldr	r2, [pc, #160]	; (800cb14 <HAL_SMARTCARD_MspInit+0xf4>)
 800ca72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ca76:	6593      	str	r3, [r2, #88]	; 0x58
 800ca78:	4b26      	ldr	r3, [pc, #152]	; (800cb14 <HAL_SMARTCARD_MspInit+0xf4>)
 800ca7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ca80:	613b      	str	r3, [r7, #16]
 800ca82:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ca84:	4b23      	ldr	r3, [pc, #140]	; (800cb14 <HAL_SMARTCARD_MspInit+0xf4>)
 800ca86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca88:	4a22      	ldr	r2, [pc, #136]	; (800cb14 <HAL_SMARTCARD_MspInit+0xf4>)
 800ca8a:	f043 0304 	orr.w	r3, r3, #4
 800ca8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ca90:	4b20      	ldr	r3, [pc, #128]	; (800cb14 <HAL_SMARTCARD_MspInit+0xf4>)
 800ca92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca94:	f003 0304 	and.w	r3, r3, #4
 800ca98:	60fb      	str	r3, [r7, #12]
 800ca9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ca9c:	4b1d      	ldr	r3, [pc, #116]	; (800cb14 <HAL_SMARTCARD_MspInit+0xf4>)
 800ca9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800caa0:	4a1c      	ldr	r2, [pc, #112]	; (800cb14 <HAL_SMARTCARD_MspInit+0xf4>)
 800caa2:	f043 0302 	orr.w	r3, r3, #2
 800caa6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800caa8:	4b1a      	ldr	r3, [pc, #104]	; (800cb14 <HAL_SMARTCARD_MspInit+0xf4>)
 800caaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800caac:	f003 0302 	and.w	r3, r3, #2
 800cab0:	60bb      	str	r3, [r7, #8]
 800cab2:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC4     ------> USART3_TX
    PB0     ------> USART3_CK
    */
    GPIO_InitStruct.Pin = SmartCard_IO_Pin;
 800cab4:	2310      	movs	r3, #16
 800cab6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800caba:	2312      	movs	r3, #18
 800cabc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cac0:	2301      	movs	r3, #1
 800cac2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cac6:	2303      	movs	r3, #3
 800cac8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800cacc:	2307      	movs	r3, #7
 800cace:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(SmartCard_IO_GPIO_Port, &GPIO_InitStruct);
 800cad2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800cad6:	4619      	mov	r1, r3
 800cad8:	480f      	ldr	r0, [pc, #60]	; (800cb18 <HAL_SMARTCARD_MspInit+0xf8>)
 800cada:	f7f5 fa1b 	bl	8001f14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SmartCard_CLK_Pin;
 800cade:	2301      	movs	r3, #1
 800cae0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cae4:	2302      	movs	r3, #2
 800cae6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800caea:	2300      	movs	r3, #0
 800caec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800caf0:	2303      	movs	r3, #3
 800caf2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800caf6:	2307      	movs	r3, #7
 800caf8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(SmartCard_CLK_GPIO_Port, &GPIO_InitStruct);
 800cafc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800cb00:	4619      	mov	r1, r3
 800cb02:	4806      	ldr	r0, [pc, #24]	; (800cb1c <HAL_SMARTCARD_MspInit+0xfc>)
 800cb04:	f7f5 fa06 	bl	8001f14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800cb08:	bf00      	nop
 800cb0a:	37b0      	adds	r7, #176	; 0xb0
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}
 800cb10:	40004800 	.word	0x40004800
 800cb14:	40021000 	.word	0x40021000
 800cb18:	48000800 	.word	0x48000800
 800cb1c:	48000400 	.word	0x48000400

0800cb20 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b08a      	sub	sp, #40	; 0x28
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cb28:	f107 0314 	add.w	r3, r7, #20
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	601a      	str	r2, [r3, #0]
 800cb30:	605a      	str	r2, [r3, #4]
 800cb32:	609a      	str	r2, [r3, #8]
 800cb34:	60da      	str	r2, [r3, #12]
 800cb36:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	4a15      	ldr	r2, [pc, #84]	; (800cb94 <HAL_OPAMP_MspInit+0x74>)
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	d124      	bne.n	800cb8c <HAL_OPAMP_MspInit+0x6c>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_OPAMP_CLK_ENABLE();
 800cb42:	4b15      	ldr	r3, [pc, #84]	; (800cb98 <HAL_OPAMP_MspInit+0x78>)
 800cb44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb46:	4a14      	ldr	r2, [pc, #80]	; (800cb98 <HAL_OPAMP_MspInit+0x78>)
 800cb48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cb4c:	6593      	str	r3, [r2, #88]	; 0x58
 800cb4e:	4b12      	ldr	r3, [pc, #72]	; (800cb98 <HAL_OPAMP_MspInit+0x78>)
 800cb50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb52:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cb56:	613b      	str	r3, [r7, #16]
 800cb58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cb5a:	4b0f      	ldr	r3, [pc, #60]	; (800cb98 <HAL_OPAMP_MspInit+0x78>)
 800cb5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb5e:	4a0e      	ldr	r2, [pc, #56]	; (800cb98 <HAL_OPAMP_MspInit+0x78>)
 800cb60:	f043 0301 	orr.w	r3, r3, #1
 800cb64:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cb66:	4b0c      	ldr	r3, [pc, #48]	; (800cb98 <HAL_OPAMP_MspInit+0x78>)
 800cb68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb6a:	f003 0301 	and.w	r3, r3, #1
 800cb6e:	60fb      	str	r3, [r7, #12]
 800cb70:	68fb      	ldr	r3, [r7, #12]
    /**OPAMP1 GPIO Configuration
    PA0     ------> OPAMP1_VINP
    PA1     ------> OPAMP1_VINM
    PA3     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = OpAmp1_INP_Pin|OpAmp1_INM_Pin|OpAmp1_OUT_Pin;
 800cb72:	230b      	movs	r3, #11
 800cb74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800cb76:	2303      	movs	r3, #3
 800cb78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cb7e:	f107 0314 	add.w	r3, r7, #20
 800cb82:	4619      	mov	r1, r3
 800cb84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800cb88:	f7f5 f9c4 	bl	8001f14 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }

}
 800cb8c:	bf00      	nop
 800cb8e:	3728      	adds	r7, #40	; 0x28
 800cb90:	46bd      	mov	sp, r7
 800cb92:	bd80      	pop	{r7, pc}
 800cb94:	40007800 	.word	0x40007800
 800cb98:	40021000 	.word	0x40021000

0800cb9c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b0ac      	sub	sp, #176	; 0xb0
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cba4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800cba8:	2200      	movs	r2, #0
 800cbaa:	601a      	str	r2, [r3, #0]
 800cbac:	605a      	str	r2, [r3, #4]
 800cbae:	609a      	str	r2, [r3, #8]
 800cbb0:	60da      	str	r2, [r3, #12]
 800cbb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800cbb4:	f107 0314 	add.w	r3, r7, #20
 800cbb8:	2288      	movs	r2, #136	; 0x88
 800cbba:	2100      	movs	r1, #0
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	f000 fdbb 	bl	800d738 <memset>
  if(hsd->Instance==SDMMC1)
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	4a33      	ldr	r2, [pc, #204]	; (800cc94 <HAL_SD_MspInit+0xf8>)
 800cbc8:	4293      	cmp	r3, r2
 800cbca:	d15f      	bne.n	800cc8c <HAL_SD_MspInit+0xf0>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 800cbcc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cbd0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLL;
 800cbd2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cbd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800cbda:	f107 0314 	add.w	r3, r7, #20
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f7f8 f864 	bl	8004cac <HAL_RCCEx_PeriphCLKConfig>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d001      	beq.n	800cbee <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 800cbea:	f7ff fca7 	bl	800c53c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800cbee:	4b2a      	ldr	r3, [pc, #168]	; (800cc98 <HAL_SD_MspInit+0xfc>)
 800cbf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cbf2:	4a29      	ldr	r2, [pc, #164]	; (800cc98 <HAL_SD_MspInit+0xfc>)
 800cbf4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800cbf8:	6613      	str	r3, [r2, #96]	; 0x60
 800cbfa:	4b27      	ldr	r3, [pc, #156]	; (800cc98 <HAL_SD_MspInit+0xfc>)
 800cbfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cbfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cc02:	613b      	str	r3, [r7, #16]
 800cc04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cc06:	4b24      	ldr	r3, [pc, #144]	; (800cc98 <HAL_SD_MspInit+0xfc>)
 800cc08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc0a:	4a23      	ldr	r2, [pc, #140]	; (800cc98 <HAL_SD_MspInit+0xfc>)
 800cc0c:	f043 0304 	orr.w	r3, r3, #4
 800cc10:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cc12:	4b21      	ldr	r3, [pc, #132]	; (800cc98 <HAL_SD_MspInit+0xfc>)
 800cc14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc16:	f003 0304 	and.w	r3, r3, #4
 800cc1a:	60fb      	str	r3, [r7, #12]
 800cc1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800cc1e:	4b1e      	ldr	r3, [pc, #120]	; (800cc98 <HAL_SD_MspInit+0xfc>)
 800cc20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc22:	4a1d      	ldr	r2, [pc, #116]	; (800cc98 <HAL_SD_MspInit+0xfc>)
 800cc24:	f043 0308 	orr.w	r3, r3, #8
 800cc28:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cc2a:	4b1b      	ldr	r3, [pc, #108]	; (800cc98 <HAL_SD_MspInit+0xfc>)
 800cc2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc2e:	f003 0308 	and.w	r3, r3, #8
 800cc32:	60bb      	str	r3, [r7, #8]
 800cc34:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = uSD_D0_Pin|uSD_D1_Pin|uSD_D2_Pin|uSD_D3_Pin
 800cc36:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800cc3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                          |uSD_CLK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc3e:	2302      	movs	r3, #2
 800cc40:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc44:	2300      	movs	r3, #0
 800cc46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cc4a:	2303      	movs	r3, #3
 800cc4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800cc50:	230c      	movs	r3, #12
 800cc52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cc56:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800cc5a:	4619      	mov	r1, r3
 800cc5c:	480f      	ldr	r0, [pc, #60]	; (800cc9c <HAL_SD_MspInit+0x100>)
 800cc5e:	f7f5 f959 	bl	8001f14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 800cc62:	2304      	movs	r3, #4
 800cc64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc68:	2302      	movs	r3, #2
 800cc6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cc74:	2303      	movs	r3, #3
 800cc76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800cc7a:	230c      	movs	r3, #12
 800cc7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 800cc80:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800cc84:	4619      	mov	r1, r3
 800cc86:	4806      	ldr	r0, [pc, #24]	; (800cca0 <HAL_SD_MspInit+0x104>)
 800cc88:	f7f5 f944 	bl	8001f14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800cc8c:	bf00      	nop
 800cc8e:	37b0      	adds	r7, #176	; 0xb0
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}
 800cc94:	40012800 	.word	0x40012800
 800cc98:	40021000 	.word	0x40021000
 800cc9c:	48000800 	.word	0x48000800
 800cca0:	48000c00 	.word	0x48000c00

0800cca4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b08a      	sub	sp, #40	; 0x28
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ccac:	f107 0314 	add.w	r3, r7, #20
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	601a      	str	r2, [r3, #0]
 800ccb4:	605a      	str	r2, [r3, #4]
 800ccb6:	609a      	str	r2, [r3, #8]
 800ccb8:	60da      	str	r2, [r3, #12]
 800ccba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	4a17      	ldr	r2, [pc, #92]	; (800cd20 <HAL_SPI_MspInit+0x7c>)
 800ccc2:	4293      	cmp	r3, r2
 800ccc4:	d128      	bne.n	800cd18 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800ccc6:	4b17      	ldr	r3, [pc, #92]	; (800cd24 <HAL_SPI_MspInit+0x80>)
 800ccc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccca:	4a16      	ldr	r2, [pc, #88]	; (800cd24 <HAL_SPI_MspInit+0x80>)
 800cccc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ccd0:	6593      	str	r3, [r2, #88]	; 0x58
 800ccd2:	4b14      	ldr	r3, [pc, #80]	; (800cd24 <HAL_SPI_MspInit+0x80>)
 800ccd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ccda:	613b      	str	r3, [r7, #16]
 800ccdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ccde:	4b11      	ldr	r3, [pc, #68]	; (800cd24 <HAL_SPI_MspInit+0x80>)
 800cce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cce2:	4a10      	ldr	r2, [pc, #64]	; (800cd24 <HAL_SPI_MspInit+0x80>)
 800cce4:	f043 0302 	orr.w	r3, r3, #2
 800cce8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ccea:	4b0e      	ldr	r3, [pc, #56]	; (800cd24 <HAL_SPI_MspInit+0x80>)
 800ccec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ccee:	f003 0302 	and.w	r3, r3, #2
 800ccf2:	60fb      	str	r3, [r7, #12]
 800ccf4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = NFC_SCK_Pin|NFC_MISO_Pin|NFC_MOSI_Pin;
 800ccf6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800ccfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ccfc:	2302      	movs	r3, #2
 800ccfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd00:	2300      	movs	r3, #0
 800cd02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd04:	2303      	movs	r3, #3
 800cd06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800cd08:	2305      	movs	r3, #5
 800cd0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cd0c:	f107 0314 	add.w	r3, r7, #20
 800cd10:	4619      	mov	r1, r3
 800cd12:	4805      	ldr	r0, [pc, #20]	; (800cd28 <HAL_SPI_MspInit+0x84>)
 800cd14:	f7f5 f8fe 	bl	8001f14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800cd18:	bf00      	nop
 800cd1a:	3728      	adds	r7, #40	; 0x28
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}
 800cd20:	40003800 	.word	0x40003800
 800cd24:	40021000 	.word	0x40021000
 800cd28:	48000400 	.word	0x48000400

0800cd2c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b086      	sub	sp, #24
 800cd30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800cd32:	1d3b      	adds	r3, r7, #4
 800cd34:	2200      	movs	r2, #0
 800cd36:	601a      	str	r2, [r3, #0]
 800cd38:	605a      	str	r2, [r3, #4]
 800cd3a:	609a      	str	r2, [r3, #8]
 800cd3c:	60da      	str	r2, [r3, #12]
 800cd3e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800cd40:	4b2b      	ldr	r3, [pc, #172]	; (800cdf0 <HAL_FMC_MspInit+0xc4>)
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d14f      	bne.n	800cde8 <HAL_FMC_MspInit+0xbc>
    return;
  }
  FMC_Initialized = 1;
 800cd48:	4b29      	ldr	r3, [pc, #164]	; (800cdf0 <HAL_FMC_MspInit+0xc4>)
 800cd4a:	2201      	movs	r2, #1
 800cd4c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800cd4e:	4b29      	ldr	r3, [pc, #164]	; (800cdf4 <HAL_FMC_MspInit+0xc8>)
 800cd50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd52:	4a28      	ldr	r2, [pc, #160]	; (800cdf4 <HAL_FMC_MspInit+0xc8>)
 800cd54:	f043 0301 	orr.w	r3, r3, #1
 800cd58:	6513      	str	r3, [r2, #80]	; 0x50
 800cd5a:	4b26      	ldr	r3, [pc, #152]	; (800cdf4 <HAL_FMC_MspInit+0xc8>)
 800cd5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd5e:	f003 0301 	and.w	r3, r3, #1
 800cd62:	603b      	str	r3, [r7, #0]
 800cd64:	683b      	ldr	r3, [r7, #0]
  PG9   ------> FMC_NE2
  PG10   ------> FMC_NE3
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A23_Pin|A19_Pin|A20_Pin|A21_Pin
 800cd66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cd6a:	607b      	str	r3, [r7, #4]
                          |A22_Pin|D4_Pin|D5_Pin|D6_Pin
                          |D7_Pin|D8_Pin|D9_Pin|D10_Pin
                          |D11_Pin|D12_Pin|FMC_NBL0_Pin|FMC_NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd6c:	2302      	movs	r3, #2
 800cd6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd70:	2300      	movs	r3, #0
 800cd72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd74:	2303      	movs	r3, #3
 800cd76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800cd78:	230c      	movs	r3, #12
 800cd7a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800cd7c:	1d3b      	adds	r3, r7, #4
 800cd7e:	4619      	mov	r1, r3
 800cd80:	481d      	ldr	r0, [pc, #116]	; (800cdf8 <HAL_FMC_MspInit+0xcc>)
 800cd82:	f7f5 f8c7 	bl	8001f14 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800cd86:	f24f 033f 	movw	r3, #61503	; 0xf03f
 800cd8a:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|A6_Pin|A7_Pin
                          |A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd8c:	2302      	movs	r3, #2
 800cd8e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd90:	2300      	movs	r3, #0
 800cd92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd94:	2303      	movs	r3, #3
 800cd96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800cd98:	230c      	movs	r3, #12
 800cd9a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800cd9c:	1d3b      	adds	r3, r7, #4
 800cd9e:	4619      	mov	r1, r3
 800cda0:	4816      	ldr	r0, [pc, #88]	; (800cdfc <HAL_FMC_MspInit+0xd0>)
 800cda2:	f7f5 f8b7 	bl	8001f14 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|A12_Pin|A13_Pin
 800cda6:	f240 633f 	movw	r3, #1599	; 0x63f
 800cdaa:	607b      	str	r3, [r7, #4]
                          |A14_Pin|A15_Pin|FMC_NE2_Pin|LCD_NE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cdac:	2302      	movs	r3, #2
 800cdae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cdb4:	2303      	movs	r3, #3
 800cdb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800cdb8:	230c      	movs	r3, #12
 800cdba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800cdbc:	1d3b      	adds	r3, r7, #4
 800cdbe:	4619      	mov	r1, r3
 800cdc0:	480f      	ldr	r0, [pc, #60]	; (800ce00 <HAL_FMC_MspInit+0xd4>)
 800cdc2:	f7f5 f8a7 	bl	8001f14 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|A16_Pin
 800cdc6:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 800cdca:	607b      	str	r3, [r7, #4]
                          |A17_Pin|A18_Pin|D0_Pin|D1_Pin
                          |D2_Pin|D3_Pin|FMC_NOE_Pin|FMC_NWE_Pin
                          |FMC_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cdcc:	2302      	movs	r3, #2
 800cdce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cdd4:	2303      	movs	r3, #3
 800cdd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800cdd8:	230c      	movs	r3, #12
 800cdda:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800cddc:	1d3b      	adds	r3, r7, #4
 800cdde:	4619      	mov	r1, r3
 800cde0:	4808      	ldr	r0, [pc, #32]	; (800ce04 <HAL_FMC_MspInit+0xd8>)
 800cde2:	f7f5 f897 	bl	8001f14 <HAL_GPIO_Init>
 800cde6:	e000      	b.n	800cdea <HAL_FMC_MspInit+0xbe>
    return;
 800cde8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800cdea:	3718      	adds	r7, #24
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}
 800cdf0:	20000620 	.word	0x20000620
 800cdf4:	40021000 	.word	0x40021000
 800cdf8:	48001000 	.word	0x48001000
 800cdfc:	48001400 	.word	0x48001400
 800ce00:	48001800 	.word	0x48001800
 800ce04:	48000c00 	.word	0x48000c00

0800ce08 <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* hnor){
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b082      	sub	sp, #8
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FMC_MspInit();
 800ce10:	f7ff ff8c 	bl	800cd2c <HAL_FMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 800ce14:	bf00      	nop
 800ce16:	3708      	adds	r7, #8
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bd80      	pop	{r7, pc}

0800ce1c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b082      	sub	sp, #8
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800ce24:	f7ff ff82 	bl	800cd2c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800ce28:	bf00      	nop
 800ce2a:	3708      	adds	r7, #8
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}

0800ce30 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b08a      	sub	sp, #40	; 0x28
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	4a2b      	ldr	r2, [pc, #172]	; (800ceec <HAL_SAI_MspInit+0xbc>)
 800ce3e:	4293      	cmp	r3, r2
 800ce40:	d124      	bne.n	800ce8c <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 800ce42:	4b2b      	ldr	r3, [pc, #172]	; (800cef0 <HAL_SAI_MspInit+0xc0>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d10b      	bne.n	800ce62 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800ce4a:	4b2a      	ldr	r3, [pc, #168]	; (800cef4 <HAL_SAI_MspInit+0xc4>)
 800ce4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce4e:	4a29      	ldr	r2, [pc, #164]	; (800cef4 <HAL_SAI_MspInit+0xc4>)
 800ce50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ce54:	6613      	str	r3, [r2, #96]	; 0x60
 800ce56:	4b27      	ldr	r3, [pc, #156]	; (800cef4 <HAL_SAI_MspInit+0xc4>)
 800ce58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ce5e:	613b      	str	r3, [r7, #16]
 800ce60:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 800ce62:	4b23      	ldr	r3, [pc, #140]	; (800cef0 <HAL_SAI_MspInit+0xc0>)
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	3301      	adds	r3, #1
 800ce68:	4a21      	ldr	r2, [pc, #132]	; (800cef0 <HAL_SAI_MspInit+0xc0>)
 800ce6a:	6013      	str	r3, [r2, #0]

    /**SAI1_A_Block_A GPIO Configuration
    PD6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = SAI1_SDA_Pin;
 800ce6c:	2340      	movs	r3, #64	; 0x40
 800ce6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ce70:	2302      	movs	r3, #2
 800ce72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce74:	2300      	movs	r3, #0
 800ce76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ce78:	2300      	movs	r3, #0
 800ce7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800ce7c:	230d      	movs	r3, #13
 800ce7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_SDA_GPIO_Port, &GPIO_InitStruct);
 800ce80:	f107 0314 	add.w	r3, r7, #20
 800ce84:	4619      	mov	r1, r3
 800ce86:	481c      	ldr	r0, [pc, #112]	; (800cef8 <HAL_SAI_MspInit+0xc8>)
 800ce88:	f7f5 f844 	bl	8001f14 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	4a1a      	ldr	r2, [pc, #104]	; (800cefc <HAL_SAI_MspInit+0xcc>)
 800ce92:	4293      	cmp	r3, r2
 800ce94:	d125      	bne.n	800cee2 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 800ce96:	4b16      	ldr	r3, [pc, #88]	; (800cef0 <HAL_SAI_MspInit+0xc0>)
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d10b      	bne.n	800ceb6 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800ce9e:	4b15      	ldr	r3, [pc, #84]	; (800cef4 <HAL_SAI_MspInit+0xc4>)
 800cea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cea2:	4a14      	ldr	r2, [pc, #80]	; (800cef4 <HAL_SAI_MspInit+0xc4>)
 800cea4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cea8:	6613      	str	r3, [r2, #96]	; 0x60
 800ceaa:	4b12      	ldr	r3, [pc, #72]	; (800cef4 <HAL_SAI_MspInit+0xc4>)
 800ceac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ceae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ceb2:	60fb      	str	r3, [r7, #12]
 800ceb4:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 800ceb6:	4b0e      	ldr	r3, [pc, #56]	; (800cef0 <HAL_SAI_MspInit+0xc0>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	3301      	adds	r3, #1
 800cebc:	4a0c      	ldr	r2, [pc, #48]	; (800cef0 <HAL_SAI_MspInit+0xc0>)
 800cebe:	6013      	str	r3, [r2, #0]
    PF6     ------> SAI1_SD_B
    PF7     ------> SAI1_MCLK_B
    PF8     ------> SAI1_SCK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin|SAI1_MCKB_Pin|SAI1_SCKB_Pin|SAI1_FSB_Pin;
 800cec0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800cec4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cec6:	2302      	movs	r3, #2
 800cec8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ceca:	2300      	movs	r3, #0
 800cecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cece:	2300      	movs	r3, #0
 800ced0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800ced2:	230d      	movs	r3, #13
 800ced4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800ced6:	f107 0314 	add.w	r3, r7, #20
 800ceda:	4619      	mov	r1, r3
 800cedc:	4808      	ldr	r0, [pc, #32]	; (800cf00 <HAL_SAI_MspInit+0xd0>)
 800cede:	f7f5 f819 	bl	8001f14 <HAL_GPIO_Init>

    }
}
 800cee2:	bf00      	nop
 800cee4:	3728      	adds	r7, #40	; 0x28
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}
 800ceea:	bf00      	nop
 800ceec:	40015404 	.word	0x40015404
 800cef0:	20000624 	.word	0x20000624
 800cef4:	40021000 	.word	0x40021000
 800cef8:	48000c00 	.word	0x48000c00
 800cefc:	40015424 	.word	0x40015424
 800cf00:	48001400 	.word	0x48001400

0800cf04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800cf04:	b480      	push	{r7}
 800cf06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800cf08:	e7fe      	b.n	800cf08 <NMI_Handler+0x4>

0800cf0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800cf0a:	b480      	push	{r7}
 800cf0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800cf0e:	e7fe      	b.n	800cf0e <HardFault_Handler+0x4>

0800cf10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800cf10:	b480      	push	{r7}
 800cf12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800cf14:	e7fe      	b.n	800cf14 <MemManage_Handler+0x4>

0800cf16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800cf16:	b480      	push	{r7}
 800cf18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800cf1a:	e7fe      	b.n	800cf1a <BusFault_Handler+0x4>

0800cf1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800cf1c:	b480      	push	{r7}
 800cf1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800cf20:	e7fe      	b.n	800cf20 <UsageFault_Handler+0x4>

0800cf22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800cf22:	b480      	push	{r7}
 800cf24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800cf26:	bf00      	nop
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2e:	4770      	bx	lr

0800cf30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800cf30:	b480      	push	{r7}
 800cf32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800cf34:	bf00      	nop
 800cf36:	46bd      	mov	sp, r7
 800cf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3c:	4770      	bx	lr

0800cf3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800cf3e:	b480      	push	{r7}
 800cf40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800cf42:	bf00      	nop
 800cf44:	46bd      	mov	sp, r7
 800cf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4a:	4770      	bx	lr

0800cf4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800cf50:	f7f3 fb10 	bl	8000574 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800cf54:	bf00      	nop
 800cf56:	bd80      	pop	{r7, pc}

0800cf58 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800cf5c:	4802      	ldr	r0, [pc, #8]	; (800cf68 <OTG_FS_IRQHandler+0x10>)
 800cf5e:	f7f5 fc01 	bl	8002764 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800cf62:	bf00      	nop
 800cf64:	bd80      	pop	{r7, pc}
 800cf66:	bf00      	nop
 800cf68:	20000a08 	.word	0x20000a08

0800cf6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b086      	sub	sp, #24
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800cf74:	4a14      	ldr	r2, [pc, #80]	; (800cfc8 <_sbrk+0x5c>)
 800cf76:	4b15      	ldr	r3, [pc, #84]	; (800cfcc <_sbrk+0x60>)
 800cf78:	1ad3      	subs	r3, r2, r3
 800cf7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800cf7c:	697b      	ldr	r3, [r7, #20]
 800cf7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800cf80:	4b13      	ldr	r3, [pc, #76]	; (800cfd0 <_sbrk+0x64>)
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d102      	bne.n	800cf8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800cf88:	4b11      	ldr	r3, [pc, #68]	; (800cfd0 <_sbrk+0x64>)
 800cf8a:	4a12      	ldr	r2, [pc, #72]	; (800cfd4 <_sbrk+0x68>)
 800cf8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800cf8e:	4b10      	ldr	r3, [pc, #64]	; (800cfd0 <_sbrk+0x64>)
 800cf90:	681a      	ldr	r2, [r3, #0]
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	4413      	add	r3, r2
 800cf96:	693a      	ldr	r2, [r7, #16]
 800cf98:	429a      	cmp	r2, r3
 800cf9a:	d207      	bcs.n	800cfac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800cf9c:	f000 fb92 	bl	800d6c4 <__errno>
 800cfa0:	4603      	mov	r3, r0
 800cfa2:	220c      	movs	r2, #12
 800cfa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800cfa6:	f04f 33ff 	mov.w	r3, #4294967295
 800cfaa:	e009      	b.n	800cfc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800cfac:	4b08      	ldr	r3, [pc, #32]	; (800cfd0 <_sbrk+0x64>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800cfb2:	4b07      	ldr	r3, [pc, #28]	; (800cfd0 <_sbrk+0x64>)
 800cfb4:	681a      	ldr	r2, [r3, #0]
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	4413      	add	r3, r2
 800cfba:	4a05      	ldr	r2, [pc, #20]	; (800cfd0 <_sbrk+0x64>)
 800cfbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800cfbe:	68fb      	ldr	r3, [r7, #12]
}
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	3718      	adds	r7, #24
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	bd80      	pop	{r7, pc}
 800cfc8:	20018000 	.word	0x20018000
 800cfcc:	00000400 	.word	0x00000400
 800cfd0:	20000628 	.word	0x20000628
 800cfd4:	20000d20 	.word	0x20000d20

0800cfd8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800cfd8:	b480      	push	{r7}
 800cfda:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800cfdc:	4b06      	ldr	r3, [pc, #24]	; (800cff8 <SystemInit+0x20>)
 800cfde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cfe2:	4a05      	ldr	r2, [pc, #20]	; (800cff8 <SystemInit+0x20>)
 800cfe4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cfe8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800cfec:	bf00      	nop
 800cfee:	46bd      	mov	sp, r7
 800cff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff4:	4770      	bx	lr
 800cff6:	bf00      	nop
 800cff8:	e000ed00 	.word	0xe000ed00

0800cffc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800d000:	2201      	movs	r2, #1
 800d002:	490e      	ldr	r1, [pc, #56]	; (800d03c <MX_USB_HOST_Init+0x40>)
 800d004:	480e      	ldr	r0, [pc, #56]	; (800d040 <MX_USB_HOST_Init+0x44>)
 800d006:	f7fd f9c5 	bl	800a394 <USBH_Init>
 800d00a:	4603      	mov	r3, r0
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d001      	beq.n	800d014 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800d010:	f7ff fa94 	bl	800c53c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800d014:	490b      	ldr	r1, [pc, #44]	; (800d044 <MX_USB_HOST_Init+0x48>)
 800d016:	480a      	ldr	r0, [pc, #40]	; (800d040 <MX_USB_HOST_Init+0x44>)
 800d018:	f7fd fa4a 	bl	800a4b0 <USBH_RegisterClass>
 800d01c:	4603      	mov	r3, r0
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d001      	beq.n	800d026 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800d022:	f7ff fa8b 	bl	800c53c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800d026:	4806      	ldr	r0, [pc, #24]	; (800d040 <MX_USB_HOST_Init+0x44>)
 800d028:	f7fd face 	bl	800a5c8 <USBH_Start>
 800d02c:	4603      	mov	r3, r0
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d001      	beq.n	800d036 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800d032:	f7ff fa83 	bl	800c53c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800d036:	bf00      	nop
 800d038:	bd80      	pop	{r7, pc}
 800d03a:	bf00      	nop
 800d03c:	0800d05d 	.word	0x0800d05d
 800d040:	2000062c 	.word	0x2000062c
 800d044:	20000008 	.word	0x20000008

0800d048 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800d04c:	4802      	ldr	r0, [pc, #8]	; (800d058 <MX_USB_HOST_Process+0x10>)
 800d04e:	f7fd facb 	bl	800a5e8 <USBH_Process>
}
 800d052:	bf00      	nop
 800d054:	bd80      	pop	{r7, pc}
 800d056:	bf00      	nop
 800d058:	2000062c 	.word	0x2000062c

0800d05c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800d05c:	b480      	push	{r7}
 800d05e:	b083      	sub	sp, #12
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
 800d064:	460b      	mov	r3, r1
 800d066:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800d068:	78fb      	ldrb	r3, [r7, #3]
 800d06a:	3b01      	subs	r3, #1
 800d06c:	2b04      	cmp	r3, #4
 800d06e:	d819      	bhi.n	800d0a4 <USBH_UserProcess+0x48>
 800d070:	a201      	add	r2, pc, #4	; (adr r2, 800d078 <USBH_UserProcess+0x1c>)
 800d072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d076:	bf00      	nop
 800d078:	0800d0a5 	.word	0x0800d0a5
 800d07c:	0800d095 	.word	0x0800d095
 800d080:	0800d0a5 	.word	0x0800d0a5
 800d084:	0800d09d 	.word	0x0800d09d
 800d088:	0800d08d 	.word	0x0800d08d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800d08c:	4b09      	ldr	r3, [pc, #36]	; (800d0b4 <USBH_UserProcess+0x58>)
 800d08e:	2203      	movs	r2, #3
 800d090:	701a      	strb	r2, [r3, #0]
  break;
 800d092:	e008      	b.n	800d0a6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800d094:	4b07      	ldr	r3, [pc, #28]	; (800d0b4 <USBH_UserProcess+0x58>)
 800d096:	2202      	movs	r2, #2
 800d098:	701a      	strb	r2, [r3, #0]
  break;
 800d09a:	e004      	b.n	800d0a6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800d09c:	4b05      	ldr	r3, [pc, #20]	; (800d0b4 <USBH_UserProcess+0x58>)
 800d09e:	2201      	movs	r2, #1
 800d0a0:	701a      	strb	r2, [r3, #0]
  break;
 800d0a2:	e000      	b.n	800d0a6 <USBH_UserProcess+0x4a>

  default:
  break;
 800d0a4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800d0a6:	bf00      	nop
 800d0a8:	370c      	adds	r7, #12
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b0:	4770      	bx	lr
 800d0b2:	bf00      	nop
 800d0b4:	20000a04 	.word	0x20000a04

0800d0b8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b0ac      	sub	sp, #176	; 0xb0
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d0c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	601a      	str	r2, [r3, #0]
 800d0c8:	605a      	str	r2, [r3, #4]
 800d0ca:	609a      	str	r2, [r3, #8]
 800d0cc:	60da      	str	r2, [r3, #12]
 800d0ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d0d0:	f107 0314 	add.w	r3, r7, #20
 800d0d4:	2288      	movs	r2, #136	; 0x88
 800d0d6:	2100      	movs	r1, #0
 800d0d8:	4618      	mov	r0, r3
 800d0da:	f000 fb2d 	bl	800d738 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d0e6:	d175      	bne.n	800d1d4 <HAL_HCD_MspInit+0x11c>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d0e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d0ec:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800d0ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d0f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d0f6:	f107 0314 	add.w	r3, r7, #20
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f7f7 fdd6 	bl	8004cac <HAL_RCCEx_PeriphCLKConfig>
 800d100:	4603      	mov	r3, r0
 800d102:	2b00      	cmp	r3, #0
 800d104:	d001      	beq.n	800d10a <HAL_HCD_MspInit+0x52>
    {
      Error_Handler();
 800d106:	f7ff fa19 	bl	800c53c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d10a:	4b34      	ldr	r3, [pc, #208]	; (800d1dc <HAL_HCD_MspInit+0x124>)
 800d10c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d10e:	4a33      	ldr	r2, [pc, #204]	; (800d1dc <HAL_HCD_MspInit+0x124>)
 800d110:	f043 0301 	orr.w	r3, r3, #1
 800d114:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d116:	4b31      	ldr	r3, [pc, #196]	; (800d1dc <HAL_HCD_MspInit+0x124>)
 800d118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d11a:	f003 0301 	and.w	r3, r3, #1
 800d11e:	613b      	str	r3, [r7, #16]
 800d120:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USBOTG_VBUS_Pin;
 800d122:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d126:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d12a:	2300      	movs	r3, #0
 800d12c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d130:	2300      	movs	r3, #0
 800d132:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USBOTG_VBUS_GPIO_Port, &GPIO_InitStruct);
 800d136:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800d13a:	4619      	mov	r1, r3
 800d13c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d140:	f7f4 fee8 	bl	8001f14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USBOTG_ID_Pin|USBOTG_DM_Pin|USBOTG_DP_Pin;
 800d144:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800d148:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d14c:	2302      	movs	r3, #2
 800d14e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d152:	2300      	movs	r3, #0
 800d154:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d158:	2303      	movs	r3, #3
 800d15a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d15e:	230a      	movs	r3, #10
 800d160:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d164:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800d168:	4619      	mov	r1, r3
 800d16a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d16e:	f7f4 fed1 	bl	8001f14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d172:	4b1a      	ldr	r3, [pc, #104]	; (800d1dc <HAL_HCD_MspInit+0x124>)
 800d174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d176:	4a19      	ldr	r2, [pc, #100]	; (800d1dc <HAL_HCD_MspInit+0x124>)
 800d178:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d17c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d17e:	4b17      	ldr	r3, [pc, #92]	; (800d1dc <HAL_HCD_MspInit+0x124>)
 800d180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d182:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d186:	60fb      	str	r3, [r7, #12]
 800d188:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d18a:	4b14      	ldr	r3, [pc, #80]	; (800d1dc <HAL_HCD_MspInit+0x124>)
 800d18c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d18e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d192:	2b00      	cmp	r3, #0
 800d194:	d114      	bne.n	800d1c0 <HAL_HCD_MspInit+0x108>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d196:	4b11      	ldr	r3, [pc, #68]	; (800d1dc <HAL_HCD_MspInit+0x124>)
 800d198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d19a:	4a10      	ldr	r2, [pc, #64]	; (800d1dc <HAL_HCD_MspInit+0x124>)
 800d19c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d1a0:	6593      	str	r3, [r2, #88]	; 0x58
 800d1a2:	4b0e      	ldr	r3, [pc, #56]	; (800d1dc <HAL_HCD_MspInit+0x124>)
 800d1a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d1aa:	60bb      	str	r3, [r7, #8]
 800d1ac:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800d1ae:	f7f6 ff5d 	bl	800406c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800d1b2:	4b0a      	ldr	r3, [pc, #40]	; (800d1dc <HAL_HCD_MspInit+0x124>)
 800d1b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1b6:	4a09      	ldr	r2, [pc, #36]	; (800d1dc <HAL_HCD_MspInit+0x124>)
 800d1b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d1bc:	6593      	str	r3, [r2, #88]	; 0x58
 800d1be:	e001      	b.n	800d1c4 <HAL_HCD_MspInit+0x10c>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800d1c0:	f7f6 ff54 	bl	800406c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	2100      	movs	r1, #0
 800d1c8:	2043      	movs	r0, #67	; 0x43
 800d1ca:	f7f4 fd30 	bl	8001c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d1ce:	2043      	movs	r0, #67	; 0x43
 800d1d0:	f7f4 fd49 	bl	8001c66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d1d4:	bf00      	nop
 800d1d6:	37b0      	adds	r7, #176	; 0xb0
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	bd80      	pop	{r7, pc}
 800d1dc:	40021000 	.word	0x40021000

0800d1e0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b082      	sub	sp, #8
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	f7fd fdcd 	bl	800ad8e <USBH_LL_IncTimer>
}
 800d1f4:	bf00      	nop
 800d1f6:	3708      	adds	r7, #8
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	bd80      	pop	{r7, pc}

0800d1fc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b082      	sub	sp, #8
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d20a:	4618      	mov	r0, r3
 800d20c:	f7fd fe05 	bl	800ae1a <USBH_LL_Connect>
}
 800d210:	bf00      	nop
 800d212:	3708      	adds	r7, #8
 800d214:	46bd      	mov	sp, r7
 800d216:	bd80      	pop	{r7, pc}

0800d218 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b082      	sub	sp, #8
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d226:	4618      	mov	r0, r3
 800d228:	f7fd fe0e 	bl	800ae48 <USBH_LL_Disconnect>
}
 800d22c:	bf00      	nop
 800d22e:	3708      	adds	r7, #8
 800d230:	46bd      	mov	sp, r7
 800d232:	bd80      	pop	{r7, pc}

0800d234 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800d234:	b480      	push	{r7}
 800d236:	b083      	sub	sp, #12
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
 800d23c:	460b      	mov	r3, r1
 800d23e:	70fb      	strb	r3, [r7, #3]
 800d240:	4613      	mov	r3, r2
 800d242:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800d244:	bf00      	nop
 800d246:	370c      	adds	r7, #12
 800d248:	46bd      	mov	sp, r7
 800d24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24e:	4770      	bx	lr

0800d250 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b082      	sub	sp, #8
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d25e:	4618      	mov	r0, r3
 800d260:	f7fd fdbf 	bl	800ade2 <USBH_LL_PortEnabled>
}
 800d264:	bf00      	nop
 800d266:	3708      	adds	r7, #8
 800d268:	46bd      	mov	sp, r7
 800d26a:	bd80      	pop	{r7, pc}

0800d26c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b082      	sub	sp, #8
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d27a:	4618      	mov	r0, r3
 800d27c:	f7fd fdbf 	bl	800adfe <USBH_LL_PortDisabled>
}
 800d280:	bf00      	nop
 800d282:	3708      	adds	r7, #8
 800d284:	46bd      	mov	sp, r7
 800d286:	bd80      	pop	{r7, pc}

0800d288 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b082      	sub	sp, #8
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800d296:	2b01      	cmp	r3, #1
 800d298:	d12a      	bne.n	800d2f0 <USBH_LL_Init+0x68>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800d29a:	4a18      	ldr	r2, [pc, #96]	; (800d2fc <USBH_LL_Init+0x74>)
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	4a15      	ldr	r2, [pc, #84]	; (800d2fc <USBH_LL_Init+0x74>)
 800d2a6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d2aa:	4b14      	ldr	r3, [pc, #80]	; (800d2fc <USBH_LL_Init+0x74>)
 800d2ac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d2b0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800d2b2:	4b12      	ldr	r3, [pc, #72]	; (800d2fc <USBH_LL_Init+0x74>)
 800d2b4:	2208      	movs	r2, #8
 800d2b6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800d2b8:	4b10      	ldr	r3, [pc, #64]	; (800d2fc <USBH_LL_Init+0x74>)
 800d2ba:	2201      	movs	r2, #1
 800d2bc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d2be:	4b0f      	ldr	r3, [pc, #60]	; (800d2fc <USBH_LL_Init+0x74>)
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800d2c4:	4b0d      	ldr	r3, [pc, #52]	; (800d2fc <USBH_LL_Init+0x74>)
 800d2c6:	2202      	movs	r2, #2
 800d2c8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d2ca:	4b0c      	ldr	r3, [pc, #48]	; (800d2fc <USBH_LL_Init+0x74>)
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800d2d0:	480a      	ldr	r0, [pc, #40]	; (800d2fc <USBH_LL_Init+0x74>)
 800d2d2:	f7f4 ffe1 	bl	8002298 <HAL_HCD_Init>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d001      	beq.n	800d2e0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800d2dc:	f7ff f92e 	bl	800c53c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800d2e0:	4806      	ldr	r0, [pc, #24]	; (800d2fc <USBH_LL_Init+0x74>)
 800d2e2:	f7f5 fbc0 	bl	8002a66 <HAL_HCD_GetCurrentFrame>
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	4619      	mov	r1, r3
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f7fd fd40 	bl	800ad70 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800d2f0:	2300      	movs	r3, #0
}
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	3708      	adds	r7, #8
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}
 800d2fa:	bf00      	nop
 800d2fc:	20000a08 	.word	0x20000a08

0800d300 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b084      	sub	sp, #16
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d308:	2300      	movs	r3, #0
 800d30a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d30c:	2300      	movs	r3, #0
 800d30e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d316:	4618      	mov	r0, r3
 800d318:	f7f5 fb2f 	bl	800297a <HAL_HCD_Start>
 800d31c:	4603      	mov	r3, r0
 800d31e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d320:	7bfb      	ldrb	r3, [r7, #15]
 800d322:	4618      	mov	r0, r3
 800d324:	f000 f95c 	bl	800d5e0 <USBH_Get_USB_Status>
 800d328:	4603      	mov	r3, r0
 800d32a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d32c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d32e:	4618      	mov	r0, r3
 800d330:	3710      	adds	r7, #16
 800d332:	46bd      	mov	sp, r7
 800d334:	bd80      	pop	{r7, pc}

0800d336 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800d336:	b580      	push	{r7, lr}
 800d338:	b084      	sub	sp, #16
 800d33a:	af00      	add	r7, sp, #0
 800d33c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d33e:	2300      	movs	r3, #0
 800d340:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d342:	2300      	movs	r3, #0
 800d344:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d34c:	4618      	mov	r0, r3
 800d34e:	f7f5 fb37 	bl	80029c0 <HAL_HCD_Stop>
 800d352:	4603      	mov	r3, r0
 800d354:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d356:	7bfb      	ldrb	r3, [r7, #15]
 800d358:	4618      	mov	r0, r3
 800d35a:	f000 f941 	bl	800d5e0 <USBH_Get_USB_Status>
 800d35e:	4603      	mov	r3, r0
 800d360:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d362:	7bbb      	ldrb	r3, [r7, #14]
}
 800d364:	4618      	mov	r0, r3
 800d366:	3710      	adds	r7, #16
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd80      	pop	{r7, pc}

0800d36c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b084      	sub	sp, #16
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800d374:	2301      	movs	r3, #1
 800d376:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d37e:	4618      	mov	r0, r3
 800d380:	f7f5 fb7f 	bl	8002a82 <HAL_HCD_GetCurrentSpeed>
 800d384:	4603      	mov	r3, r0
 800d386:	2b02      	cmp	r3, #2
 800d388:	d00c      	beq.n	800d3a4 <USBH_LL_GetSpeed+0x38>
 800d38a:	2b02      	cmp	r3, #2
 800d38c:	d80d      	bhi.n	800d3aa <USBH_LL_GetSpeed+0x3e>
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d002      	beq.n	800d398 <USBH_LL_GetSpeed+0x2c>
 800d392:	2b01      	cmp	r3, #1
 800d394:	d003      	beq.n	800d39e <USBH_LL_GetSpeed+0x32>
 800d396:	e008      	b.n	800d3aa <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800d398:	2300      	movs	r3, #0
 800d39a:	73fb      	strb	r3, [r7, #15]
    break;
 800d39c:	e008      	b.n	800d3b0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800d39e:	2301      	movs	r3, #1
 800d3a0:	73fb      	strb	r3, [r7, #15]
    break;
 800d3a2:	e005      	b.n	800d3b0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800d3a4:	2302      	movs	r3, #2
 800d3a6:	73fb      	strb	r3, [r7, #15]
    break;
 800d3a8:	e002      	b.n	800d3b0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800d3aa:	2301      	movs	r3, #1
 800d3ac:	73fb      	strb	r3, [r7, #15]
    break;
 800d3ae:	bf00      	nop
  }
  return  speed;
 800d3b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	3710      	adds	r7, #16
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}

0800d3ba <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800d3ba:	b580      	push	{r7, lr}
 800d3bc:	b084      	sub	sp, #16
 800d3be:	af00      	add	r7, sp, #0
 800d3c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	f7f5 fb12 	bl	80029fa <HAL_HCD_ResetPort>
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d3da:	7bfb      	ldrb	r3, [r7, #15]
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f000 f8ff 	bl	800d5e0 <USBH_Get_USB_Status>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d3e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	3710      	adds	r7, #16
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	bd80      	pop	{r7, pc}

0800d3f0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b082      	sub	sp, #8
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
 800d3f8:	460b      	mov	r3, r1
 800d3fa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d402:	78fa      	ldrb	r2, [r7, #3]
 800d404:	4611      	mov	r1, r2
 800d406:	4618      	mov	r0, r3
 800d408:	f7f5 fb19 	bl	8002a3e <HAL_HCD_HC_GetXferCount>
 800d40c:	4603      	mov	r3, r0
}
 800d40e:	4618      	mov	r0, r3
 800d410:	3708      	adds	r7, #8
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}

0800d416 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d416:	b590      	push	{r4, r7, lr}
 800d418:	b089      	sub	sp, #36	; 0x24
 800d41a:	af04      	add	r7, sp, #16
 800d41c:	6078      	str	r0, [r7, #4]
 800d41e:	4608      	mov	r0, r1
 800d420:	4611      	mov	r1, r2
 800d422:	461a      	mov	r2, r3
 800d424:	4603      	mov	r3, r0
 800d426:	70fb      	strb	r3, [r7, #3]
 800d428:	460b      	mov	r3, r1
 800d42a:	70bb      	strb	r3, [r7, #2]
 800d42c:	4613      	mov	r3, r2
 800d42e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d430:	2300      	movs	r3, #0
 800d432:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d434:	2300      	movs	r3, #0
 800d436:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d43e:	787c      	ldrb	r4, [r7, #1]
 800d440:	78ba      	ldrb	r2, [r7, #2]
 800d442:	78f9      	ldrb	r1, [r7, #3]
 800d444:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d446:	9302      	str	r3, [sp, #8]
 800d448:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d44c:	9301      	str	r3, [sp, #4]
 800d44e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d452:	9300      	str	r3, [sp, #0]
 800d454:	4623      	mov	r3, r4
 800d456:	f7f4 ff81 	bl	800235c <HAL_HCD_HC_Init>
 800d45a:	4603      	mov	r3, r0
 800d45c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800d45e:	7bfb      	ldrb	r3, [r7, #15]
 800d460:	4618      	mov	r0, r3
 800d462:	f000 f8bd 	bl	800d5e0 <USBH_Get_USB_Status>
 800d466:	4603      	mov	r3, r0
 800d468:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d46a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d46c:	4618      	mov	r0, r3
 800d46e:	3714      	adds	r7, #20
 800d470:	46bd      	mov	sp, r7
 800d472:	bd90      	pop	{r4, r7, pc}

0800d474 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b084      	sub	sp, #16
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
 800d47c:	460b      	mov	r3, r1
 800d47e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d480:	2300      	movs	r3, #0
 800d482:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d484:	2300      	movs	r3, #0
 800d486:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d48e:	78fa      	ldrb	r2, [r7, #3]
 800d490:	4611      	mov	r1, r2
 800d492:	4618      	mov	r0, r3
 800d494:	f7f4 fff1 	bl	800247a <HAL_HCD_HC_Halt>
 800d498:	4603      	mov	r3, r0
 800d49a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d49c:	7bfb      	ldrb	r3, [r7, #15]
 800d49e:	4618      	mov	r0, r3
 800d4a0:	f000 f89e 	bl	800d5e0 <USBH_Get_USB_Status>
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d4a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	3710      	adds	r7, #16
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	bd80      	pop	{r7, pc}

0800d4b2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800d4b2:	b590      	push	{r4, r7, lr}
 800d4b4:	b089      	sub	sp, #36	; 0x24
 800d4b6:	af04      	add	r7, sp, #16
 800d4b8:	6078      	str	r0, [r7, #4]
 800d4ba:	4608      	mov	r0, r1
 800d4bc:	4611      	mov	r1, r2
 800d4be:	461a      	mov	r2, r3
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	70fb      	strb	r3, [r7, #3]
 800d4c4:	460b      	mov	r3, r1
 800d4c6:	70bb      	strb	r3, [r7, #2]
 800d4c8:	4613      	mov	r3, r2
 800d4ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d4da:	787c      	ldrb	r4, [r7, #1]
 800d4dc:	78ba      	ldrb	r2, [r7, #2]
 800d4de:	78f9      	ldrb	r1, [r7, #3]
 800d4e0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d4e4:	9303      	str	r3, [sp, #12]
 800d4e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d4e8:	9302      	str	r3, [sp, #8]
 800d4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ec:	9301      	str	r3, [sp, #4]
 800d4ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d4f2:	9300      	str	r3, [sp, #0]
 800d4f4:	4623      	mov	r3, r4
 800d4f6:	f7f4 ffe3 	bl	80024c0 <HAL_HCD_HC_SubmitRequest>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 800d4fe:	7bfb      	ldrb	r3, [r7, #15]
 800d500:	4618      	mov	r0, r3
 800d502:	f000 f86d 	bl	800d5e0 <USBH_Get_USB_Status>
 800d506:	4603      	mov	r3, r0
 800d508:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d50a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d50c:	4618      	mov	r0, r3
 800d50e:	3714      	adds	r7, #20
 800d510:	46bd      	mov	sp, r7
 800d512:	bd90      	pop	{r4, r7, pc}

0800d514 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b082      	sub	sp, #8
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
 800d51c:	460b      	mov	r3, r1
 800d51e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d526:	78fa      	ldrb	r2, [r7, #3]
 800d528:	4611      	mov	r1, r2
 800d52a:	4618      	mov	r0, r3
 800d52c:	f7f5 fa73 	bl	8002a16 <HAL_HCD_HC_GetURBState>
 800d530:	4603      	mov	r3, r0
}
 800d532:	4618      	mov	r0, r3
 800d534:	3708      	adds	r7, #8
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}

0800d53a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800d53a:	b580      	push	{r7, lr}
 800d53c:	b082      	sub	sp, #8
 800d53e:	af00      	add	r7, sp, #0
 800d540:	6078      	str	r0, [r7, #4]
 800d542:	460b      	mov	r3, r1
 800d544:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800d54c:	2b01      	cmp	r3, #1
 800d54e:	d103      	bne.n	800d558 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800d550:	78fb      	ldrb	r3, [r7, #3]
 800d552:	4618      	mov	r0, r3
 800d554:	f000 f870 	bl	800d638 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800d558:	20c8      	movs	r0, #200	; 0xc8
 800d55a:	f7f3 f82b 	bl	80005b4 <HAL_Delay>
  return USBH_OK;
 800d55e:	2300      	movs	r3, #0
}
 800d560:	4618      	mov	r0, r3
 800d562:	3708      	adds	r7, #8
 800d564:	46bd      	mov	sp, r7
 800d566:	bd80      	pop	{r7, pc}

0800d568 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800d568:	b480      	push	{r7}
 800d56a:	b085      	sub	sp, #20
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
 800d570:	460b      	mov	r3, r1
 800d572:	70fb      	strb	r3, [r7, #3]
 800d574:	4613      	mov	r3, r2
 800d576:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d57e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800d580:	78fb      	ldrb	r3, [r7, #3]
 800d582:	68fa      	ldr	r2, [r7, #12]
 800d584:	212c      	movs	r1, #44	; 0x2c
 800d586:	fb01 f303 	mul.w	r3, r1, r3
 800d58a:	4413      	add	r3, r2
 800d58c:	333b      	adds	r3, #59	; 0x3b
 800d58e:	781b      	ldrb	r3, [r3, #0]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d009      	beq.n	800d5a8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800d594:	78fb      	ldrb	r3, [r7, #3]
 800d596:	68fa      	ldr	r2, [r7, #12]
 800d598:	212c      	movs	r1, #44	; 0x2c
 800d59a:	fb01 f303 	mul.w	r3, r1, r3
 800d59e:	4413      	add	r3, r2
 800d5a0:	3354      	adds	r3, #84	; 0x54
 800d5a2:	78ba      	ldrb	r2, [r7, #2]
 800d5a4:	701a      	strb	r2, [r3, #0]
 800d5a6:	e008      	b.n	800d5ba <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800d5a8:	78fb      	ldrb	r3, [r7, #3]
 800d5aa:	68fa      	ldr	r2, [r7, #12]
 800d5ac:	212c      	movs	r1, #44	; 0x2c
 800d5ae:	fb01 f303 	mul.w	r3, r1, r3
 800d5b2:	4413      	add	r3, r2
 800d5b4:	3355      	adds	r3, #85	; 0x55
 800d5b6:	78ba      	ldrb	r2, [r7, #2]
 800d5b8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800d5ba:	2300      	movs	r3, #0
}
 800d5bc:	4618      	mov	r0, r3
 800d5be:	3714      	adds	r7, #20
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c6:	4770      	bx	lr

0800d5c8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b082      	sub	sp, #8
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800d5d0:	6878      	ldr	r0, [r7, #4]
 800d5d2:	f7f2 ffef 	bl	80005b4 <HAL_Delay>
}
 800d5d6:	bf00      	nop
 800d5d8:	3708      	adds	r7, #8
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	bd80      	pop	{r7, pc}
	...

0800d5e0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d5e0:	b480      	push	{r7}
 800d5e2:	b085      	sub	sp, #20
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d5ee:	79fb      	ldrb	r3, [r7, #7]
 800d5f0:	2b03      	cmp	r3, #3
 800d5f2:	d817      	bhi.n	800d624 <USBH_Get_USB_Status+0x44>
 800d5f4:	a201      	add	r2, pc, #4	; (adr r2, 800d5fc <USBH_Get_USB_Status+0x1c>)
 800d5f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5fa:	bf00      	nop
 800d5fc:	0800d60d 	.word	0x0800d60d
 800d600:	0800d613 	.word	0x0800d613
 800d604:	0800d619 	.word	0x0800d619
 800d608:	0800d61f 	.word	0x0800d61f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800d60c:	2300      	movs	r3, #0
 800d60e:	73fb      	strb	r3, [r7, #15]
    break;
 800d610:	e00b      	b.n	800d62a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d612:	2302      	movs	r3, #2
 800d614:	73fb      	strb	r3, [r7, #15]
    break;
 800d616:	e008      	b.n	800d62a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d618:	2301      	movs	r3, #1
 800d61a:	73fb      	strb	r3, [r7, #15]
    break;
 800d61c:	e005      	b.n	800d62a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d61e:	2302      	movs	r3, #2
 800d620:	73fb      	strb	r3, [r7, #15]
    break;
 800d622:	e002      	b.n	800d62a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800d624:	2302      	movs	r3, #2
 800d626:	73fb      	strb	r3, [r7, #15]
    break;
 800d628:	bf00      	nop
  }
  return usb_status;
 800d62a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d62c:	4618      	mov	r0, r3
 800d62e:	3714      	adds	r7, #20
 800d630:	46bd      	mov	sp, r7
 800d632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d636:	4770      	bx	lr

0800d638 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b084      	sub	sp, #16
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	4603      	mov	r3, r0
 800d640:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800d642:	79fb      	ldrb	r3, [r7, #7]
 800d644:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800d646:	79fb      	ldrb	r3, [r7, #7]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d102      	bne.n	800d652 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800d64c:	2300      	movs	r3, #0
 800d64e:	73fb      	strb	r3, [r7, #15]
 800d650:	e001      	b.n	800d656 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800d652:	2301      	movs	r3, #1
 800d654:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,(GPIO_PinState)data);
 800d656:	7bfb      	ldrb	r3, [r7, #15]
 800d658:	461a      	mov	r2, r3
 800d65a:	2140      	movs	r1, #64	; 0x40
 800d65c:	4803      	ldr	r0, [pc, #12]	; (800d66c <MX_DriverVbusFS+0x34>)
 800d65e:	f7f4 fe03 	bl	8002268 <HAL_GPIO_WritePin>
}
 800d662:	bf00      	nop
 800d664:	3710      	adds	r7, #16
 800d666:	46bd      	mov	sp, r7
 800d668:	bd80      	pop	{r7, pc}
 800d66a:	bf00      	nop
 800d66c:	48000800 	.word	0x48000800

0800d670 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800d670:	f8df d034 	ldr.w	sp, [pc, #52]	; 800d6a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800d674:	f7ff fcb0 	bl	800cfd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800d678:	480c      	ldr	r0, [pc, #48]	; (800d6ac <LoopForever+0x6>)
  ldr r1, =_edata
 800d67a:	490d      	ldr	r1, [pc, #52]	; (800d6b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800d67c:	4a0d      	ldr	r2, [pc, #52]	; (800d6b4 <LoopForever+0xe>)
  movs r3, #0
 800d67e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800d680:	e002      	b.n	800d688 <LoopCopyDataInit>

0800d682 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800d682:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800d684:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800d686:	3304      	adds	r3, #4

0800d688 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800d688:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800d68a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800d68c:	d3f9      	bcc.n	800d682 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800d68e:	4a0a      	ldr	r2, [pc, #40]	; (800d6b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800d690:	4c0a      	ldr	r4, [pc, #40]	; (800d6bc <LoopForever+0x16>)
  movs r3, #0
 800d692:	2300      	movs	r3, #0
  b LoopFillZerobss
 800d694:	e001      	b.n	800d69a <LoopFillZerobss>

0800d696 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800d696:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800d698:	3204      	adds	r2, #4

0800d69a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800d69a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800d69c:	d3fb      	bcc.n	800d696 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800d69e:	f000 f817 	bl	800d6d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800d6a2:	f7fe f9cf 	bl	800ba44 <main>

0800d6a6 <LoopForever>:

LoopForever:
    b LoopForever
 800d6a6:	e7fe      	b.n	800d6a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800d6a8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800d6ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800d6b0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800d6b4:	0800d9b8 	.word	0x0800d9b8
  ldr r2, =_sbss
 800d6b8:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800d6bc:	20000d1c 	.word	0x20000d1c

0800d6c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800d6c0:	e7fe      	b.n	800d6c0 <ADC1_2_IRQHandler>
	...

0800d6c4 <__errno>:
 800d6c4:	4b01      	ldr	r3, [pc, #4]	; (800d6cc <__errno+0x8>)
 800d6c6:	6818      	ldr	r0, [r3, #0]
 800d6c8:	4770      	bx	lr
 800d6ca:	bf00      	nop
 800d6cc:	2000002c 	.word	0x2000002c

0800d6d0 <__libc_init_array>:
 800d6d0:	b570      	push	{r4, r5, r6, lr}
 800d6d2:	4d0d      	ldr	r5, [pc, #52]	; (800d708 <__libc_init_array+0x38>)
 800d6d4:	4c0d      	ldr	r4, [pc, #52]	; (800d70c <__libc_init_array+0x3c>)
 800d6d6:	1b64      	subs	r4, r4, r5
 800d6d8:	10a4      	asrs	r4, r4, #2
 800d6da:	2600      	movs	r6, #0
 800d6dc:	42a6      	cmp	r6, r4
 800d6de:	d109      	bne.n	800d6f4 <__libc_init_array+0x24>
 800d6e0:	4d0b      	ldr	r5, [pc, #44]	; (800d710 <__libc_init_array+0x40>)
 800d6e2:	4c0c      	ldr	r4, [pc, #48]	; (800d714 <__libc_init_array+0x44>)
 800d6e4:	f000 f92e 	bl	800d944 <_init>
 800d6e8:	1b64      	subs	r4, r4, r5
 800d6ea:	10a4      	asrs	r4, r4, #2
 800d6ec:	2600      	movs	r6, #0
 800d6ee:	42a6      	cmp	r6, r4
 800d6f0:	d105      	bne.n	800d6fe <__libc_init_array+0x2e>
 800d6f2:	bd70      	pop	{r4, r5, r6, pc}
 800d6f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d6f8:	4798      	blx	r3
 800d6fa:	3601      	adds	r6, #1
 800d6fc:	e7ee      	b.n	800d6dc <__libc_init_array+0xc>
 800d6fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800d702:	4798      	blx	r3
 800d704:	3601      	adds	r6, #1
 800d706:	e7f2      	b.n	800d6ee <__libc_init_array+0x1e>
 800d708:	0800d9b0 	.word	0x0800d9b0
 800d70c:	0800d9b0 	.word	0x0800d9b0
 800d710:	0800d9b0 	.word	0x0800d9b0
 800d714:	0800d9b4 	.word	0x0800d9b4

0800d718 <malloc>:
 800d718:	4b02      	ldr	r3, [pc, #8]	; (800d724 <malloc+0xc>)
 800d71a:	4601      	mov	r1, r0
 800d71c:	6818      	ldr	r0, [r3, #0]
 800d71e:	f000 b87f 	b.w	800d820 <_malloc_r>
 800d722:	bf00      	nop
 800d724:	2000002c 	.word	0x2000002c

0800d728 <free>:
 800d728:	4b02      	ldr	r3, [pc, #8]	; (800d734 <free+0xc>)
 800d72a:	4601      	mov	r1, r0
 800d72c:	6818      	ldr	r0, [r3, #0]
 800d72e:	f000 b80b 	b.w	800d748 <_free_r>
 800d732:	bf00      	nop
 800d734:	2000002c 	.word	0x2000002c

0800d738 <memset>:
 800d738:	4402      	add	r2, r0
 800d73a:	4603      	mov	r3, r0
 800d73c:	4293      	cmp	r3, r2
 800d73e:	d100      	bne.n	800d742 <memset+0xa>
 800d740:	4770      	bx	lr
 800d742:	f803 1b01 	strb.w	r1, [r3], #1
 800d746:	e7f9      	b.n	800d73c <memset+0x4>

0800d748 <_free_r>:
 800d748:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d74a:	2900      	cmp	r1, #0
 800d74c:	d044      	beq.n	800d7d8 <_free_r+0x90>
 800d74e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d752:	9001      	str	r0, [sp, #4]
 800d754:	2b00      	cmp	r3, #0
 800d756:	f1a1 0404 	sub.w	r4, r1, #4
 800d75a:	bfb8      	it	lt
 800d75c:	18e4      	addlt	r4, r4, r3
 800d75e:	f000 f8e3 	bl	800d928 <__malloc_lock>
 800d762:	4a1e      	ldr	r2, [pc, #120]	; (800d7dc <_free_r+0x94>)
 800d764:	9801      	ldr	r0, [sp, #4]
 800d766:	6813      	ldr	r3, [r2, #0]
 800d768:	b933      	cbnz	r3, 800d778 <_free_r+0x30>
 800d76a:	6063      	str	r3, [r4, #4]
 800d76c:	6014      	str	r4, [r2, #0]
 800d76e:	b003      	add	sp, #12
 800d770:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d774:	f000 b8de 	b.w	800d934 <__malloc_unlock>
 800d778:	42a3      	cmp	r3, r4
 800d77a:	d908      	bls.n	800d78e <_free_r+0x46>
 800d77c:	6825      	ldr	r5, [r4, #0]
 800d77e:	1961      	adds	r1, r4, r5
 800d780:	428b      	cmp	r3, r1
 800d782:	bf01      	itttt	eq
 800d784:	6819      	ldreq	r1, [r3, #0]
 800d786:	685b      	ldreq	r3, [r3, #4]
 800d788:	1949      	addeq	r1, r1, r5
 800d78a:	6021      	streq	r1, [r4, #0]
 800d78c:	e7ed      	b.n	800d76a <_free_r+0x22>
 800d78e:	461a      	mov	r2, r3
 800d790:	685b      	ldr	r3, [r3, #4]
 800d792:	b10b      	cbz	r3, 800d798 <_free_r+0x50>
 800d794:	42a3      	cmp	r3, r4
 800d796:	d9fa      	bls.n	800d78e <_free_r+0x46>
 800d798:	6811      	ldr	r1, [r2, #0]
 800d79a:	1855      	adds	r5, r2, r1
 800d79c:	42a5      	cmp	r5, r4
 800d79e:	d10b      	bne.n	800d7b8 <_free_r+0x70>
 800d7a0:	6824      	ldr	r4, [r4, #0]
 800d7a2:	4421      	add	r1, r4
 800d7a4:	1854      	adds	r4, r2, r1
 800d7a6:	42a3      	cmp	r3, r4
 800d7a8:	6011      	str	r1, [r2, #0]
 800d7aa:	d1e0      	bne.n	800d76e <_free_r+0x26>
 800d7ac:	681c      	ldr	r4, [r3, #0]
 800d7ae:	685b      	ldr	r3, [r3, #4]
 800d7b0:	6053      	str	r3, [r2, #4]
 800d7b2:	4421      	add	r1, r4
 800d7b4:	6011      	str	r1, [r2, #0]
 800d7b6:	e7da      	b.n	800d76e <_free_r+0x26>
 800d7b8:	d902      	bls.n	800d7c0 <_free_r+0x78>
 800d7ba:	230c      	movs	r3, #12
 800d7bc:	6003      	str	r3, [r0, #0]
 800d7be:	e7d6      	b.n	800d76e <_free_r+0x26>
 800d7c0:	6825      	ldr	r5, [r4, #0]
 800d7c2:	1961      	adds	r1, r4, r5
 800d7c4:	428b      	cmp	r3, r1
 800d7c6:	bf04      	itt	eq
 800d7c8:	6819      	ldreq	r1, [r3, #0]
 800d7ca:	685b      	ldreq	r3, [r3, #4]
 800d7cc:	6063      	str	r3, [r4, #4]
 800d7ce:	bf04      	itt	eq
 800d7d0:	1949      	addeq	r1, r1, r5
 800d7d2:	6021      	streq	r1, [r4, #0]
 800d7d4:	6054      	str	r4, [r2, #4]
 800d7d6:	e7ca      	b.n	800d76e <_free_r+0x26>
 800d7d8:	b003      	add	sp, #12
 800d7da:	bd30      	pop	{r4, r5, pc}
 800d7dc:	20000d0c 	.word	0x20000d0c

0800d7e0 <sbrk_aligned>:
 800d7e0:	b570      	push	{r4, r5, r6, lr}
 800d7e2:	4e0e      	ldr	r6, [pc, #56]	; (800d81c <sbrk_aligned+0x3c>)
 800d7e4:	460c      	mov	r4, r1
 800d7e6:	6831      	ldr	r1, [r6, #0]
 800d7e8:	4605      	mov	r5, r0
 800d7ea:	b911      	cbnz	r1, 800d7f2 <sbrk_aligned+0x12>
 800d7ec:	f000 f88c 	bl	800d908 <_sbrk_r>
 800d7f0:	6030      	str	r0, [r6, #0]
 800d7f2:	4621      	mov	r1, r4
 800d7f4:	4628      	mov	r0, r5
 800d7f6:	f000 f887 	bl	800d908 <_sbrk_r>
 800d7fa:	1c43      	adds	r3, r0, #1
 800d7fc:	d00a      	beq.n	800d814 <sbrk_aligned+0x34>
 800d7fe:	1cc4      	adds	r4, r0, #3
 800d800:	f024 0403 	bic.w	r4, r4, #3
 800d804:	42a0      	cmp	r0, r4
 800d806:	d007      	beq.n	800d818 <sbrk_aligned+0x38>
 800d808:	1a21      	subs	r1, r4, r0
 800d80a:	4628      	mov	r0, r5
 800d80c:	f000 f87c 	bl	800d908 <_sbrk_r>
 800d810:	3001      	adds	r0, #1
 800d812:	d101      	bne.n	800d818 <sbrk_aligned+0x38>
 800d814:	f04f 34ff 	mov.w	r4, #4294967295
 800d818:	4620      	mov	r0, r4
 800d81a:	bd70      	pop	{r4, r5, r6, pc}
 800d81c:	20000d10 	.word	0x20000d10

0800d820 <_malloc_r>:
 800d820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d824:	1ccd      	adds	r5, r1, #3
 800d826:	f025 0503 	bic.w	r5, r5, #3
 800d82a:	3508      	adds	r5, #8
 800d82c:	2d0c      	cmp	r5, #12
 800d82e:	bf38      	it	cc
 800d830:	250c      	movcc	r5, #12
 800d832:	2d00      	cmp	r5, #0
 800d834:	4607      	mov	r7, r0
 800d836:	db01      	blt.n	800d83c <_malloc_r+0x1c>
 800d838:	42a9      	cmp	r1, r5
 800d83a:	d905      	bls.n	800d848 <_malloc_r+0x28>
 800d83c:	230c      	movs	r3, #12
 800d83e:	603b      	str	r3, [r7, #0]
 800d840:	2600      	movs	r6, #0
 800d842:	4630      	mov	r0, r6
 800d844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d848:	4e2e      	ldr	r6, [pc, #184]	; (800d904 <_malloc_r+0xe4>)
 800d84a:	f000 f86d 	bl	800d928 <__malloc_lock>
 800d84e:	6833      	ldr	r3, [r6, #0]
 800d850:	461c      	mov	r4, r3
 800d852:	bb34      	cbnz	r4, 800d8a2 <_malloc_r+0x82>
 800d854:	4629      	mov	r1, r5
 800d856:	4638      	mov	r0, r7
 800d858:	f7ff ffc2 	bl	800d7e0 <sbrk_aligned>
 800d85c:	1c43      	adds	r3, r0, #1
 800d85e:	4604      	mov	r4, r0
 800d860:	d14d      	bne.n	800d8fe <_malloc_r+0xde>
 800d862:	6834      	ldr	r4, [r6, #0]
 800d864:	4626      	mov	r6, r4
 800d866:	2e00      	cmp	r6, #0
 800d868:	d140      	bne.n	800d8ec <_malloc_r+0xcc>
 800d86a:	6823      	ldr	r3, [r4, #0]
 800d86c:	4631      	mov	r1, r6
 800d86e:	4638      	mov	r0, r7
 800d870:	eb04 0803 	add.w	r8, r4, r3
 800d874:	f000 f848 	bl	800d908 <_sbrk_r>
 800d878:	4580      	cmp	r8, r0
 800d87a:	d13a      	bne.n	800d8f2 <_malloc_r+0xd2>
 800d87c:	6821      	ldr	r1, [r4, #0]
 800d87e:	3503      	adds	r5, #3
 800d880:	1a6d      	subs	r5, r5, r1
 800d882:	f025 0503 	bic.w	r5, r5, #3
 800d886:	3508      	adds	r5, #8
 800d888:	2d0c      	cmp	r5, #12
 800d88a:	bf38      	it	cc
 800d88c:	250c      	movcc	r5, #12
 800d88e:	4629      	mov	r1, r5
 800d890:	4638      	mov	r0, r7
 800d892:	f7ff ffa5 	bl	800d7e0 <sbrk_aligned>
 800d896:	3001      	adds	r0, #1
 800d898:	d02b      	beq.n	800d8f2 <_malloc_r+0xd2>
 800d89a:	6823      	ldr	r3, [r4, #0]
 800d89c:	442b      	add	r3, r5
 800d89e:	6023      	str	r3, [r4, #0]
 800d8a0:	e00e      	b.n	800d8c0 <_malloc_r+0xa0>
 800d8a2:	6822      	ldr	r2, [r4, #0]
 800d8a4:	1b52      	subs	r2, r2, r5
 800d8a6:	d41e      	bmi.n	800d8e6 <_malloc_r+0xc6>
 800d8a8:	2a0b      	cmp	r2, #11
 800d8aa:	d916      	bls.n	800d8da <_malloc_r+0xba>
 800d8ac:	1961      	adds	r1, r4, r5
 800d8ae:	42a3      	cmp	r3, r4
 800d8b0:	6025      	str	r5, [r4, #0]
 800d8b2:	bf18      	it	ne
 800d8b4:	6059      	strne	r1, [r3, #4]
 800d8b6:	6863      	ldr	r3, [r4, #4]
 800d8b8:	bf08      	it	eq
 800d8ba:	6031      	streq	r1, [r6, #0]
 800d8bc:	5162      	str	r2, [r4, r5]
 800d8be:	604b      	str	r3, [r1, #4]
 800d8c0:	4638      	mov	r0, r7
 800d8c2:	f104 060b 	add.w	r6, r4, #11
 800d8c6:	f000 f835 	bl	800d934 <__malloc_unlock>
 800d8ca:	f026 0607 	bic.w	r6, r6, #7
 800d8ce:	1d23      	adds	r3, r4, #4
 800d8d0:	1af2      	subs	r2, r6, r3
 800d8d2:	d0b6      	beq.n	800d842 <_malloc_r+0x22>
 800d8d4:	1b9b      	subs	r3, r3, r6
 800d8d6:	50a3      	str	r3, [r4, r2]
 800d8d8:	e7b3      	b.n	800d842 <_malloc_r+0x22>
 800d8da:	6862      	ldr	r2, [r4, #4]
 800d8dc:	42a3      	cmp	r3, r4
 800d8de:	bf0c      	ite	eq
 800d8e0:	6032      	streq	r2, [r6, #0]
 800d8e2:	605a      	strne	r2, [r3, #4]
 800d8e4:	e7ec      	b.n	800d8c0 <_malloc_r+0xa0>
 800d8e6:	4623      	mov	r3, r4
 800d8e8:	6864      	ldr	r4, [r4, #4]
 800d8ea:	e7b2      	b.n	800d852 <_malloc_r+0x32>
 800d8ec:	4634      	mov	r4, r6
 800d8ee:	6876      	ldr	r6, [r6, #4]
 800d8f0:	e7b9      	b.n	800d866 <_malloc_r+0x46>
 800d8f2:	230c      	movs	r3, #12
 800d8f4:	603b      	str	r3, [r7, #0]
 800d8f6:	4638      	mov	r0, r7
 800d8f8:	f000 f81c 	bl	800d934 <__malloc_unlock>
 800d8fc:	e7a1      	b.n	800d842 <_malloc_r+0x22>
 800d8fe:	6025      	str	r5, [r4, #0]
 800d900:	e7de      	b.n	800d8c0 <_malloc_r+0xa0>
 800d902:	bf00      	nop
 800d904:	20000d0c 	.word	0x20000d0c

0800d908 <_sbrk_r>:
 800d908:	b538      	push	{r3, r4, r5, lr}
 800d90a:	4d06      	ldr	r5, [pc, #24]	; (800d924 <_sbrk_r+0x1c>)
 800d90c:	2300      	movs	r3, #0
 800d90e:	4604      	mov	r4, r0
 800d910:	4608      	mov	r0, r1
 800d912:	602b      	str	r3, [r5, #0]
 800d914:	f7ff fb2a 	bl	800cf6c <_sbrk>
 800d918:	1c43      	adds	r3, r0, #1
 800d91a:	d102      	bne.n	800d922 <_sbrk_r+0x1a>
 800d91c:	682b      	ldr	r3, [r5, #0]
 800d91e:	b103      	cbz	r3, 800d922 <_sbrk_r+0x1a>
 800d920:	6023      	str	r3, [r4, #0]
 800d922:	bd38      	pop	{r3, r4, r5, pc}
 800d924:	20000d14 	.word	0x20000d14

0800d928 <__malloc_lock>:
 800d928:	4801      	ldr	r0, [pc, #4]	; (800d930 <__malloc_lock+0x8>)
 800d92a:	f000 b809 	b.w	800d940 <__retarget_lock_acquire_recursive>
 800d92e:	bf00      	nop
 800d930:	20000d18 	.word	0x20000d18

0800d934 <__malloc_unlock>:
 800d934:	4801      	ldr	r0, [pc, #4]	; (800d93c <__malloc_unlock+0x8>)
 800d936:	f000 b804 	b.w	800d942 <__retarget_lock_release_recursive>
 800d93a:	bf00      	nop
 800d93c:	20000d18 	.word	0x20000d18

0800d940 <__retarget_lock_acquire_recursive>:
 800d940:	4770      	bx	lr

0800d942 <__retarget_lock_release_recursive>:
 800d942:	4770      	bx	lr

0800d944 <_init>:
 800d944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d946:	bf00      	nop
 800d948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d94a:	bc08      	pop	{r3}
 800d94c:	469e      	mov	lr, r3
 800d94e:	4770      	bx	lr

0800d950 <_fini>:
 800d950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d952:	bf00      	nop
 800d954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d956:	bc08      	pop	{r3}
 800d958:	469e      	mov	lr, r3
 800d95a:	4770      	bx	lr
